/*
* Copyright (c) 2021, salesforce.com, inc.
* All rights reserved.
* SPDX-License-Identifier: BSD-3-Clause
* For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
*/
import { BodyInit } from "node-fetch";
import { RequestInit as NodeRequestInit } from "node-fetch";
/*
* Copyright (c) 2023, Salesforce, Inc.
* All rights reserved.
* SPDX-License-Identifier: BSD-3-Clause
* For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
*/
/**
 * Makes a type easier to read.
 */
type Prettify<T> = NonNullable<{
    [K in keyof T]: T[K];
}>;
/**
 * Generates the types required on a method, based on those provided in the config.
 */
type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
/**
 * If an object has a `parameters` property, and the `parameters` object has required properties,
 * then the `parameters` property on the root object is marked as required.
 */
type RequireParametersUnlessAllAreOptional<T extends {
    parameters?: Record<string, unknown>;
}> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
/**
 * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
 * if not specified.
 */
interface BaseUriParameters {
    shortCode: string;
    version?: string; // Optional, will default to "v1" if not provided.
}
/**
 * Generic interface for path parameters.
 */
interface PathParameters {
    [key: string]: string | number | boolean;
}
/**
 * Generic interface for query parameters.
 */
interface QueryParameters {
    [key: string]: string | number | boolean | string[] | number[];
}
/**
 * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
 * types for query parameters for the value.
 */
type CustomQueryParameters = {
    [key in `c_${string}`]: string | number | boolean | string[] | number[];
};
/**
 * Custom body request type with any string prefixed with `c_` as the key and the allowed
 * types for the value.
 */
type CustomRequestBody = {
    [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
        [key: string]: unknown;
    };
};
/**
 * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
 * it from the `RequestInit` provided by node-fetch.
 */
type BrowserRequestInit = RequestInit;
/**
 * Any properties supported in either the browser or node are accepted.
 * Using the right properties in the right context is left to the user.
 */
type FetchOptions = NodeRequestInit & BrowserRequestInit;
/**
 * Base options that can be passed to the `ClientConfig` class.
 */
interface ClientConfigInit<Params extends BaseUriParameters> {
    baseUri?: string;
    proxy?: string;
    headers?: {
        [key: string]: string;
    };
    parameters: Params;
    fetchOptions?: FetchOptions;
    transformRequest?: (data: unknown, headers: {
        [key: string]: string;
    }) => Required<FetchOptions>["body"];
    throwOnBadResponse?: boolean;
}
type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
/**
 * Configuration parameters common to Commerce SDK clients
 */
declare class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
    baseUri?: string;
    proxy?: string;
    headers: {
        [key: string]: string;
    };
    parameters: Params;
    fetchOptions: FetchOptions;
    transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
    throwOnBadResponse: boolean;
    constructor(config: ClientConfigInit<Params>);
    static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
}
type BoolFilter = {
    filters?: Array<Filter>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery = {} & {
    [key: string]: any;
};
type FilteredQuery = {
    filter: Filter;
    query: Query;
} & {
    [key: string]: any;
};
type QueryFilter = {
    query: Query;
} & {
    [key: string]: any;
};
type Query = {
    boolQuery?: BoolQuery;
    filteredQuery?: FilteredQuery;
    matchAllQuery?: MatchAllQuery;
    nestedQuery?: NestedQuery;
    termQuery?: TermQuery;
    textQuery?: TextQuery;
} & {
    [key: string]: any;
};
type TermQuery = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery = {
    must?: Array<Query>;
    mustNot?: Array<Query>;
    should?: Array<Query>;
} & {
    [key: string]: any;
};
type NestedQuery = {
    path: string;
    query: Query;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter = {
    boolFilter?: BoolFilter;
    queryFilter?: QueryFilter;
    range2Filter?: Range2Filter;
    rangeFilter?: RangeFilter;
    termFilter?: TermFilter;
} & {
    [key: string]: any;
};
type Sort = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type RangeFilter = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
} & {
    [key: string]: any;
};
type L10nString = {} & {
    [key: string]: any;
};
type PropertyValueDefinition = {
    description: L10nString;
    displayValue: L10nString;
    id: string;
    position?: number;
    value: string;
};
type TaxItems = {
    taxItems?: Array<TaxItem>;
} & {
    [key: string]: any;
};
type PaymentCardSpec = {
    cardType?: string;
    checksumVerificationEnabled?: boolean;
    description?: string;
    image?: string;
    name?: string;
    numberLengths?: Array<string>;
    numberPrefixes?: Array<string>;
    securityCodeLength?: number;
} & {
    [key: string]: any;
};
type OrderAddress = {
    address1?: string;
    address2?: string;
    city?: string;
    companyName?: string;
    countryCode?: string;
    firstName?: string;
    fullName?: string;
    id?: string;
    jobTitle?: string;
    lastName?: string;
    phone?: string;
    postBox?: string;
    postalCode?: string;
    salutation?: string;
    secondName?: string;
    stateCode?: string;
    suffix?: string;
    suite?: string;
    title?: string;
} & {
    [key: string]: any;
};
type PriceAdjustmentRequest = {
    discount?: DiscountRequest;
    itemId?: string;
    itemText?: string;
    level: string;
    promotionId?: string;
    reasonCode?: string;
} & {
    [key: string]: any;
};
type PaymentCard = {
    cardType?: string;
    creditCardExpired?: boolean;
    creditCardToken?: string;
    expirationMonth?: number;
    expirationYear?: number;
    holder?: string;
    issueNumber?: string;
    maskedNumber?: string;
    numberLastDigits?: string;
    validFromMonth?: number;
    validFromYear?: number;
};
type ShippingItem = {
    adjustedTax?: number;
    basePrice?: number;
    itemId?: string;
    itemText?: string;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment>;
    priceAfterItemDiscount?: number;
    shipmentId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type Discount = {
    amount?: number;
    percentage?: number;
    priceBookId?: string;
    type: string;
} & {
    [key: string]: any;
};
type Note = {
    createdBy?: string;
    creationDate?: any;
    id?: string;
    subject?: string;
    text?: string;
};
type CouponItem = {
    code: string;
    couponItemId?: string;
    statusCode?: string;
    valid?: boolean;
} & {
    [key: string]: any;
};
type PriceBookIds = Array<string>;
type ShippingPromotion = {
    calloutMsg?: string;
    promotionId?: string;
    promotionName?: string;
} & {
    [key: string]: any;
};
type ProductItem = {
    adjustedTax?: number;
    basePrice?: number;
    bonusDiscountLineItemId?: string;
    bonusProductLineItem?: boolean;
    bundledProductItems?: Array<ProductItem>;
    gift?: boolean;
    giftMessage?: string;
    inventoryId?: string;
    itemId?: string;
    itemText?: string;
    optionItems?: Array<OptionItem>;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment>;
    priceAfterItemDiscount?: number;
    priceAfterOrderDiscount?: number;
    productId?: string;
    productListItem?: ProductListItemReference;
    productName?: string;
    quantity?: number;
    shipmentId?: string;
    shippingItemId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type BasketPaymentInstrumentRequest = {
    amount?: number;
    bankRoutingNumber?: string;
    giftCertificateCode?: string;
    paymentCard?: OrderPaymentCardRequest;
    paymentMethodId?: string;
} & {
    [key: string]: any;
};
type Taxes = {
    taxes: {} & {
        [key: string]: any;
    };
};
type OrderPaymentInstrument = {
    amount?: number;
    authorizationStatus?: Status;
    bankRoutingNumber?: string;
    maskedGiftCertificateCode?: string;
    paymentCard?: PaymentCard;
    paymentInstrumentId?: string;
    paymentMethodId?: string;
} & {
    [key: string]: any;
};
type BonusDiscountLineItem = {
    bonusProducts?: Array<ProductDetailsLink>;
    couponCode?: string;
    id?: string;
    maxBonusItems?: number;
    promotionId?: string;
} & {
    [key: string]: any;
};
type PaymentMethodResult = {
    applicablePaymentMethods?: Array<PaymentMethod>;
} & {
    [key: string]: any;
};
type Shipment = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    gift?: boolean;
    giftMessage?: string;
    merchandizeTotalTax?: number;
    productSubTotal?: number;
    productTotal?: number;
    shipmentId?: string;
    shipmentNo?: string;
    shipmentTotal?: number;
    shippingAddress?: OrderAddress;
    shippingMethod?: ShippingMethod;
    shippingStatus?: string;
    shippingTotal?: number;
    shippingTotalTax?: number;
    taxTotal?: number;
    trackingNumber?: string;
} & {
    [key: string]: any;
};
type CustomerInfo = {
    customerId?: string;
    customerName?: string;
    customerNo?: string;
    email: string;
} & {
    [key: string]: any;
};
type SimpleLink = {};
type PriceAdjustment = {
    appliedDiscount?: Discount;
    couponCode?: string;
    createdBy?: string;
    creationDate?: any;
    custom?: boolean;
    itemText?: string;
    lastModified?: any;
    manual?: boolean;
    price?: number;
    priceAdjustmentId?: string;
    promotionId?: string;
    promotionLink?: string;
    reasonCode?: string;
} & {
    [key: string]: any;
};
type ShippingMethodResult = {
    applicableShippingMethods?: Array<ShippingMethod>;
    defaultShippingMethodId?: string;
} & {
    [key: string]: any;
};
type ProductDetailsLink = {
    productDescription?: string;
    productId: string;
    productName?: string;
    title?: string;
};
type OptionItem = {
    adjustedTax?: number;
    basePrice?: number;
    bonusDiscountLineItemId?: string;
    bonusProductLineItem?: boolean;
    bundledProductItems?: Array<ProductItem>;
    gift?: boolean;
    giftMessage?: string;
    inventoryId?: string;
    itemId?: string;
    itemText?: string;
    optionId: string;
    optionItems?: Array<OptionItem>;
    optionValueId: string;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment>;
    priceAfterItemDiscount?: number;
    priceAfterOrderDiscount?: number;
    productId?: string;
    productListItem?: ProductListItemReference;
    productName?: string;
    quantity?: number;
    shipmentId?: string;
    shippingItemId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type ShippingMethod = {
    description?: string;
    externalShippingMethod?: string;
    id: string;
    name?: string;
    price?: number;
    shippingPromotions?: Array<ShippingPromotion>;
} & {
    [key: string]: any;
};
type DiscountRequest = {
    type: string;
    value: number;
};
type Basket = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    agentBasket?: boolean;
    basketId?: string;
    billingAddress?: OrderAddress;
    bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
    channelType?: string;
    couponItems?: Array<CouponItem>;
    creationDate?: any;
    currency?: string;
    customerInfo?: CustomerInfo;
    giftCertificateItems?: Array<GiftCertificateItem>;
    groupedTaxItems?: Array<GroupedTaxItem>;
    inventoryReservationExpiry?: any;
    lastModified?: any;
    merchandizeTotalTax?: number;
    notes?: SimpleLink;
    orderPriceAdjustments?: Array<PriceAdjustment>;
    orderTotal?: number;
    paymentInstruments?: Array<OrderPaymentInstrument>;
    productItems?: Array<ProductItem>;
    productSubTotal?: number;
    productTotal?: number;
    shipments?: Array<Shipment>;
    shippingItems?: Array<ShippingItem>;
    shippingTotal?: number;
    shippingTotalTax?: number;
    sourceCode?: string;
    taxTotal?: number;
    taxation?: string;
    taxRoundedAtGroup?: boolean;
    temporaryBasket?: boolean;
} & {
    [key: string]: any;
};
type OrderLookupRequest = {
    email: string;
    orderViewCode: string;
};
type OrderPaymentInstrumentRequest = {
    amount?: number;
    bankRoutingNumber?: string;
    giftCertificateCode?: string;
    paymentCard?: OrderPaymentCardRequest;
    paymentMethodId?: string;
} & {
    [key: string]: any;
};
type GiftCertificateItem = {
    amount: number;
    giftCertificateItemId?: string;
    message?: string;
    recipientEmail: string;
    recipientName?: string;
    senderName?: string;
    shipmentId?: string;
} & {
    [key: string]: any;
};
type ProductListLink = {
    description?: string;
    name?: string;
    public?: boolean;
    title?: string;
    type?: string;
} & {
    [key: string]: any;
};
type GroupedTaxItem = {
    taxRate?: number;
    taxValue?: number;
};
type Order = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    billingAddress?: OrderAddress;
    bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
    channelType?: string;
    confirmationStatus?: string;
    couponItems?: Array<CouponItem>;
    createdBy?: string;
    creationDate?: any;
    currency?: string;
    customerInfo?: CustomerInfo;
    customerName?: string;
    exportStatus?: string;
    externalOrderStatus?: string;
    giftCertificateItems?: Array<GiftCertificateItem>;
    globalPartyId?: string;
    groupedTaxItems?: Array<GroupedTaxItem>;
    guest?: boolean;
    lastModified?: any;
    merchandizeTotalTax?: number;
    notes?: SimpleLink;
    orderNo?: string;
    orderPriceAdjustments?: Array<PriceAdjustment>;
    orderToken?: string;
    orderTotal?: number;
    orderViewCode?: string;
    paymentInstruments?: Array<OrderPaymentInstrument>;
    paymentStatus?: string;
    productItems?: Array<ProductItem>;
    productSubTotal?: number;
    productTotal?: number;
    shipments?: Array<Shipment>;
    shippingItems?: Array<ShippingItem>;
    shippingStatus?: string;
    shippingTotal?: number;
    shippingTotalTax?: number;
    siteId?: string;
    sourceCode?: string;
    status?: string;
    taxRoundedAtGroup?: boolean;
    taxTotal?: number;
    taxation?: string;
} & {
    [key: string]: any;
};
type OrderPaymentCardRequest = {
    cardType?: string;
    creditCardToken?: string;
    expirationMonth?: number;
    expirationYear?: number;
    holder?: string;
    issueNumber?: string;
    maskedNumber?: string;
    validFromMonth?: number;
    validFromYear?: number;
};
type PaymentMethod = {
    cards?: Array<PaymentCardSpec>;
    description?: string;
    id: string;
    image?: string;
    name?: string;
    paymentProcessorId?: string;
} & {
    [key: string]: any;
};
type TaxItem = {
    id: string;
    rate: number;
    value?: number;
};
type Status = {
    code?: string;
    message?: string;
    status?: number;
};
type ProductListItemReference = {
    id: string;
    priority?: number;
    productDetailsLink?: ProductDetailsLink;
    productList?: ProductListLink;
    public?: boolean;
    purchasedQuantity?: number;
    quantity?: number;
    type?: string;
};
/**
 * All path parameters that are used by at least one ShopperBaskets method.
 */
type ShopperBasketsPathParameters = {
    organizationId?: string;
    basketId?: string;
    couponItemId?: string;
    giftCertificateItemId?: string;
    itemId?: string;
    paymentInstrumentId?: string;
    priceAdjustmentId?: string;
    shipmentId?: string;
};
/**
 * All query parameters that are used by at least one ShopperBaskets method.
 */
type ShopperBasketsQueryParameters = {
    taxMode?: string;
    temporary?: boolean;
    siteId?: string;
    locale?: string;
    overrideExisting?: boolean;
    createDestinationBasket?: boolean;
    productItemMergeMode?: string;
    removeExternalTax?: boolean;
    useAsShipping?: boolean;
    useAsBilling?: boolean;
    exchange?: boolean;
};
/**
 * All parameters that are used by ShopperBaskets.
 */
type ShopperBasketsParameters = ShopperBasketsPathParameters & BaseUriParameters & ShopperBasketsQueryParameters;
/**
 * [Shopper Baskets](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-baskets:Summary)
 * ==================================
 *
 * *Build a checkout experience.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperBaskets } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperBasketsClient = new ShopperBaskets(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 2.0.10<br />
 * Last Updated: <br />
 * </span>
 *
 *
 */
declare class ShopperBaskets<ConfigParameters extends ShopperBasketsParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-baskets/{version}";
    static readonly apiPaths: {
        createBasket: string;
        transferBasket: string;
        mergeBasket: string;
        deleteBasket: string;
        getBasket: string;
        updateBasket: string;
        updateAsAgentBasket: string;
        updateBillingAddressForBasket: string;
        addCouponToBasket: string;
        removeCouponFromBasket: string;
        updateCustomerForBasket: string;
        addGiftCertificateItemToBasket: string;
        removeGiftCertificateItemFromBasket: string;
        updateGiftCertificateItemInBasket: string;
        addItemToBasket: string;
        updateItemsInBasket: string;
        removeItemFromBasket: string;
        updateItemInBasket: string;
        addTaxesForBasketItem: string;
        addPaymentInstrumentToBasket: string;
        removePaymentInstrumentFromBasket: string;
        updatePaymentInstrumentInBasket: string;
        getPaymentMethodsForBasket: string;
        addPriceAdjustmentToBasket: string;
        removePriceAdjustmentFromBasket: string;
        updatePriceAdjustmentInBasket: string;
        getPriceBooksForBasket: string;
        addPriceBooksToBasket: string;
        createShipmentForBasket: string;
        removeShipmentFromBasket: string;
        updateShipmentForBasket: string;
        updateShippingAddressForShipment: string;
        updateShippingMethodForShipment: string;
        getShippingMethodsForShipment: string;
        updateAsStorefrontBasket: string;
        getTaxesFromBasket: string;
        addTaxesForBasket: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly createBasket: readonly [
            "organizationId",
            "taxMode",
            "temporary",
            "siteId",
            "locale"
        ];
        readonly createBasketRequired: readonly [
            "organizationId",
            "siteId"
        ];
        readonly transferBasket: readonly [
            "organizationId",
            "overrideExisting",
            "siteId",
            "locale"
        ];
        readonly transferBasketRequired: readonly [
            "organizationId",
            "siteId"
        ];
        readonly mergeBasket: readonly [
            "organizationId",
            "createDestinationBasket",
            "productItemMergeMode",
            "siteId",
            "locale"
        ];
        readonly mergeBasketRequired: readonly [
            "organizationId",
            "siteId"
        ];
        readonly deleteBasket: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly deleteBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly getBasket: readonly [
            "organizationId",
            "basketId",
            "siteId",
            "locale"
        ];
        readonly getBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly updateBasket: readonly [
            "organizationId",
            "basketId",
            "removeExternalTax",
            "siteId",
            "locale"
        ];
        readonly updateBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly updateAsAgentBasket: readonly [
            "organizationId",
            "basketId",
            "siteId",
            "locale"
        ];
        readonly updateAsAgentBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly updateBillingAddressForBasket: readonly [
            "organizationId",
            "basketId",
            "useAsShipping",
            "removeExternalTax",
            "siteId",
            "locale"
        ];
        readonly updateBillingAddressForBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly addCouponToBasket: readonly [
            "organizationId",
            "basketId",
            "siteId",
            "locale"
        ];
        readonly addCouponToBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly removeCouponFromBasket: readonly [
            "organizationId",
            "basketId",
            "couponItemId",
            "siteId",
            "locale"
        ];
        readonly removeCouponFromBasketRequired: readonly [
            "organizationId",
            "basketId",
            "couponItemId",
            "siteId"
        ];
        readonly updateCustomerForBasket: readonly [
            "organizationId",
            "basketId",
            "siteId",
            "locale"
        ];
        readonly updateCustomerForBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly addGiftCertificateItemToBasket: readonly [
            "organizationId",
            "basketId",
            "siteId",
            "locale"
        ];
        readonly addGiftCertificateItemToBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly removeGiftCertificateItemFromBasket: readonly [
            "organizationId",
            "basketId",
            "giftCertificateItemId",
            "siteId",
            "locale"
        ];
        readonly removeGiftCertificateItemFromBasketRequired: readonly [
            "organizationId",
            "basketId",
            "giftCertificateItemId",
            "siteId"
        ];
        readonly updateGiftCertificateItemInBasket: readonly [
            "organizationId",
            "basketId",
            "giftCertificateItemId",
            "siteId",
            "locale"
        ];
        readonly updateGiftCertificateItemInBasketRequired: readonly [
            "organizationId",
            "basketId",
            "giftCertificateItemId",
            "siteId"
        ];
        readonly addItemToBasket: readonly [
            "organizationId",
            "basketId",
            "siteId",
            "locale"
        ];
        readonly addItemToBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly updateItemsInBasket: readonly [
            "organizationId",
            "basketId",
            "removeExternalTax",
            "siteId",
            "locale"
        ];
        readonly updateItemsInBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly removeItemFromBasket: readonly [
            "organizationId",
            "basketId",
            "itemId",
            "siteId",
            "locale"
        ];
        readonly removeItemFromBasketRequired: readonly [
            "organizationId",
            "basketId",
            "itemId",
            "siteId"
        ];
        readonly updateItemInBasket: readonly [
            "organizationId",
            "basketId",
            "itemId",
            "removeExternalTax",
            "siteId",
            "locale"
        ];
        readonly updateItemInBasketRequired: readonly [
            "organizationId",
            "basketId",
            "itemId",
            "siteId"
        ];
        readonly addTaxesForBasketItem: readonly [
            "organizationId",
            "basketId",
            "itemId",
            "siteId"
        ];
        readonly addTaxesForBasketItemRequired: readonly [
            "organizationId",
            "basketId",
            "itemId",
            "siteId"
        ];
        readonly addPaymentInstrumentToBasket: readonly [
            "organizationId",
            "basketId",
            "siteId",
            "locale"
        ];
        readonly addPaymentInstrumentToBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly removePaymentInstrumentFromBasket: readonly [
            "organizationId",
            "basketId",
            "paymentInstrumentId",
            "siteId",
            "locale"
        ];
        readonly removePaymentInstrumentFromBasketRequired: readonly [
            "organizationId",
            "basketId",
            "paymentInstrumentId",
            "siteId"
        ];
        readonly updatePaymentInstrumentInBasket: readonly [
            "organizationId",
            "basketId",
            "paymentInstrumentId",
            "removeExternalTax",
            "siteId",
            "locale"
        ];
        readonly updatePaymentInstrumentInBasketRequired: readonly [
            "organizationId",
            "basketId",
            "paymentInstrumentId",
            "siteId"
        ];
        readonly getPaymentMethodsForBasket: readonly [
            "organizationId",
            "basketId",
            "siteId",
            "locale"
        ];
        readonly getPaymentMethodsForBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly addPriceAdjustmentToBasket: readonly [
            "organizationId",
            "basketId",
            "siteId",
            "locale"
        ];
        readonly addPriceAdjustmentToBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly removePriceAdjustmentFromBasket: readonly [
            "organizationId",
            "basketId",
            "priceAdjustmentId",
            "siteId",
            "locale"
        ];
        readonly removePriceAdjustmentFromBasketRequired: readonly [
            "organizationId",
            "basketId",
            "priceAdjustmentId",
            "siteId"
        ];
        readonly updatePriceAdjustmentInBasket: readonly [
            "organizationId",
            "basketId",
            "priceAdjustmentId",
            "siteId"
        ];
        readonly updatePriceAdjustmentInBasketRequired: readonly [
            "organizationId",
            "basketId",
            "priceAdjustmentId",
            "siteId"
        ];
        readonly getPriceBooksForBasket: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly getPriceBooksForBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly addPriceBooksToBasket: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly addPriceBooksToBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly createShipmentForBasket: readonly [
            "organizationId",
            "basketId",
            "siteId",
            "locale"
        ];
        readonly createShipmentForBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly removeShipmentFromBasket: readonly [
            "organizationId",
            "basketId",
            "shipmentId",
            "siteId",
            "locale"
        ];
        readonly removeShipmentFromBasketRequired: readonly [
            "organizationId",
            "basketId",
            "shipmentId",
            "siteId"
        ];
        readonly updateShipmentForBasket: readonly [
            "organizationId",
            "basketId",
            "shipmentId",
            "siteId",
            "locale"
        ];
        readonly updateShipmentForBasketRequired: readonly [
            "organizationId",
            "basketId",
            "shipmentId",
            "siteId"
        ];
        readonly updateShippingAddressForShipment: readonly [
            "organizationId",
            "basketId",
            "shipmentId",
            "useAsBilling",
            "removeExternalTax",
            "siteId",
            "locale"
        ];
        readonly updateShippingAddressForShipmentRequired: readonly [
            "organizationId",
            "basketId",
            "shipmentId",
            "siteId"
        ];
        readonly updateShippingMethodForShipment: readonly [
            "organizationId",
            "basketId",
            "shipmentId",
            "siteId",
            "locale"
        ];
        readonly updateShippingMethodForShipmentRequired: readonly [
            "organizationId",
            "basketId",
            "shipmentId",
            "siteId"
        ];
        readonly getShippingMethodsForShipment: readonly [
            "organizationId",
            "basketId",
            "shipmentId",
            "siteId",
            "locale"
        ];
        readonly getShippingMethodsForShipmentRequired: readonly [
            "organizationId",
            "basketId",
            "shipmentId",
            "siteId"
        ];
        readonly updateAsStorefrontBasket: readonly [
            "organizationId",
            "basketId",
            "exchange",
            "siteId",
            "locale"
        ];
        readonly updateAsStorefrontBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly getTaxesFromBasket: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly getTaxesFromBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly addTaxesForBasket: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
        readonly addTaxesForBasketRequired: readonly [
            "organizationId",
            "basketId",
            "siteId"
        ];
    };
    /**
     * Creates a new basket.
     
     The created basket is initialized with default values. Optional JSON data provided in the request body is populated into the created basket. It can be updated with other endpoints offered by the Shopper Baskets API.
     
     Each customer can have just one open basket. When a basket is created, it is said to be open. It remains open until either an order is created from it or it is deleted.
     *
     * If you would like to get a raw Response object use the other createBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param taxMode - Determines how taxes are calculated.
     
     The default value is `internal` where the tax calculation is done automatically based on internal tax tables. Setting `taxMode` to `external` allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate by default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited. Depending on the type, the tax rate is either obtained from the related line item or computed as a prorate of the basket.
     * @param temporary - If set to true, the basket created is a temporary basket.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    createBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            taxMode?: string;
            temporary?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket;
    }>): Promise<Basket>;
    /**
     * Creates a new basket.
     
     The created basket is initialized with default values. Optional JSON data provided in the request body is populated into the created basket. It can be updated with other endpoints offered by the Shopper Baskets API.
     
     Each customer can have just one open basket. When a basket is created, it is said to be open. It remains open until either an order is created from it or it is deleted.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param taxMode - Determines how taxes are calculated.
     
     The default value is `internal` where the tax calculation is done automatically based on internal tax tables. Setting `taxMode` to `external` allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate by default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited. Depending on the type, the tax rate is either obtained from the related line item or computed as a prorate of the basket.
     * @param temporary - If set to true, the basket created is a temporary basket.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    createBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            taxMode?: string;
            temporary?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Transfer the previous shopper's basket to the current shopper by updating the basket's owner. No other values change. You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token.
     
     A success response contains the transferred basket.
     
     If the current shopper has an active basket, and the `overrideExisting` request parameter is `false`, then the transfer request returns a BasketTransferException (HTTP status 409). You can proceed with one of these options:
     - Keep the current shopper's active basket.
     - Merge the previous and current shoppers' baskets by calling the `baskets/merge` endpoint.
     - Force the transfer by calling the `baskets/transfer` endpoint again, with the parameter `overrideExisting=true`. Forcing the transfer deletes the current shopper's active basket.
     *
     * If you would like to get a raw Response object use the other transferBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param overrideExisting - If the current shopper has no active basket, this parameter is ignored. If the current shopper has an active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketTransferException (HTTP status 409). The basket owner doesn't change.
     - `true`: Force the transfer by deleting the current shopper's active basket and making the current shopper the owner of the previous shopper's basket. Returns the transferred basket (HTTP status 200).
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    transferBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            overrideExisting?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Transfer the previous shopper's basket to the current shopper by updating the basket's owner. No other values change. You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token.
     
     A success response contains the transferred basket.
     
     If the current shopper has an active basket, and the `overrideExisting` request parameter is `false`, then the transfer request returns a BasketTransferException (HTTP status 409). You can proceed with one of these options:
     - Keep the current shopper's active basket.
     - Merge the previous and current shoppers' baskets by calling the `baskets/merge` endpoint.
     - Force the transfer by calling the `baskets/transfer` endpoint again, with the parameter `overrideExisting=true`. Forcing the transfer deletes the current shopper's active basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param overrideExisting - If the current shopper has no active basket, this parameter is ignored. If the current shopper has an active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketTransferException (HTTP status 409). The basket owner doesn't change.
     - `true`: Force the transfer by deleting the current shopper's active basket and making the current shopper the owner of the previous shopper's basket. Returns the transferred basket (HTTP status 200).
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    transferBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            overrideExisting?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Merge data from the previous shopper's basket into the current shopper's active basket and delete the previous shopper's basket. This endpoint doesn't merge Personally Identifiable Information (PII). You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token. After the merge, all basket amounts are recalculated and totaled, including lookups for prices, taxes, shipping, and promotions, unless hooks are enabled.
     
     The following information is merged:
     - custom attributes on the basket and on all copied records
     - product items
     - gift certificate items
     - coupon items
     - shipments
     - ad-hoc price adjustments
     
     To control the merging of products that exist in both baskets, use the `productItemMergeMode` parameter. By default, the higher of the two basket quantities is used for each product. Products in both baskets are considered to be the same when all of the following values match (if one product doesn't have a value, the other product is a match only if it also doesn't have that value):
     - shipment
     - productId
     - option values
     - wishlist reference
     - inventory list id
     - gift flag & message
     - ad-hoc price adjustments
     
     If any of the listed values don't match, then the item in the previous shopper's basket is copied to a new line item in the current shopper's basket. If the listed values all match, but the matching products have different values for any custom attribute, the merged line item keeps the custom attribute value from the current shopper's basket.
     
     A success response contains the current shopper's active basket. The previous guest shopper's active basket is deleted.
     
     If the current shopper doesn't have an active basket, and the createDestinationBasket request parameter is false, then the merge request returns a BasketMergeException (HTTP status 409). You can proceed with one of these options:
     - Transfer the previous shopper's active basket to the current logged-in shopper by calling the `baskets/transfer` endpoint.
     - Force the merge by calling the `baskets/merge` endpoint again, with the parameter `createDestinationBasket=true`. Forcing the merge creates a new basket for the current shopper and copies information from the previous shopper's basket into it. Because the merge doesn't copy all basket data, a forced merge is not the same as a transfer. For example, the new basket doesn't contain any Personally Identifiable Information (PII) from the previous basket.
     
     ### before merge
     | Previous Shopper's Basket, SKU: Quantity, Custom Attributes | Current Shopper's Basket, SKU: Quantity, Custom Attributes  |
     |-------------------------------------------------------------|-------------------------------------------------------------|
     | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> c_customAttr_1: 'ABC' \<br\> c_customAttr_2: 'DEF'   | SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_3: 'XYZ'   |
     
     ### after merge - (previous shopper's basket is deleted)
     | productItemMergeMode | Current Shopper's Basket - SKU: Quantity, Custom Attributes  |
     |----------------------|--------------------------------------------------------------|
     | sum_quantities         | SKU_A: 7\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | higher_quantity      | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | saved_quantity       | SKU_A: 2\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | separate_item        | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ' |
     *
     * If you would like to get a raw Response object use the other mergeBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param createDestinationBasket - If the current shopper has an active basket, this parameter is ignored. If the current shopper has no active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketMergeException (HTTP status 409).
     - `true`: Force the merge by creating a basket for the current shopper and copying information from the previous shopper's basket into it. Return success (HTTP status 200).
     * @param productItemMergeMode - This parameter controls the quantity calculation for products that exist in both baskets.
     - higher_quantity (default): Compare the product's quantities in each basket, and use the higher value.
     - sum_quantities: Use the sum of the product's quantities from both baskets.
     - saved_quantity: Use the product's quantity in the current shopper's active basket. Ignore the quantity from the previous shopper's basket.
     - separate_item: Add a separate product item to the current shopper's basket for the quantity in the previous shopper's basket.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    mergeBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            createDestinationBasket?: boolean;
            productItemMergeMode?: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Merge data from the previous shopper's basket into the current shopper's active basket and delete the previous shopper's basket. This endpoint doesn't merge Personally Identifiable Information (PII). You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token. After the merge, all basket amounts are recalculated and totaled, including lookups for prices, taxes, shipping, and promotions, unless hooks are enabled.
     
     The following information is merged:
     - custom attributes on the basket and on all copied records
     - product items
     - gift certificate items
     - coupon items
     - shipments
     - ad-hoc price adjustments
     
     To control the merging of products that exist in both baskets, use the `productItemMergeMode` parameter. By default, the higher of the two basket quantities is used for each product. Products in both baskets are considered to be the same when all of the following values match (if one product doesn't have a value, the other product is a match only if it also doesn't have that value):
     - shipment
     - productId
     - option values
     - wishlist reference
     - inventory list id
     - gift flag & message
     - ad-hoc price adjustments
     
     If any of the listed values don't match, then the item in the previous shopper's basket is copied to a new line item in the current shopper's basket. If the listed values all match, but the matching products have different values for any custom attribute, the merged line item keeps the custom attribute value from the current shopper's basket.
     
     A success response contains the current shopper's active basket. The previous guest shopper's active basket is deleted.
     
     If the current shopper doesn't have an active basket, and the createDestinationBasket request parameter is false, then the merge request returns a BasketMergeException (HTTP status 409). You can proceed with one of these options:
     - Transfer the previous shopper's active basket to the current logged-in shopper by calling the `baskets/transfer` endpoint.
     - Force the merge by calling the `baskets/merge` endpoint again, with the parameter `createDestinationBasket=true`. Forcing the merge creates a new basket for the current shopper and copies information from the previous shopper's basket into it. Because the merge doesn't copy all basket data, a forced merge is not the same as a transfer. For example, the new basket doesn't contain any Personally Identifiable Information (PII) from the previous basket.
     
     ### before merge
     | Previous Shopper's Basket, SKU: Quantity, Custom Attributes | Current Shopper's Basket, SKU: Quantity, Custom Attributes  |
     |-------------------------------------------------------------|-------------------------------------------------------------|
     | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> c_customAttr_1: 'ABC' \<br\> c_customAttr_2: 'DEF'   | SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_3: 'XYZ'   |
     
     ### after merge - (previous shopper's basket is deleted)
     | productItemMergeMode | Current Shopper's Basket - SKU: Quantity, Custom Attributes  |
     |----------------------|--------------------------------------------------------------|
     | sum_quantities         | SKU_A: 7\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | higher_quantity      | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | saved_quantity       | SKU_A: 2\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | separate_item        | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ' |
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param createDestinationBasket - If the current shopper has an active basket, this parameter is ignored. If the current shopper has no active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketMergeException (HTTP status 409).
     - `true`: Force the merge by creating a basket for the current shopper and copying information from the previous shopper's basket into it. Return success (HTTP status 200).
     * @param productItemMergeMode - This parameter controls the quantity calculation for products that exist in both baskets.
     - higher_quantity (default): Compare the product's quantities in each basket, and use the higher value.
     - sum_quantities: Use the sum of the product's quantities from both baskets.
     - saved_quantity: Use the product's quantity in the current shopper's active basket. Ignore the quantity from the previous shopper's basket.
     - separate_item: Add a separate product item to the current shopper's basket for the quantity in the previous shopper's basket.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    mergeBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            createDestinationBasket?: boolean;
            productItemMergeMode?: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Removes a basket.
     *
     * If you would like to get a raw Response object use the other deleteBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    deleteBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Removes a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    deleteBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Gets a basket.
     *
     * If you would like to get a raw Response object use the other getBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    getBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Gets a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    getBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates a basket. Only the currency of the basket, source code, the custom
     properties of the basket, and the shipping items will be considered.
     *
     * If you would like to get a raw Response object use the other updateBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the `currency` triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket;
    }>): Promise<Basket>;
    /**
     * Updates a basket. Only the currency of the basket, source code, the custom
     properties of the basket, and the shipping items will be considered.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the `currency` triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Marks a basket as an agent basket.
     *
     * If you would like to get a raw Response object use the other updateAsAgentBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    updateAsAgentBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Marks a basket as an agent basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateAsAgentBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Sets the billing address of a basket.
     *
     * If you would like to get a raw Response object use the other updateBillingAddressForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param useAsShipping -
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the billing/shipping address triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateBillingAddressForBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            useAsShipping?: boolean;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderAddress;
    }>): Promise<Basket>;
    /**
     * Sets the billing address of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param useAsShipping -
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the billing/shipping address triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateBillingAddressForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            useAsShipping?: boolean;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderAddress;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Adds a coupon to an existing basket.
     *
     * If you would like to get a raw Response object use the other addCouponToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    addCouponToBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CouponItem;
    }>): Promise<Basket>;
    /**
     * Adds a coupon to an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    addCouponToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CouponItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Removes a coupon from the basket.
     *
     * If you would like to get a raw Response object use the other removeCouponFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param couponItemId - The ID of the coupon item to be removed.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    removeCouponFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            couponItemId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Removes a coupon from the basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param couponItemId - The ID of the coupon item to be removed.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    removeCouponFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            couponItemId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Sets customer information for an existing basket.
     *
     * If you would like to get a raw Response object use the other updateCustomerForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateCustomerForBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerInfo;
    }>): Promise<Basket>;
    /**
     * Sets customer information for an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateCustomerForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerInfo;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Adds a gift certificate item to an existing basket.
     *
     * If you would like to get a raw Response object use the other addGiftCertificateItemToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    addGiftCertificateItemToBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateItem;
    }>): Promise<Basket>;
    /**
     * Adds a gift certificate item to an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    addGiftCertificateItemToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Deletes a gift certificate item from an existing basket.
     *
     * If you would like to get a raw Response object use the other removeGiftCertificateItemFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    removeGiftCertificateItemFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            giftCertificateItemId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Deletes a gift certificate item from an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    removeGiftCertificateItemFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            giftCertificateItemId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates a gift certificate item of an existing basket.
     *
     * If you would like to get a raw Response object use the other updateGiftCertificateItemInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateGiftCertificateItemInBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            giftCertificateItemId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateItem;
    }>): Promise<Basket>;
    /**
     * Updates a gift certificate item of an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateGiftCertificateItemInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            giftCertificateItemId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Adds new items to a basket. The added items are associated with the
     specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
     Considered values from the request body, for each item are:
     
     - productId: a valid product ID. This is the ID of the product to be added to the basket. If the
     product is already in the basket, the API either increments the quantity of the existing product line item or
     creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
     product bundles containing variation masters, the API creates a new product line item regardless of the site
     preference.
     - shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item
     is created.
     - quantity: a number between 0.01 and 999. This is the quantity of the product to order.
     - inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is
     allocated.
     - bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the
     bonus discount line item for which the added product is a selected bonus product.
     - optionItems/optionValueId: a valid option value ID. This is an option value for an option item of
     an option product.  This is only possible if the product item is an option
     product. To set option values, you must specify a collection of option items in the optionItems
     property. These option items must contain optionId and optionValueId. Also,
     the values you specify must be valid for the option product that this product item represents. Otherwise, the
     server throws an InvalidProductOptionItemException or an
     InvalidProductOptionValueItemException.
     - custom properties in the form c_\<CUSTOM_NAME\>: the custom property must correspond to a custom
     attribute (\<CUSTOM_NAME\>) defined for ProductLineItem. The value of this property must be valid for the
     type of custom attribute defined for ProductLineItem.
     *
     * If you would like to get a raw Response object use the other addItemToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    addItemToBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Array<ProductItem>;
    }>): Promise<Basket>;
    /**
     * Adds new items to a basket. The added items are associated with the
     specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
     Considered values from the request body, for each item are:
     
     - productId: a valid product ID. This is the ID of the product to be added to the basket. If the
     product is already in the basket, the API either increments the quantity of the existing product line item or
     creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
     product bundles containing variation masters, the API creates a new product line item regardless of the site
     preference.
     - shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item
     is created.
     - quantity: a number between 0.01 and 999. This is the quantity of the product to order.
     - inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is
     allocated.
     - bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the
     bonus discount line item for which the added product is a selected bonus product.
     - optionItems/optionValueId: a valid option value ID. This is an option value for an option item of
     an option product.  This is only possible if the product item is an option
     product. To set option values, you must specify a collection of option items in the optionItems
     property. These option items must contain optionId and optionValueId. Also,
     the values you specify must be valid for the option product that this product item represents. Otherwise, the
     server throws an InvalidProductOptionItemException or an
     InvalidProductOptionValueItemException.
     - custom properties in the form c_\<CUSTOM_NAME\>: the custom property must correspond to a custom
     attribute (\<CUSTOM_NAME\>) defined for ProductLineItem. The value of this property must be valid for the
     type of custom attribute defined for ProductLineItem.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    addItemToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Array<ProductItem>;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates multiple items in a basket. This behaviour matches that of updating a
     single item, but the body contains an array of ProductItems to be updated that are identified by `itemId`.
     The items to update can include bundled product items, although the
     kind of update supported for bundled product items is limited to `productId`, `gift`, `giftMessage`
     and custom properties.
     The following values in the request body are considered by the server:
     
     - `itemId` (mandatory): identifies an item to be updated.
     - `productId`: a valid product ID. The purpose of this
     value is to change the variation of a variation product.
     - `shipmentId`: a valid shipment ID. The purpose of
     this value is to move a product item to another shipment.
     - `quantity`: a number between 0 and 999. The purpose of
     this value is to change the quantity of the product item. If the quantity is 0,
     the product item is removed.
     - `optionItems`/`optionValueId`: a valid option value
     ID. The purpose of this value is to exchange an option value for an
     option item of an option product.
     This is only possible if the product item is an option product. To change
     option values, a collection of the option items to be changed must be
     provided in the property `optionItems`. Those
     `optionItems` must contain `optionId`
     and `optionValueId`. The provided values must be valid
     for the option product that this product item represents. Otherwise,
     `InvalidProductOptionItemException` or
     `InvalidProductOptionValueItemException` is thrown.
     - custom properties `c_\<CUSTOM_NAME\>`: a
     value corresponding to the type defined for custom attribute
     `\<CUSTOM_NAME\>` of the ProductLineItem. The purpose of this value is to
     add or change the value of a custom attribute defined for the
     ProductLineItem.
     - `gift`: a boolean value that specifies whether the item is a gift.
     - `giftMessage`: a message to include with the gift.
     *
     * If you would like to get a raw Response object use the other updateItemsInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the product line item quantity triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateItemsInBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Array<ProductItem>;
    }>): Promise<Basket>;
    /**
     * Updates multiple items in a basket. This behaviour matches that of updating a
     single item, but the body contains an array of ProductItems to be updated that are identified by `itemId`.
     The items to update can include bundled product items, although the
     kind of update supported for bundled product items is limited to `productId`, `gift`, `giftMessage`
     and custom properties.
     The following values in the request body are considered by the server:
     
     - `itemId` (mandatory): identifies an item to be updated.
     - `productId`: a valid product ID. The purpose of this
     value is to change the variation of a variation product.
     - `shipmentId`: a valid shipment ID. The purpose of
     this value is to move a product item to another shipment.
     - `quantity`: a number between 0 and 999. The purpose of
     this value is to change the quantity of the product item. If the quantity is 0,
     the product item is removed.
     - `optionItems`/`optionValueId`: a valid option value
     ID. The purpose of this value is to exchange an option value for an
     option item of an option product.
     This is only possible if the product item is an option product. To change
     option values, a collection of the option items to be changed must be
     provided in the property `optionItems`. Those
     `optionItems` must contain `optionId`
     and `optionValueId`. The provided values must be valid
     for the option product that this product item represents. Otherwise,
     `InvalidProductOptionItemException` or
     `InvalidProductOptionValueItemException` is thrown.
     - custom properties `c_\<CUSTOM_NAME\>`: a
     value corresponding to the type defined for custom attribute
     `\<CUSTOM_NAME\>` of the ProductLineItem. The purpose of this value is to
     add or change the value of a custom attribute defined for the
     ProductLineItem.
     - `gift`: a boolean value that specifies whether the item is a gift.
     - `giftMessage`: a message to include with the gift.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the product line item quantity triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateItemsInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Array<ProductItem>;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Removes a product item from the basket.
     *
     * If you would like to get a raw Response object use the other removeItemFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    removeItemFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Removes a product item from the basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    removeItemFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates an item in a basket. The item to be updated can be a bundled product item, although the
     kind of update supported for bundled product items is limited to `productId` (to support
     variation products), `gift`, `giftMessage` and custom properties.
     The following values in the request body are considered by the server:
     
     - `productId`: a valid product ID. The purpose of this
     value is to exchange a variation of a variation product.
     - `shipmentId`: a valid shipment ID. The purpose of
     this value is to move a product item to another shipment.
     - `quantity`: a number between 0 and 999. The purpose of
     this value is to change quantity of the product item. If quantity is 0,
     the product item is removed.
     - `optionItems`/`optionValueId`: a valid option value
     ID. The purpose of this value is to exchange an option value for an
     option item of an option product.
     This is only possible if the product item is an option product. To change
     option values a collection of option items to be changed need to be
     provided in property optionItems. Those
     optionItems need to contain optionId
     and `optionValueId`. The provided values must be valid
     for the option product that this product item represents. Otherwise,
     `InvalidProductOptionItemException` or
     `InvalidProductOptionValueItemException` is thrown.
     - custom properties `c_\<CUSTOM_NAME\>`: a
     value corresponding to the type defined for custom attribute
     `\<CUSTOM_NAME\>` of ProductLineItem. The purpose of this value is to
     add or change the value of a custom attribute defined for
     ProductLineItem.
     - `gift`: a boolean value that specifies whether the item is a gift
     - `giftMessage`: a message for the gift
     *
     * If you would like to get a raw Response object use the other updateItemInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the product line item quantity triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateItemInBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ProductItem;
    }>): Promise<Basket>;
    /**
     * Updates an item in a basket. The item to be updated can be a bundled product item, although the
     kind of update supported for bundled product items is limited to `productId` (to support
     variation products), `gift`, `giftMessage` and custom properties.
     The following values in the request body are considered by the server:
     
     - `productId`: a valid product ID. The purpose of this
     value is to exchange a variation of a variation product.
     - `shipmentId`: a valid shipment ID. The purpose of
     this value is to move a product item to another shipment.
     - `quantity`: a number between 0 and 999. The purpose of
     this value is to change quantity of the product item. If quantity is 0,
     the product item is removed.
     - `optionItems`/`optionValueId`: a valid option value
     ID. The purpose of this value is to exchange an option value for an
     option item of an option product.
     This is only possible if the product item is an option product. To change
     option values a collection of option items to be changed need to be
     provided in property optionItems. Those
     optionItems need to contain optionId
     and `optionValueId`. The provided values must be valid
     for the option product that this product item represents. Otherwise,
     `InvalidProductOptionItemException` or
     `InvalidProductOptionValueItemException` is thrown.
     - custom properties `c_\<CUSTOM_NAME\>`: a
     value corresponding to the type defined for custom attribute
     `\<CUSTOM_NAME\>` of ProductLineItem. The purpose of this value is to
     add or change the value of a custom attribute defined for
     ProductLineItem.
     - `gift`: a boolean value that specifies whether the item is a gift
     - `giftMessage`: a message for the gift
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the product line item quantity triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateItemInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ProductItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * If you would like to get a raw Response object use the other addTaxesForBasketItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    addTaxesForBasketItem(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TaxItems;
    }>): Promise<void>;
    /**
     * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    addTaxesForBasketItem<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TaxItems;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Adds a payment instrument to a basket.
     *
     * If you would like to get a raw Response object use the other addPaymentInstrumentToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    addPaymentInstrumentToBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: BasketPaymentInstrumentRequest;
    }>): Promise<Basket>;
    /**
     * Adds a payment instrument to a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    addPaymentInstrumentToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: BasketPaymentInstrumentRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Removes a payment instrument of a basket.
     *
     * If you would like to get a raw Response object use the other removePaymentInstrumentFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    removePaymentInstrumentFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            paymentInstrumentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Removes a payment instrument of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    removePaymentInstrumentFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            paymentInstrumentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates payment instrument of an existing basket.
     *
     * If you would like to get a raw Response object use the other updatePaymentInstrumentInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the payment instrument triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updatePaymentInstrumentInBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            paymentInstrumentId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrument;
    }>): Promise<Basket>;
    /**
     * Updates payment instrument of an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the payment instrument triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updatePaymentInstrumentInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            paymentInstrumentId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrument;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Gets applicable payment methods for an existing basket considering the open payment amount only.
     *
     * If you would like to get a raw Response object use the other getPaymentMethodsForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PaymentMethodResult.
     *
     */
    getPaymentMethodsForBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PaymentMethodResult>;
    /**
     * Gets applicable payment methods for an existing basket considering the open payment amount only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.
     *
     */
    getPaymentMethodsForBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PaymentMethodResult>;
    /**
     * Adds a custom manual price adjustment to the basket.
     *
     * If you would like to get a raw Response object use the other addPriceAdjustmentToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    addPriceAdjustmentToBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PriceAdjustmentRequest;
    }>): Promise<Basket>;
    /**
     * Adds a custom manual price adjustment to the basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    addPriceAdjustmentToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PriceAdjustmentRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Removes a custom manual price adjustment from the basket.
     *
     * If you would like to get a raw Response object use the other removePriceAdjustmentFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param priceAdjustmentId -
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    removePriceAdjustmentFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            priceAdjustmentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Removes a custom manual price adjustment from the basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param priceAdjustmentId -
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    removePriceAdjustmentFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            priceAdjustmentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates a custom manual price adjustment on the basket. Only the following path values are considered for the update; all other attributes are ignored.
     - `discount`
     - `itemText`
     - `reasonCode`
     - `custom properties`
     The discount `type` of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an adjustment of type `percentage`, the `percentage` attribute is mandatory. For adjustments of type `amount` and `fixed_price`, the `amount` attribute is mandatory.
     *
     * If you would like to get a raw Response object use the other updatePriceAdjustmentInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param priceAdjustmentId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updatePriceAdjustmentInBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            priceAdjustmentId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PriceAdjustment;
    }>): Promise<Basket>;
    /**
     * Updates a custom manual price adjustment on the basket. Only the following path values are considered for the update; all other attributes are ignored.
     - `discount`
     - `itemText`
     - `reasonCode`
     - `custom properties`
     The discount `type` of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an adjustment of type `percentage`, the `percentage` attribute is mandatory. For adjustments of type `amount` and `fixed_price`, the `amount` attribute is mandatory.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param priceAdjustmentId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updatePriceAdjustmentInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            priceAdjustmentId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PriceAdjustment;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * ( DEPRECATED ) Gets applicable price books for an existing basket. This endpoint is deprecated. Use [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-context?meta=Summary), hooks or `dw.catalog.PriceBookMgr#getApplicablePriceBooks()` instead.
     *
     * If you would like to get a raw Response object use the other getPriceBooksForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PriceBookIds.
     *
     */
    getPriceBooksForBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PriceBookIds>;
    /**
     * ( DEPRECATED ) Gets applicable price books for an existing basket. This endpoint is deprecated. Use [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-context?meta=Summary), hooks or `dw.catalog.PriceBookMgr#getApplicablePriceBooks()` instead.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PriceBookIds otherwise.
     *
     */
    getPriceBooksForBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PriceBookIds>;
    /**
     * ( DEPRECATED ) This method allows you to put an array of priceBookIds to an existing basket, which will be used for basket calculation. This endpoint is deprecated.  Use [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-context?meta=Summary), hooks or `dw.catalog.PriceBookMgr#setApplicablePriceBooks()` instead.
     *
     * If you would like to get a raw Response object use the other addPriceBooksToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    addPriceBooksToBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PriceBookIds;
    }>): Promise<void>;
    /**
     * ( DEPRECATED ) This method allows you to put an array of priceBookIds to an existing basket, which will be used for basket calculation. This endpoint is deprecated.  Use [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-context?meta=Summary), hooks or `dw.catalog.PriceBookMgr#setApplicablePriceBooks()` instead.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    addPriceBooksToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PriceBookIds;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Creates a new shipment for a basket.
     
     The created shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * If you would like to get a raw Response object use the other createShipmentForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    createShipmentForBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Shipment;
    }>): Promise<Basket>;
    /**
     * Creates a new shipment for a basket.
     
     The created shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    createShipmentForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Shipment;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Removes a specified shipment and all associated product, gift certificate,
     shipping, and price adjustment line items from a basket.
     It is not allowed to remove the default shipment.
     *
     * If you would like to get a raw Response object use the other removeShipmentFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    removeShipmentFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Removes a specified shipment and all associated product, gift certificate,
     shipping, and price adjustment line items from a basket.
     It is not allowed to remove the default shipment.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    removeShipmentFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates a shipment for a basket.
     
     The shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * If you would like to get a raw Response object use the other updateShipmentForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateShipmentForBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Shipment;
    }>): Promise<Basket>;
    /**
     * Updates a shipment for a basket.
     
     The shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateShipmentForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Shipment;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Sets a shipping address of a specific shipment of a basket.
     *
     * If you would like to get a raw Response object use the other updateShippingAddressForShipment function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param useAsBilling -
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the shipping/billing address triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateShippingAddressForShipment(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            useAsBilling?: boolean;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderAddress;
    }>): Promise<Basket>;
    /**
     * Sets a shipping address of a specific shipment of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param useAsBilling -
     * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the shipping/billing address triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateShippingAddressForShipment<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            useAsBilling?: boolean;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderAddress;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Sets a shipping method to a specific shipment of a basket.
     *
     * If you would like to get a raw Response object use the other updateShippingMethodForShipment function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateShippingMethodForShipment(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShippingMethod;
    }>): Promise<Basket>;
    /**
     * Sets a shipping method to a specific shipment of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateShippingMethodForShipment<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShippingMethod;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Gets the applicable shipping methods for a certain shipment of a basket.
     *
     * If you would like to get a raw Response object use the other getShippingMethodsForShipment function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type ShippingMethodResult.
     *
     */
    getShippingMethodsForShipment(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<ShippingMethodResult>;
    /**
     * Gets the applicable shipping methods for a certain shipment of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ShippingMethodResult otherwise.
     *
     */
    getShippingMethodsForShipment<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : ShippingMethodResult>;
    /**
     * Marks a basket as a storefront basket.
     *
     * If you would like to get a raw Response object use the other updateAsStorefrontBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param exchange - If true, an existing storefront basket is exchanged and marked as an agent basket. If false, a `CustomerBasketsQuotaExceededException` is thrown.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    updateAsStorefrontBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            exchange?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Marks a basket as a storefront basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param exchange - If true, an existing storefront basket is exchanged and marked as an agent basket. If false, a `CustomerBasketsQuotaExceededException` is thrown.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateAsStorefrontBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            exchange?: boolean;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * If you would like to get a raw Response object use the other getTaxesFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Taxes.
     *
     */
    getTaxesFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Taxes>;
    /**
     * This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.
     *
     */
    getTaxesFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Taxes>;
    /**
     * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * If you would like to get a raw Response object use the other addTaxesForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    addTaxesForBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Taxes;
    }>): Promise<void>;
    /**
     * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    addTaxesForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Taxes;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
}
declare namespace ShopperBasketsTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter;
        query: Query;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        field: string;
        from?: any;
        fromInclusive?: boolean;
        to?: any;
        toInclusive?: boolean;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    type TaxItems = {
        taxItems?: Array<TaxItem>;
    } & {
        [key: string]: any;
    };
    type PaymentCardSpec = {
        cardType?: string;
        checksumVerificationEnabled?: boolean;
        description?: string;
        image?: string;
        name?: string;
        numberLengths?: Array<string>;
        numberPrefixes?: Array<string>;
        securityCodeLength?: number;
    } & {
        [key: string]: any;
    };
    type OrderAddress = {
        address1?: string;
        address2?: string;
        city?: string;
        companyName?: string;
        countryCode?: string;
        firstName?: string;
        fullName?: string;
        id?: string;
        jobTitle?: string;
        lastName?: string;
        phone?: string;
        postBox?: string;
        postalCode?: string;
        salutation?: string;
        secondName?: string;
        stateCode?: string;
        suffix?: string;
        suite?: string;
        title?: string;
    } & {
        [key: string]: any;
    };
    type PriceAdjustmentRequest = {
        discount?: DiscountRequest;
        itemId?: string;
        itemText?: string;
        level: string;
        promotionId?: string;
        reasonCode?: string;
    } & {
        [key: string]: any;
    };
    type PaymentCard = {
        cardType?: string;
        creditCardExpired?: boolean;
        creditCardToken?: string;
        expirationMonth?: number;
        expirationYear?: number;
        holder?: string;
        issueNumber?: string;
        maskedNumber?: string;
        numberLastDigits?: string;
        validFromMonth?: number;
        validFromYear?: number;
    };
    type NotesResult = {
        notes?: Array<Note>;
    } & {
        [key: string]: any;
    };
    type ShippingItem = {
        adjustedTax?: number;
        basePrice?: number;
        itemId?: string;
        itemText?: string;
        price?: number;
        priceAdjustments?: Array<PriceAdjustment>;
        priceAfterItemDiscount?: number;
        shipmentId?: string;
        tax?: number;
        taxBasis?: number;
        taxClassId?: string;
        taxRate?: number;
    } & {
        [key: string]: any;
    };
    type Discount = {
        amount?: number;
        percentage?: number;
        priceBookId?: string;
        type: string;
    } & {
        [key: string]: any;
    };
    type Note = {
        createdBy?: string;
        creationDate?: any;
        id?: string;
        subject?: string;
        text?: string;
    };
    type CouponItem = {
        code: string;
        couponItemId?: string;
        statusCode?: string;
        valid?: boolean;
    } & {
        [key: string]: any;
    };
    type PromotionLink = {
        calloutMsg?: string;
        name?: string;
        promotionId?: string;
        title?: string;
    };
    type PriceBookIds = Array<string>;
    type ShippingPromotion = {
        calloutMsg?: string;
        promotionId?: string;
        promotionName?: string;
    } & {
        [key: string]: any;
    };
    type ProductItem = {
        adjustedTax?: number;
        basePrice?: number;
        bonusDiscountLineItemId?: string;
        bonusProductLineItem?: boolean;
        bundledProductItems?: Array<ProductItem>;
        gift?: boolean;
        giftMessage?: string;
        inventoryId?: string;
        itemId?: string;
        itemText?: string;
        optionItems?: Array<OptionItem>;
        price?: number;
        priceAdjustments?: Array<PriceAdjustment>;
        priceAfterItemDiscount?: number;
        priceAfterOrderDiscount?: number;
        productId?: string;
        productListItem?: ProductListItemReference;
        productName?: string;
        quantity?: number;
        shipmentId?: string;
        shippingItemId?: string;
        tax?: number;
        taxBasis?: number;
        taxClassId?: string;
        taxRate?: number;
    } & {
        [key: string]: any;
    };
    type BasketPaymentInstrumentRequest = {
        amount?: number;
        bankRoutingNumber?: string;
        giftCertificateCode?: string;
        paymentCard?: OrderPaymentCardRequest;
        paymentMethodId?: string;
    } & {
        [key: string]: any;
    };
    type Taxes = {
        taxes: {} & {
            [key: string]: any;
        };
    };
    type OrderPaymentInstrument = {
        amount?: number;
        authorizationStatus?: Status;
        bankRoutingNumber?: string;
        maskedGiftCertificateCode?: string;
        paymentCard?: PaymentCard;
        paymentInstrumentId?: string;
        paymentMethodId?: string;
    } & {
        [key: string]: any;
    };
    type BonusDiscountLineItem = {
        bonusProducts?: Array<ProductDetailsLink>;
        couponCode?: string;
        id?: string;
        maxBonusItems?: number;
        promotionId?: string;
    } & {
        [key: string]: any;
    };
    type PaymentMethodResult = {
        applicablePaymentMethods?: Array<PaymentMethod>;
    } & {
        [key: string]: any;
    };
    type Shipment = {
        adjustedMerchandizeTotalTax?: number;
        adjustedShippingTotalTax?: number;
        gift?: boolean;
        giftMessage?: string;
        merchandizeTotalTax?: number;
        productSubTotal?: number;
        productTotal?: number;
        shipmentId?: string;
        shipmentNo?: string;
        shipmentTotal?: number;
        shippingAddress?: OrderAddress;
        shippingMethod?: ShippingMethod;
        shippingStatus?: string;
        shippingTotal?: number;
        shippingTotalTax?: number;
        taxTotal?: number;
        trackingNumber?: string;
    } & {
        [key: string]: any;
    };
    type CustomerInfo = {
        customerId?: string;
        customerName?: string;
        customerNo?: string;
        email: string;
    } & {
        [key: string]: any;
    };
    type SimpleLink = {};
    type PriceAdjustment = {
        appliedDiscount?: Discount;
        couponCode?: string;
        createdBy?: string;
        creationDate?: any;
        custom?: boolean;
        itemText?: string;
        lastModified?: any;
        manual?: boolean;
        price?: number;
        priceAdjustmentId?: string;
        promotionId?: string;
        promotionLink?: string;
        reasonCode?: string;
    } & {
        [key: string]: any;
    };
    type ShippingMethodResult = {
        applicableShippingMethods?: Array<ShippingMethod>;
        defaultShippingMethodId?: string;
    } & {
        [key: string]: any;
    };
    type ProductDetailsLink = {
        productDescription?: string;
        productId: string;
        productName?: string;
        title?: string;
    };
    type OptionItem = {
        adjustedTax?: number;
        basePrice?: number;
        bonusDiscountLineItemId?: string;
        bonusProductLineItem?: boolean;
        bundledProductItems?: Array<ProductItem>;
        gift?: boolean;
        giftMessage?: string;
        inventoryId?: string;
        itemId?: string;
        itemText?: string;
        optionId: string;
        optionItems?: Array<OptionItem>;
        optionValueId: string;
        price?: number;
        priceAdjustments?: Array<PriceAdjustment>;
        priceAfterItemDiscount?: number;
        priceAfterOrderDiscount?: number;
        productId?: string;
        productListItem?: ProductListItemReference;
        productName?: string;
        quantity?: number;
        shipmentId?: string;
        shippingItemId?: string;
        tax?: number;
        taxBasis?: number;
        taxClassId?: string;
        taxRate?: number;
    } & {
        [key: string]: any;
    };
    type ShippingMethod = {
        description?: string;
        externalShippingMethod?: string;
        id: string;
        name?: string;
        price?: number;
        shippingPromotions?: Array<ShippingPromotion>;
    } & {
        [key: string]: any;
    };
    type DiscountRequest = {
        type: string;
        value: number;
    };
    type Basket = {
        adjustedMerchandizeTotalTax?: number;
        adjustedShippingTotalTax?: number;
        agentBasket?: boolean;
        basketId?: string;
        billingAddress?: OrderAddress;
        bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
        channelType?: string;
        couponItems?: Array<CouponItem>;
        creationDate?: any;
        currency?: string;
        customerInfo?: CustomerInfo;
        giftCertificateItems?: Array<GiftCertificateItem>;
        groupedTaxItems?: Array<GroupedTaxItem>;
        inventoryReservationExpiry?: any;
        lastModified?: any;
        merchandizeTotalTax?: number;
        notes?: SimpleLink;
        orderPriceAdjustments?: Array<PriceAdjustment>;
        orderTotal?: number;
        paymentInstruments?: Array<OrderPaymentInstrument>;
        productItems?: Array<ProductItem>;
        productSubTotal?: number;
        productTotal?: number;
        shipments?: Array<Shipment>;
        shippingItems?: Array<ShippingItem>;
        shippingTotal?: number;
        shippingTotalTax?: number;
        sourceCode?: string;
        taxTotal?: number;
        taxation?: string;
        taxRoundedAtGroup?: boolean;
        temporaryBasket?: boolean;
    } & {
        [key: string]: any;
    };
    type OrderLookupRequest = {
        email: string;
        orderViewCode: string;
    };
    type OrderPaymentInstrumentRequest = {
        amount?: number;
        bankRoutingNumber?: string;
        giftCertificateCode?: string;
        paymentCard?: OrderPaymentCardRequest;
        paymentMethodId?: string;
    } & {
        [key: string]: any;
    };
    type GiftCertificateItem = {
        amount: number;
        giftCertificateItemId?: string;
        message?: string;
        recipientEmail: string;
        recipientName?: string;
        senderName?: string;
        shipmentId?: string;
    } & {
        [key: string]: any;
    };
    type ProductListLink = {
        description?: string;
        name?: string;
        public?: boolean;
        title?: string;
        type?: string;
    } & {
        [key: string]: any;
    };
    type GroupedTaxItem = {
        taxRate?: number;
        taxValue?: number;
    };
    type Order = {
        adjustedMerchandizeTotalTax?: number;
        adjustedShippingTotalTax?: number;
        billingAddress?: OrderAddress;
        bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
        channelType?: string;
        confirmationStatus?: string;
        couponItems?: Array<CouponItem>;
        createdBy?: string;
        creationDate?: any;
        currency?: string;
        customerInfo?: CustomerInfo;
        customerName?: string;
        exportStatus?: string;
        externalOrderStatus?: string;
        giftCertificateItems?: Array<GiftCertificateItem>;
        globalPartyId?: string;
        groupedTaxItems?: Array<GroupedTaxItem>;
        guest?: boolean;
        lastModified?: any;
        merchandizeTotalTax?: number;
        notes?: SimpleLink;
        orderNo?: string;
        orderPriceAdjustments?: Array<PriceAdjustment>;
        orderToken?: string;
        orderTotal?: number;
        orderViewCode?: string;
        paymentInstruments?: Array<OrderPaymentInstrument>;
        paymentStatus?: string;
        productItems?: Array<ProductItem>;
        productSubTotal?: number;
        productTotal?: number;
        shipments?: Array<Shipment>;
        shippingItems?: Array<ShippingItem>;
        shippingStatus?: string;
        shippingTotal?: number;
        shippingTotalTax?: number;
        siteId?: string;
        sourceCode?: string;
        status?: string;
        taxRoundedAtGroup?: boolean;
        taxTotal?: number;
        taxation?: string;
    } & {
        [key: string]: any;
    };
    type OrderPaymentCardRequest = {
        cardType?: string;
        creditCardToken?: string;
        expirationMonth?: number;
        expirationYear?: number;
        holder?: string;
        issueNumber?: string;
        maskedNumber?: string;
        validFromMonth?: number;
        validFromYear?: number;
    };
    type PaymentMethod = {
        cards?: Array<PaymentCardSpec>;
        description?: string;
        id: string;
        image?: string;
        name?: string;
        paymentProcessorId?: string;
    } & {
        [key: string]: any;
    };
    type TaxItem = {
        id: string;
        rate: number;
        value?: number;
    };
    type Status = {
        code?: string;
        message?: string;
        status?: number;
    };
    type ProductListItemReference = {
        id: string;
        priority?: number;
        productDetailsLink?: ProductDetailsLink;
        productList?: ProductListLink;
        public?: boolean;
        purchasedQuantity?: number;
        quantity?: number;
        type?: string;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    /**
     * All path parameters that are used by at least one ShopperBaskets method.
     */
    type ShopperBasketsPathParameters = {
        organizationId?: string;
        basketId?: string;
        couponItemId?: string;
        giftCertificateItemId?: string;
        itemId?: string;
        paymentInstrumentId?: string;
        priceAdjustmentId?: string;
        shipmentId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperBaskets method.
     */
    type ShopperBasketsQueryParameters = {
        taxMode?: string;
        temporary?: boolean;
        siteId?: string;
        locale?: string;
        overrideExisting?: boolean;
        createDestinationBasket?: boolean;
        productItemMergeMode?: string;
        removeExternalTax?: boolean;
        useAsShipping?: boolean;
        useAsBilling?: boolean;
        exchange?: boolean;
    };
    /**
     * All parameters that are used by ShopperBaskets.
     */
    type ShopperBasketsParameters = ShopperBasketsPathParameters & BaseUriParameters & ShopperBasketsQueryParameters;
    /**
     * [Shopper Baskets](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-baskets:Summary)
     * ==================================
     *
     * *Build a checkout experience.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperBaskets } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperBasketsClient = new ShopperBaskets(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 2.0.10<br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperBaskets<ConfigParameters extends ShopperBasketsParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-baskets/{version}";
        static readonly apiPaths: {
            createBasket: string;
            transferBasket: string;
            mergeBasket: string;
            deleteBasket: string;
            getBasket: string;
            updateBasket: string;
            updateAsAgentBasket: string;
            updateBillingAddressForBasket: string;
            addCouponToBasket: string;
            removeCouponFromBasket: string;
            updateCustomerForBasket: string;
            addGiftCertificateItemToBasket: string;
            removeGiftCertificateItemFromBasket: string;
            updateGiftCertificateItemInBasket: string;
            addItemToBasket: string;
            updateItemsInBasket: string;
            removeItemFromBasket: string;
            updateItemInBasket: string;
            addTaxesForBasketItem: string;
            addPaymentInstrumentToBasket: string;
            removePaymentInstrumentFromBasket: string;
            updatePaymentInstrumentInBasket: string;
            getPaymentMethodsForBasket: string;
            addPriceAdjustmentToBasket: string;
            removePriceAdjustmentFromBasket: string;
            updatePriceAdjustmentInBasket: string;
            getPriceBooksForBasket: string;
            addPriceBooksToBasket: string;
            createShipmentForBasket: string;
            removeShipmentFromBasket: string;
            updateShipmentForBasket: string;
            updateShippingAddressForShipment: string;
            updateShippingMethodForShipment: string;
            getShippingMethodsForShipment: string;
            updateAsStorefrontBasket: string;
            getTaxesFromBasket: string;
            addTaxesForBasket: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly createBasket: readonly [
                "organizationId",
                "taxMode",
                "temporary",
                "siteId",
                "locale"
            ];
            readonly createBasketRequired: readonly [
                "organizationId",
                "siteId"
            ];
            readonly transferBasket: readonly [
                "organizationId",
                "overrideExisting",
                "siteId",
                "locale"
            ];
            readonly transferBasketRequired: readonly [
                "organizationId",
                "siteId"
            ];
            readonly mergeBasket: readonly [
                "organizationId",
                "createDestinationBasket",
                "productItemMergeMode",
                "siteId",
                "locale"
            ];
            readonly mergeBasketRequired: readonly [
                "organizationId",
                "siteId"
            ];
            readonly deleteBasket: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly deleteBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly getBasket: readonly [
                "organizationId",
                "basketId",
                "siteId",
                "locale"
            ];
            readonly getBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly updateBasket: readonly [
                "organizationId",
                "basketId",
                "removeExternalTax",
                "siteId",
                "locale"
            ];
            readonly updateBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly updateAsAgentBasket: readonly [
                "organizationId",
                "basketId",
                "siteId",
                "locale"
            ];
            readonly updateAsAgentBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly updateBillingAddressForBasket: readonly [
                "organizationId",
                "basketId",
                "useAsShipping",
                "removeExternalTax",
                "siteId",
                "locale"
            ];
            readonly updateBillingAddressForBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly addCouponToBasket: readonly [
                "organizationId",
                "basketId",
                "siteId",
                "locale"
            ];
            readonly addCouponToBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly removeCouponFromBasket: readonly [
                "organizationId",
                "basketId",
                "couponItemId",
                "siteId",
                "locale"
            ];
            readonly removeCouponFromBasketRequired: readonly [
                "organizationId",
                "basketId",
                "couponItemId",
                "siteId"
            ];
            readonly updateCustomerForBasket: readonly [
                "organizationId",
                "basketId",
                "siteId",
                "locale"
            ];
            readonly updateCustomerForBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly addGiftCertificateItemToBasket: readonly [
                "organizationId",
                "basketId",
                "siteId",
                "locale"
            ];
            readonly addGiftCertificateItemToBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly removeGiftCertificateItemFromBasket: readonly [
                "organizationId",
                "basketId",
                "giftCertificateItemId",
                "siteId",
                "locale"
            ];
            readonly removeGiftCertificateItemFromBasketRequired: readonly [
                "organizationId",
                "basketId",
                "giftCertificateItemId",
                "siteId"
            ];
            readonly updateGiftCertificateItemInBasket: readonly [
                "organizationId",
                "basketId",
                "giftCertificateItemId",
                "siteId",
                "locale"
            ];
            readonly updateGiftCertificateItemInBasketRequired: readonly [
                "organizationId",
                "basketId",
                "giftCertificateItemId",
                "siteId"
            ];
            readonly addItemToBasket: readonly [
                "organizationId",
                "basketId",
                "siteId",
                "locale"
            ];
            readonly addItemToBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly updateItemsInBasket: readonly [
                "organizationId",
                "basketId",
                "removeExternalTax",
                "siteId",
                "locale"
            ];
            readonly updateItemsInBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly removeItemFromBasket: readonly [
                "organizationId",
                "basketId",
                "itemId",
                "siteId",
                "locale"
            ];
            readonly removeItemFromBasketRequired: readonly [
                "organizationId",
                "basketId",
                "itemId",
                "siteId"
            ];
            readonly updateItemInBasket: readonly [
                "organizationId",
                "basketId",
                "itemId",
                "removeExternalTax",
                "siteId",
                "locale"
            ];
            readonly updateItemInBasketRequired: readonly [
                "organizationId",
                "basketId",
                "itemId",
                "siteId"
            ];
            readonly addTaxesForBasketItem: readonly [
                "organizationId",
                "basketId",
                "itemId",
                "siteId"
            ];
            readonly addTaxesForBasketItemRequired: readonly [
                "organizationId",
                "basketId",
                "itemId",
                "siteId"
            ];
            readonly addPaymentInstrumentToBasket: readonly [
                "organizationId",
                "basketId",
                "siteId",
                "locale"
            ];
            readonly addPaymentInstrumentToBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly removePaymentInstrumentFromBasket: readonly [
                "organizationId",
                "basketId",
                "paymentInstrumentId",
                "siteId",
                "locale"
            ];
            readonly removePaymentInstrumentFromBasketRequired: readonly [
                "organizationId",
                "basketId",
                "paymentInstrumentId",
                "siteId"
            ];
            readonly updatePaymentInstrumentInBasket: readonly [
                "organizationId",
                "basketId",
                "paymentInstrumentId",
                "removeExternalTax",
                "siteId",
                "locale"
            ];
            readonly updatePaymentInstrumentInBasketRequired: readonly [
                "organizationId",
                "basketId",
                "paymentInstrumentId",
                "siteId"
            ];
            readonly getPaymentMethodsForBasket: readonly [
                "organizationId",
                "basketId",
                "siteId",
                "locale"
            ];
            readonly getPaymentMethodsForBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly addPriceAdjustmentToBasket: readonly [
                "organizationId",
                "basketId",
                "siteId",
                "locale"
            ];
            readonly addPriceAdjustmentToBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly removePriceAdjustmentFromBasket: readonly [
                "organizationId",
                "basketId",
                "priceAdjustmentId",
                "siteId",
                "locale"
            ];
            readonly removePriceAdjustmentFromBasketRequired: readonly [
                "organizationId",
                "basketId",
                "priceAdjustmentId",
                "siteId"
            ];
            readonly updatePriceAdjustmentInBasket: readonly [
                "organizationId",
                "basketId",
                "priceAdjustmentId",
                "siteId"
            ];
            readonly updatePriceAdjustmentInBasketRequired: readonly [
                "organizationId",
                "basketId",
                "priceAdjustmentId",
                "siteId"
            ];
            readonly getPriceBooksForBasket: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly getPriceBooksForBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly addPriceBooksToBasket: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly addPriceBooksToBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly createShipmentForBasket: readonly [
                "organizationId",
                "basketId",
                "siteId",
                "locale"
            ];
            readonly createShipmentForBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly removeShipmentFromBasket: readonly [
                "organizationId",
                "basketId",
                "shipmentId",
                "siteId",
                "locale"
            ];
            readonly removeShipmentFromBasketRequired: readonly [
                "organizationId",
                "basketId",
                "shipmentId",
                "siteId"
            ];
            readonly updateShipmentForBasket: readonly [
                "organizationId",
                "basketId",
                "shipmentId",
                "siteId",
                "locale"
            ];
            readonly updateShipmentForBasketRequired: readonly [
                "organizationId",
                "basketId",
                "shipmentId",
                "siteId"
            ];
            readonly updateShippingAddressForShipment: readonly [
                "organizationId",
                "basketId",
                "shipmentId",
                "useAsBilling",
                "removeExternalTax",
                "siteId",
                "locale"
            ];
            readonly updateShippingAddressForShipmentRequired: readonly [
                "organizationId",
                "basketId",
                "shipmentId",
                "siteId"
            ];
            readonly updateShippingMethodForShipment: readonly [
                "organizationId",
                "basketId",
                "shipmentId",
                "siteId",
                "locale"
            ];
            readonly updateShippingMethodForShipmentRequired: readonly [
                "organizationId",
                "basketId",
                "shipmentId",
                "siteId"
            ];
            readonly getShippingMethodsForShipment: readonly [
                "organizationId",
                "basketId",
                "shipmentId",
                "siteId",
                "locale"
            ];
            readonly getShippingMethodsForShipmentRequired: readonly [
                "organizationId",
                "basketId",
                "shipmentId",
                "siteId"
            ];
            readonly updateAsStorefrontBasket: readonly [
                "organizationId",
                "basketId",
                "exchange",
                "siteId",
                "locale"
            ];
            readonly updateAsStorefrontBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly getTaxesFromBasket: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly getTaxesFromBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly addTaxesForBasket: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
            readonly addTaxesForBasketRequired: readonly [
                "organizationId",
                "basketId",
                "siteId"
            ];
        };
        /**
         * Creates a new basket.
         
         The created basket is initialized with default values. Optional JSON data provided in the request body is populated into the created basket. It can be updated with other endpoints offered by the Shopper Baskets API.
         
         Each customer can have just one open basket. When a basket is created, it is said to be open. It remains open until either an order is created from it or it is deleted.
         *
         * If you would like to get a raw Response object use the other createBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param taxMode - Determines how taxes are calculated.
         
         The default value is `internal` where the tax calculation is done automatically based on internal tax tables. Setting `taxMode` to `external` allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate by default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited. Depending on the type, the tax rate is either obtained from the related line item or computed as a prorate of the basket.
         * @param temporary - If set to true, the basket created is a temporary basket.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        createBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                taxMode?: string;
                temporary?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Basket;
        }>): Promise<Basket>;
        /**
         * Creates a new basket.
         
         The created basket is initialized with default values. Optional JSON data provided in the request body is populated into the created basket. It can be updated with other endpoints offered by the Shopper Baskets API.
         
         Each customer can have just one open basket. When a basket is created, it is said to be open. It remains open until either an order is created from it or it is deleted.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param taxMode - Determines how taxes are calculated.
         
         The default value is `internal` where the tax calculation is done automatically based on internal tax tables. Setting `taxMode` to `external` allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate by default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited. Depending on the type, the tax rate is either obtained from the related line item or computed as a prorate of the basket.
         * @param temporary - If set to true, the basket created is a temporary basket.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        createBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                taxMode?: string;
                temporary?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Basket;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Transfer the previous shopper's basket to the current shopper by updating the basket's owner. No other values change. You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token.
         
         A success response contains the transferred basket.
         
         If the current shopper has an active basket, and the `overrideExisting` request parameter is `false`, then the transfer request returns a BasketTransferException (HTTP status 409). You can proceed with one of these options:
         - Keep the current shopper's active basket.
         - Merge the previous and current shoppers' baskets by calling the `baskets/merge` endpoint.
         - Force the transfer by calling the `baskets/transfer` endpoint again, with the parameter `overrideExisting=true`. Forcing the transfer deletes the current shopper's active basket.
         *
         * If you would like to get a raw Response object use the other transferBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param overrideExisting - If the current shopper has no active basket, this parameter is ignored. If the current shopper has an active basket, this parameter controls the behavior:
         - `false` (default): Return a BasketTransferException (HTTP status 409). The basket owner doesn't change.
         - `true`: Force the transfer by deleting the current shopper's active basket and making the current shopper the owner of the previous shopper's basket. Returns the transferred basket (HTTP status 200).
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
        transferBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                overrideExisting?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Basket>;
        /**
         * Transfer the previous shopper's basket to the current shopper by updating the basket's owner. No other values change. You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token.
         
         A success response contains the transferred basket.
         
         If the current shopper has an active basket, and the `overrideExisting` request parameter is `false`, then the transfer request returns a BasketTransferException (HTTP status 409). You can proceed with one of these options:
         - Keep the current shopper's active basket.
         - Merge the previous and current shoppers' baskets by calling the `baskets/merge` endpoint.
         - Force the transfer by calling the `baskets/transfer` endpoint again, with the parameter `overrideExisting=true`. Forcing the transfer deletes the current shopper's active basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param overrideExisting - If the current shopper has no active basket, this parameter is ignored. If the current shopper has an active basket, this parameter controls the behavior:
         - `false` (default): Return a BasketTransferException (HTTP status 409). The basket owner doesn't change.
         - `true`: Force the transfer by deleting the current shopper's active basket and making the current shopper the owner of the previous shopper's basket. Returns the transferred basket (HTTP status 200).
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        transferBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                overrideExisting?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Merge data from the previous shopper's basket into the current shopper's active basket and delete the previous shopper's basket. This endpoint doesn't merge Personally Identifiable Information (PII). You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token. After the merge, all basket amounts are recalculated and totaled, including lookups for prices, taxes, shipping, and promotions, unless hooks are enabled.
         
         The following information is merged:
         - custom attributes on the basket and on all copied records
         - product items
         - gift certificate items
         - coupon items
         - shipments
         - ad-hoc price adjustments
         
         To control the merging of products that exist in both baskets, use the `productItemMergeMode` parameter. By default, the higher of the two basket quantities is used for each product. Products in both baskets are considered to be the same when all of the following values match (if one product doesn't have a value, the other product is a match only if it also doesn't have that value):
         - shipment
         - productId
         - option values
         - wishlist reference
         - inventory list id
         - gift flag & message
         - ad-hoc price adjustments
         
         If any of the listed values don't match, then the item in the previous shopper's basket is copied to a new line item in the current shopper's basket. If the listed values all match, but the matching products have different values for any custom attribute, the merged line item keeps the custom attribute value from the current shopper's basket.
         
         A success response contains the current shopper's active basket. The previous guest shopper's active basket is deleted.
         
         If the current shopper doesn't have an active basket, and the createDestinationBasket request parameter is false, then the merge request returns a BasketMergeException (HTTP status 409). You can proceed with one of these options:
         - Transfer the previous shopper's active basket to the current logged-in shopper by calling the `baskets/transfer` endpoint.
         - Force the merge by calling the `baskets/merge` endpoint again, with the parameter `createDestinationBasket=true`. Forcing the merge creates a new basket for the current shopper and copies information from the previous shopper's basket into it. Because the merge doesn't copy all basket data, a forced merge is not the same as a transfer. For example, the new basket doesn't contain any Personally Identifiable Information (PII) from the previous basket.
         
         ### before merge
         | Previous Shopper's Basket, SKU: Quantity, Custom Attributes | Current Shopper's Basket, SKU: Quantity, Custom Attributes  |
         |-------------------------------------------------------------|-------------------------------------------------------------|
         | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> c_customAttr_1: 'ABC' \<br\> c_customAttr_2: 'DEF'   | SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_3: 'XYZ'   |
         
         ### after merge - (previous shopper's basket is deleted)
         | productItemMergeMode | Current Shopper's Basket - SKU: Quantity, Custom Attributes  |
         |----------------------|--------------------------------------------------------------|
         | sum_quantities         | SKU_A: 7\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | higher_quantity      | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | saved_quantity       | SKU_A: 2\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | separate_item        | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ' |
         *
         * If you would like to get a raw Response object use the other mergeBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param createDestinationBasket - If the current shopper has an active basket, this parameter is ignored. If the current shopper has no active basket, this parameter controls the behavior:
         - `false` (default): Return a BasketMergeException (HTTP status 409).
         - `true`: Force the merge by creating a basket for the current shopper and copying information from the previous shopper's basket into it. Return success (HTTP status 200).
         * @param productItemMergeMode - This parameter controls the quantity calculation for products that exist in both baskets.
         - higher_quantity (default): Compare the product's quantities in each basket, and use the higher value.
         - sum_quantities: Use the sum of the product's quantities from both baskets.
         - saved_quantity: Use the product's quantity in the current shopper's active basket. Ignore the quantity from the previous shopper's basket.
         - separate_item: Add a separate product item to the current shopper's basket for the quantity in the previous shopper's basket.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
        mergeBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                createDestinationBasket?: boolean;
                productItemMergeMode?: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Basket>;
        /**
         * Merge data from the previous shopper's basket into the current shopper's active basket and delete the previous shopper's basket. This endpoint doesn't merge Personally Identifiable Information (PII). You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token. After the merge, all basket amounts are recalculated and totaled, including lookups for prices, taxes, shipping, and promotions, unless hooks are enabled.
         
         The following information is merged:
         - custom attributes on the basket and on all copied records
         - product items
         - gift certificate items
         - coupon items
         - shipments
         - ad-hoc price adjustments
         
         To control the merging of products that exist in both baskets, use the `productItemMergeMode` parameter. By default, the higher of the two basket quantities is used for each product. Products in both baskets are considered to be the same when all of the following values match (if one product doesn't have a value, the other product is a match only if it also doesn't have that value):
         - shipment
         - productId
         - option values
         - wishlist reference
         - inventory list id
         - gift flag & message
         - ad-hoc price adjustments
         
         If any of the listed values don't match, then the item in the previous shopper's basket is copied to a new line item in the current shopper's basket. If the listed values all match, but the matching products have different values for any custom attribute, the merged line item keeps the custom attribute value from the current shopper's basket.
         
         A success response contains the current shopper's active basket. The previous guest shopper's active basket is deleted.
         
         If the current shopper doesn't have an active basket, and the createDestinationBasket request parameter is false, then the merge request returns a BasketMergeException (HTTP status 409). You can proceed with one of these options:
         - Transfer the previous shopper's active basket to the current logged-in shopper by calling the `baskets/transfer` endpoint.
         - Force the merge by calling the `baskets/merge` endpoint again, with the parameter `createDestinationBasket=true`. Forcing the merge creates a new basket for the current shopper and copies information from the previous shopper's basket into it. Because the merge doesn't copy all basket data, a forced merge is not the same as a transfer. For example, the new basket doesn't contain any Personally Identifiable Information (PII) from the previous basket.
         
         ### before merge
         | Previous Shopper's Basket, SKU: Quantity, Custom Attributes | Current Shopper's Basket, SKU: Quantity, Custom Attributes  |
         |-------------------------------------------------------------|-------------------------------------------------------------|
         | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> c_customAttr_1: 'ABC' \<br\> c_customAttr_2: 'DEF'   | SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_3: 'XYZ'   |
         
         ### after merge - (previous shopper's basket is deleted)
         | productItemMergeMode | Current Shopper's Basket - SKU: Quantity, Custom Attributes  |
         |----------------------|--------------------------------------------------------------|
         | sum_quantities         | SKU_A: 7\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | higher_quantity      | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | saved_quantity       | SKU_A: 2\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | separate_item        | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ' |
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param createDestinationBasket - If the current shopper has an active basket, this parameter is ignored. If the current shopper has no active basket, this parameter controls the behavior:
         - `false` (default): Return a BasketMergeException (HTTP status 409).
         - `true`: Force the merge by creating a basket for the current shopper and copying information from the previous shopper's basket into it. Return success (HTTP status 200).
         * @param productItemMergeMode - This parameter controls the quantity calculation for products that exist in both baskets.
         - higher_quantity (default): Compare the product's quantities in each basket, and use the higher value.
         - sum_quantities: Use the sum of the product's quantities from both baskets.
         - saved_quantity: Use the product's quantity in the current shopper's active basket. Ignore the quantity from the previous shopper's basket.
         - separate_item: Add a separate product item to the current shopper's basket for the quantity in the previous shopper's basket.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        mergeBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                createDestinationBasket?: boolean;
                productItemMergeMode?: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Removes a basket.
         *
         * If you would like to get a raw Response object use the other deleteBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        deleteBasket(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<void>;
        /**
         * Removes a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        deleteBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Gets a basket.
         *
         * If you would like to get a raw Response object use the other getBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
        getBasket(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Basket>;
        /**
         * Gets a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        getBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Updates a basket. Only the currency of the basket, source code, the custom
         properties of the basket, and the shipping items will be considered.
         *
         * If you would like to get a raw Response object use the other updateBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the `currency` triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        updateBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Basket;
        }>): Promise<Basket>;
        /**
         * Updates a basket. Only the currency of the basket, source code, the custom
         properties of the basket, and the shipping items will be considered.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the `currency` triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updateBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Basket;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Marks a basket as an agent basket.
         *
         * If you would like to get a raw Response object use the other updateAsAgentBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
        updateAsAgentBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Basket>;
        /**
         * Marks a basket as an agent basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updateAsAgentBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Sets the billing address of a basket.
         *
         * If you would like to get a raw Response object use the other updateBillingAddressForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param useAsShipping -
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the billing/shipping address triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        updateBillingAddressForBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                useAsShipping?: boolean;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderAddress;
        }>): Promise<Basket>;
        /**
         * Sets the billing address of a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param useAsShipping -
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the billing/shipping address triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updateBillingAddressForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                useAsShipping?: boolean;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderAddress;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Adds a coupon to an existing basket.
         *
         * If you would like to get a raw Response object use the other addCouponToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        addCouponToBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CouponItem;
        }>): Promise<Basket>;
        /**
         * Adds a coupon to an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        addCouponToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CouponItem;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Removes a coupon from the basket.
         *
         * If you would like to get a raw Response object use the other removeCouponFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param couponItemId - The ID of the coupon item to be removed.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
        removeCouponFromBasket(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                couponItemId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Basket>;
        /**
         * Removes a coupon from the basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param couponItemId - The ID of the coupon item to be removed.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        removeCouponFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                couponItemId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Sets customer information for an existing basket.
         *
         * If you would like to get a raw Response object use the other updateCustomerForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        updateCustomerForBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerInfo;
        }>): Promise<Basket>;
        /**
         * Sets customer information for an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updateCustomerForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerInfo;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Adds a gift certificate item to an existing basket.
         *
         * If you would like to get a raw Response object use the other addGiftCertificateItemToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        addGiftCertificateItemToBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: GiftCertificateItem;
        }>): Promise<Basket>;
        /**
         * Adds a gift certificate item to an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        addGiftCertificateItemToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: GiftCertificateItem;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Deletes a gift certificate item from an existing basket.
         *
         * If you would like to get a raw Response object use the other removeGiftCertificateItemFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
        removeGiftCertificateItemFromBasket(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                giftCertificateItemId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Basket>;
        /**
         * Deletes a gift certificate item from an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        removeGiftCertificateItemFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                giftCertificateItemId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Updates a gift certificate item of an existing basket.
         *
         * If you would like to get a raw Response object use the other updateGiftCertificateItemInBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        updateGiftCertificateItemInBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                giftCertificateItemId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: GiftCertificateItem;
        }>): Promise<Basket>;
        /**
         * Updates a gift certificate item of an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updateGiftCertificateItemInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                giftCertificateItemId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: GiftCertificateItem;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Adds new items to a basket. The added items are associated with the
         specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
         Considered values from the request body, for each item are:
         
         - productId: a valid product ID. This is the ID of the product to be added to the basket. If the
         product is already in the basket, the API either increments the quantity of the existing product line item or
         creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
         product bundles containing variation masters, the API creates a new product line item regardless of the site
         preference.
         - shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item
         is created.
         - quantity: a number between 0.01 and 999. This is the quantity of the product to order.
         - inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is
         allocated.
         - bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the
         bonus discount line item for which the added product is a selected bonus product.
         - optionItems/optionValueId: a valid option value ID. This is an option value for an option item of
         an option product.  This is only possible if the product item is an option
         product. To set option values, you must specify a collection of option items in the optionItems
         property. These option items must contain optionId and optionValueId. Also,
         the values you specify must be valid for the option product that this product item represents. Otherwise, the
         server throws an InvalidProductOptionItemException or an
         InvalidProductOptionValueItemException.
         - custom properties in the form c_\<CUSTOM_NAME\>: the custom property must correspond to a custom
         attribute (\<CUSTOM_NAME\>) defined for ProductLineItem. The value of this property must be valid for the
         type of custom attribute defined for ProductLineItem.
         *
         * If you would like to get a raw Response object use the other addItemToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        addItemToBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Array<ProductItem>;
        }>): Promise<Basket>;
        /**
         * Adds new items to a basket. The added items are associated with the
         specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
         Considered values from the request body, for each item are:
         
         - productId: a valid product ID. This is the ID of the product to be added to the basket. If the
         product is already in the basket, the API either increments the quantity of the existing product line item or
         creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
         product bundles containing variation masters, the API creates a new product line item regardless of the site
         preference.
         - shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item
         is created.
         - quantity: a number between 0.01 and 999. This is the quantity of the product to order.
         - inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is
         allocated.
         - bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the
         bonus discount line item for which the added product is a selected bonus product.
         - optionItems/optionValueId: a valid option value ID. This is an option value for an option item of
         an option product.  This is only possible if the product item is an option
         product. To set option values, you must specify a collection of option items in the optionItems
         property. These option items must contain optionId and optionValueId. Also,
         the values you specify must be valid for the option product that this product item represents. Otherwise, the
         server throws an InvalidProductOptionItemException or an
         InvalidProductOptionValueItemException.
         - custom properties in the form c_\<CUSTOM_NAME\>: the custom property must correspond to a custom
         attribute (\<CUSTOM_NAME\>) defined for ProductLineItem. The value of this property must be valid for the
         type of custom attribute defined for ProductLineItem.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        addItemToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Array<ProductItem>;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Updates multiple items in a basket. This behaviour matches that of updating a
         single item, but the body contains an array of ProductItems to be updated that are identified by `itemId`.
         The items to update can include bundled product items, although the
         kind of update supported for bundled product items is limited to `productId`, `gift`, `giftMessage`
         and custom properties.
         The following values in the request body are considered by the server:
         
         - `itemId` (mandatory): identifies an item to be updated.
         - `productId`: a valid product ID. The purpose of this
         value is to change the variation of a variation product.
         - `shipmentId`: a valid shipment ID. The purpose of
         this value is to move a product item to another shipment.
         - `quantity`: a number between 0 and 999. The purpose of
         this value is to change the quantity of the product item. If the quantity is 0,
         the product item is removed.
         - `optionItems`/`optionValueId`: a valid option value
         ID. The purpose of this value is to exchange an option value for an
         option item of an option product.
         This is only possible if the product item is an option product. To change
         option values, a collection of the option items to be changed must be
         provided in the property `optionItems`. Those
         `optionItems` must contain `optionId`
         and `optionValueId`. The provided values must be valid
         for the option product that this product item represents. Otherwise,
         `InvalidProductOptionItemException` or
         `InvalidProductOptionValueItemException` is thrown.
         - custom properties `c_\<CUSTOM_NAME\>`: a
         value corresponding to the type defined for custom attribute
         `\<CUSTOM_NAME\>` of the ProductLineItem. The purpose of this value is to
         add or change the value of a custom attribute defined for the
         ProductLineItem.
         - `gift`: a boolean value that specifies whether the item is a gift.
         - `giftMessage`: a message to include with the gift.
         *
         * If you would like to get a raw Response object use the other updateItemsInBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the product line item quantity triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        updateItemsInBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Array<ProductItem>;
        }>): Promise<Basket>;
        /**
         * Updates multiple items in a basket. This behaviour matches that of updating a
         single item, but the body contains an array of ProductItems to be updated that are identified by `itemId`.
         The items to update can include bundled product items, although the
         kind of update supported for bundled product items is limited to `productId`, `gift`, `giftMessage`
         and custom properties.
         The following values in the request body are considered by the server:
         
         - `itemId` (mandatory): identifies an item to be updated.
         - `productId`: a valid product ID. The purpose of this
         value is to change the variation of a variation product.
         - `shipmentId`: a valid shipment ID. The purpose of
         this value is to move a product item to another shipment.
         - `quantity`: a number between 0 and 999. The purpose of
         this value is to change the quantity of the product item. If the quantity is 0,
         the product item is removed.
         - `optionItems`/`optionValueId`: a valid option value
         ID. The purpose of this value is to exchange an option value for an
         option item of an option product.
         This is only possible if the product item is an option product. To change
         option values, a collection of the option items to be changed must be
         provided in the property `optionItems`. Those
         `optionItems` must contain `optionId`
         and `optionValueId`. The provided values must be valid
         for the option product that this product item represents. Otherwise,
         `InvalidProductOptionItemException` or
         `InvalidProductOptionValueItemException` is thrown.
         - custom properties `c_\<CUSTOM_NAME\>`: a
         value corresponding to the type defined for custom attribute
         `\<CUSTOM_NAME\>` of the ProductLineItem. The purpose of this value is to
         add or change the value of a custom attribute defined for the
         ProductLineItem.
         - `gift`: a boolean value that specifies whether the item is a gift.
         - `giftMessage`: a message to include with the gift.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the product line item quantity triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updateItemsInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Array<ProductItem>;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Removes a product item from the basket.
         *
         * If you would like to get a raw Response object use the other removeItemFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
        removeItemFromBasket(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                itemId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Basket>;
        /**
         * Removes a product item from the basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        removeItemFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                itemId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Updates an item in a basket. The item to be updated can be a bundled product item, although the
         kind of update supported for bundled product items is limited to `productId` (to support
         variation products), `gift`, `giftMessage` and custom properties.
         The following values in the request body are considered by the server:
         
         - `productId`: a valid product ID. The purpose of this
         value is to exchange a variation of a variation product.
         - `shipmentId`: a valid shipment ID. The purpose of
         this value is to move a product item to another shipment.
         - `quantity`: a number between 0 and 999. The purpose of
         this value is to change quantity of the product item. If quantity is 0,
         the product item is removed.
         - `optionItems`/`optionValueId`: a valid option value
         ID. The purpose of this value is to exchange an option value for an
         option item of an option product.
         This is only possible if the product item is an option product. To change
         option values a collection of option items to be changed need to be
         provided in property optionItems. Those
         optionItems need to contain optionId
         and `optionValueId`. The provided values must be valid
         for the option product that this product item represents. Otherwise,
         `InvalidProductOptionItemException` or
         `InvalidProductOptionValueItemException` is thrown.
         - custom properties `c_\<CUSTOM_NAME\>`: a
         value corresponding to the type defined for custom attribute
         `\<CUSTOM_NAME\>` of ProductLineItem. The purpose of this value is to
         add or change the value of a custom attribute defined for
         ProductLineItem.
         - `gift`: a boolean value that specifies whether the item is a gift
         - `giftMessage`: a message for the gift
         *
         * If you would like to get a raw Response object use the other updateItemInBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the product line item quantity triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        updateItemInBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                itemId: string;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ProductItem;
        }>): Promise<Basket>;
        /**
         * Updates an item in a basket. The item to be updated can be a bundled product item, although the
         kind of update supported for bundled product items is limited to `productId` (to support
         variation products), `gift`, `giftMessage` and custom properties.
         The following values in the request body are considered by the server:
         
         - `productId`: a valid product ID. The purpose of this
         value is to exchange a variation of a variation product.
         - `shipmentId`: a valid shipment ID. The purpose of
         this value is to move a product item to another shipment.
         - `quantity`: a number between 0 and 999. The purpose of
         this value is to change quantity of the product item. If quantity is 0,
         the product item is removed.
         - `optionItems`/`optionValueId`: a valid option value
         ID. The purpose of this value is to exchange an option value for an
         option item of an option product.
         This is only possible if the product item is an option product. To change
         option values a collection of option items to be changed need to be
         provided in property optionItems. Those
         optionItems need to contain optionId
         and `optionValueId`. The provided values must be valid
         for the option product that this product item represents. Otherwise,
         `InvalidProductOptionItemException` or
         `InvalidProductOptionValueItemException` is thrown.
         - custom properties `c_\<CUSTOM_NAME\>`: a
         value corresponding to the type defined for custom attribute
         `\<CUSTOM_NAME\>` of ProductLineItem. The purpose of this value is to
         add or change the value of a custom attribute defined for
         ProductLineItem.
         - `gift`: a boolean value that specifies whether the item is a gift
         - `giftMessage`: a message for the gift
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the product line item quantity triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updateItemInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                itemId: string;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ProductItem;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * If you would like to get a raw Response object use the other addTaxesForBasketItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        addTaxesForBasketItem(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                itemId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TaxItems;
        }>): Promise<void>;
        /**
         * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        addTaxesForBasketItem<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                itemId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TaxItems;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Adds a payment instrument to a basket.
         *
         * If you would like to get a raw Response object use the other addPaymentInstrumentToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        addPaymentInstrumentToBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: BasketPaymentInstrumentRequest;
        }>): Promise<Basket>;
        /**
         * Adds a payment instrument to a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        addPaymentInstrumentToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: BasketPaymentInstrumentRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Removes a payment instrument of a basket.
         *
         * If you would like to get a raw Response object use the other removePaymentInstrumentFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param paymentInstrumentId -
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
        removePaymentInstrumentFromBasket(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                paymentInstrumentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Basket>;
        /**
         * Removes a payment instrument of a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param paymentInstrumentId -
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        removePaymentInstrumentFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                paymentInstrumentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Updates payment instrument of an existing basket.
         *
         * If you would like to get a raw Response object use the other updatePaymentInstrumentInBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param paymentInstrumentId -
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the payment instrument triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        updatePaymentInstrumentInBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                paymentInstrumentId: string;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderPaymentInstrument;
        }>): Promise<Basket>;
        /**
         * Updates payment instrument of an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param paymentInstrumentId -
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the payment instrument triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updatePaymentInstrumentInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                paymentInstrumentId: string;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderPaymentInstrument;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Gets applicable payment methods for an existing basket considering the open payment amount only.
         *
         * If you would like to get a raw Response object use the other getPaymentMethodsForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PaymentMethodResult.
         *
         */
        getPaymentMethodsForBasket(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<PaymentMethodResult>;
        /**
         * Gets applicable payment methods for an existing basket considering the open payment amount only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.
         *
         */
        getPaymentMethodsForBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : PaymentMethodResult>;
        /**
         * Adds a custom manual price adjustment to the basket.
         *
         * If you would like to get a raw Response object use the other addPriceAdjustmentToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        addPriceAdjustmentToBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PriceAdjustmentRequest;
        }>): Promise<Basket>;
        /**
         * Adds a custom manual price adjustment to the basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        addPriceAdjustmentToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PriceAdjustmentRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Removes a custom manual price adjustment from the basket.
         *
         * If you would like to get a raw Response object use the other removePriceAdjustmentFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param priceAdjustmentId -
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
        removePriceAdjustmentFromBasket(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                priceAdjustmentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Basket>;
        /**
         * Removes a custom manual price adjustment from the basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param priceAdjustmentId -
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        removePriceAdjustmentFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                priceAdjustmentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Updates a custom manual price adjustment on the basket. Only the following path values are considered for the update; all other attributes are ignored.
         - `discount`
         - `itemText`
         - `reasonCode`
         - `custom properties`
         The discount `type` of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an adjustment of type `percentage`, the `percentage` attribute is mandatory. For adjustments of type `amount` and `fixed_price`, the `amount` attribute is mandatory.
         *
         * If you would like to get a raw Response object use the other updatePriceAdjustmentInBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param priceAdjustmentId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        updatePriceAdjustmentInBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                priceAdjustmentId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PriceAdjustment;
        }>): Promise<Basket>;
        /**
         * Updates a custom manual price adjustment on the basket. Only the following path values are considered for the update; all other attributes are ignored.
         - `discount`
         - `itemText`
         - `reasonCode`
         - `custom properties`
         The discount `type` of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an adjustment of type `percentage`, the `percentage` attribute is mandatory. For adjustments of type `amount` and `fixed_price`, the `amount` attribute is mandatory.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param priceAdjustmentId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updatePriceAdjustmentInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                priceAdjustmentId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PriceAdjustment;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * ( DEPRECATED ) Gets applicable price books for an existing basket. This endpoint is deprecated. Use [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-context?meta=Summary), hooks or `dw.catalog.PriceBookMgr#getApplicablePriceBooks()` instead.
         *
         * If you would like to get a raw Response object use the other getPriceBooksForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PriceBookIds.
         *
         */
        getPriceBooksForBasket(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<PriceBookIds>;
        /**
         * ( DEPRECATED ) Gets applicable price books for an existing basket. This endpoint is deprecated. Use [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-context?meta=Summary), hooks or `dw.catalog.PriceBookMgr#getApplicablePriceBooks()` instead.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PriceBookIds otherwise.
         *
         */
        getPriceBooksForBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : PriceBookIds>;
        /**
         * ( DEPRECATED ) This method allows you to put an array of priceBookIds to an existing basket, which will be used for basket calculation. This endpoint is deprecated.  Use [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-context?meta=Summary), hooks or `dw.catalog.PriceBookMgr#setApplicablePriceBooks()` instead.
         *
         * If you would like to get a raw Response object use the other addPriceBooksToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        addPriceBooksToBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PriceBookIds;
        }>): Promise<void>;
        /**
         * ( DEPRECATED ) This method allows you to put an array of priceBookIds to an existing basket, which will be used for basket calculation. This endpoint is deprecated.  Use [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-context?meta=Summary), hooks or `dw.catalog.PriceBookMgr#setApplicablePriceBooks()` instead.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        addPriceBooksToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PriceBookIds;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Creates a new shipment for a basket.
         
         The created shipment is initialized with values provided in the body
         document and can be updated with further data API calls. Considered from
         the body are the following properties if specified:
         
         - the ID
         - the shipping address
         - the shipping method
         - gift boolean flag
         - gift message
         - custom properties
         *
         * If you would like to get a raw Response object use the other createShipmentForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        createShipmentForBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Shipment;
        }>): Promise<Basket>;
        /**
         * Creates a new shipment for a basket.
         
         The created shipment is initialized with values provided in the body
         document and can be updated with further data API calls. Considered from
         the body are the following properties if specified:
         
         - the ID
         - the shipping address
         - the shipping method
         - gift boolean flag
         - gift message
         - custom properties
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        createShipmentForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Shipment;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Removes a specified shipment and all associated product, gift certificate,
         shipping, and price adjustment line items from a basket.
         It is not allowed to remove the default shipment.
         *
         * If you would like to get a raw Response object use the other removeShipmentFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
        removeShipmentFromBasket(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                shipmentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Basket>;
        /**
         * Removes a specified shipment and all associated product, gift certificate,
         shipping, and price adjustment line items from a basket.
         It is not allowed to remove the default shipment.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        removeShipmentFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                shipmentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Updates a shipment for a basket.
         
         The shipment is initialized with values provided in the body
         document and can be updated with further data API calls. Considered from
         the body are the following properties if specified:
         - the ID
         - the shipping address
         - the shipping method
         - gift boolean flag
         - gift message
         - custom properties
         *
         * If you would like to get a raw Response object use the other updateShipmentForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        updateShipmentForBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                shipmentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Shipment;
        }>): Promise<Basket>;
        /**
         * Updates a shipment for a basket.
         
         The shipment is initialized with values provided in the body
         document and can be updated with further data API calls. Considered from
         the body are the following properties if specified:
         - the ID
         - the shipping address
         - the shipping method
         - gift boolean flag
         - gift message
         - custom properties
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updateShipmentForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                shipmentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Shipment;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Sets a shipping address of a specific shipment of a basket.
         *
         * If you would like to get a raw Response object use the other updateShippingAddressForShipment function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param useAsBilling -
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the shipping/billing address triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        updateShippingAddressForShipment(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                shipmentId: string;
                useAsBilling?: boolean;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderAddress;
        }>): Promise<Basket>;
        /**
         * Sets a shipping address of a specific shipment of a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param useAsBilling -
         * @param removeExternalTax - If `true` (default value), the external tax rates are removed from the basket and set to null. To add external tax rates to a basket, use the `addTaxesForBasket` or `addTaxesForBasketItem` endpoint. The removal of external tax rates depends on the update performed on the basket, for example: an update to the shipping/billing address triggers a removal. Set this parameter to `false` to disable the removal of external tax rates/values.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updateShippingAddressForShipment<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                shipmentId: string;
                useAsBilling?: boolean;
                removeExternalTax?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderAddress;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Sets a shipping method to a specific shipment of a basket.
         *
         * If you would like to get a raw Response object use the other updateShippingMethodForShipment function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
        updateShippingMethodForShipment(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                shipmentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ShippingMethod;
        }>): Promise<Basket>;
        /**
         * Sets a shipping method to a specific shipment of a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updateShippingMethodForShipment<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                shipmentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ShippingMethod;
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * Gets the applicable shipping methods for a certain shipment of a basket.
         *
         * If you would like to get a raw Response object use the other getShippingMethodsForShipment function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type ShippingMethodResult.
         *
         */
        getShippingMethodsForShipment(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                shipmentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<ShippingMethodResult>;
        /**
         * Gets the applicable shipping methods for a certain shipment of a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ShippingMethodResult otherwise.
         *
         */
        getShippingMethodsForShipment<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                shipmentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : ShippingMethodResult>;
        /**
         * Marks a basket as a storefront basket.
         *
         * If you would like to get a raw Response object use the other updateAsStorefrontBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param exchange - If true, an existing storefront basket is exchanged and marked as an agent basket. If false, a `CustomerBasketsQuotaExceededException` is thrown.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
        updateAsStorefrontBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                exchange?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Basket>;
        /**
         * Marks a basket as a storefront basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param exchange - If true, an existing storefront basket is exchanged and marked as an agent basket. If false, a `CustomerBasketsQuotaExceededException` is thrown.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
        updateAsStorefrontBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                exchange?: boolean;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
        /**
         * This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * If you would like to get a raw Response object use the other getTaxesFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Taxes.
         *
         */
        getTaxesFromBasket(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Taxes>;
        /**
         * This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.
         *
         */
        getTaxesFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Taxes>;
        /**
         * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * If you would like to get a raw Response object use the other addTaxesForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        addTaxesForBasket(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Taxes;
        }>): Promise<void>;
        /**
         * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        addTaxesForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                basketId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Taxes;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    }
}
type ShopperContext = {
    effectiveDateTime?: any;
    sourceCode?: any;
    customerGroupIds?: Array<string>;
    customQualifiers?: {} & {
        [key: string]: any;
    };
    assignmentQualifiers?: {} & {
        [key: string]: any;
    };
    clientIp?: string;
    geoLocation?: {
        city?: string;
        country?: string;
        countryCode?: string;
        latitude?: number;
        longitude?: number;
        metroCode?: string;
        postalCode?: string;
        region?: string;
        regionCode?: string;
    } & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type RangeFilter$0 = {
    [key: string]: any;
};
type BoolFilter$0 = {
    filters?: Array<Filter>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$0 = {} & {
    [key: string]: any;
};
type FilteredQuery$0 = {
    filter: Filter;
    query: Query;
} & {
    [key: string]: any;
};
type QueryFilter$0 = {
    query: Query;
} & {
    [key: string]: any;
};
type Query$0 = {
    boolQuery?: BoolQuery;
    filteredQuery?: FilteredQuery$0;
    matchAllQuery?: MatchAllQuery$0;
    nestedQuery?: NestedQuery;
    termQuery?: TermQuery;
    textQuery?: TextQuery;
} & {
    [key: string]: any;
};
type TermQuery$0 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$0 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$0 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$0 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$0 = {
    must?: Array<Query$0>;
    mustNot?: Array<Query$0>;
    should?: Array<Query$0>;
} & {
    [key: string]: any;
};
type NestedQuery$0 = {
    path: string;
    query: Query$0;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$0 = {
    boolFilter?: BoolFilter$0;
    queryFilter?: QueryFilter$0;
    range2Filter?: Range2Filter$0;
    rangeFilter?: RangeFilter$0;
    termFilter?: TermFilter$0;
} & {
    [key: string]: any;
};
type Sort$0 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type L10nString$0 = {} & {
    [key: string]: any;
};
type PropertyValueDefinition$0 = {
    description: L10nString$0;
    displayValue: L10nString$0;
    id: string;
    position?: number;
    value: string;
};
/**
 * All path parameters that are used by at least one ShopperContexts method.
 */
type ShopperContextsPathParameters = {
    organizationId?: string;
    usid?: string;
};
/**
 * All query parameters that are used by at least one ShopperContexts method.
 */
type ShopperContextsQueryParameters = {
    siteId?: string;
    evaluateContextWithClientIp?: boolean;
};
/**
 * All parameters that are used by ShopperContexts.
 */
type ShopperContextsParameters = ShopperContextsPathParameters & BaseUriParameters & ShopperContextsQueryParameters;
/**
 * [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-context:Summary)
 * ==================================
 *
 * *The Shopper Context API enables developers to build highly contextualized shopping experiences for shoppers.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperContexts } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperContextsClient = new ShopperContexts(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 0.0.30<br />
 * Last Updated: <br />
 * </span>
 *
 *
 */
declare class ShopperContexts<ConfigParameters extends ShopperContextsParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/shopper/shopper-context/{version}";
    static readonly apiPaths: {
        getShopperContext: string;
        createShopperContext: string;
        deleteShopperContext: string;
        updateShopperContext: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly getShopperContext: readonly [
            "organizationId",
            "usid",
            "siteId"
        ];
        readonly getShopperContextRequired: readonly [
            "organizationId",
            "usid"
        ];
        readonly createShopperContext: readonly [
            "organizationId",
            "usid",
            "siteId",
            "evaluateContextWithClientIp"
        ];
        readonly createShopperContextRequired: readonly [
            "organizationId",
            "usid"
        ];
        readonly deleteShopperContext: readonly [
            "organizationId",
            "usid",
            "siteId"
        ];
        readonly deleteShopperContextRequired: readonly [
            "organizationId",
            "usid"
        ];
        readonly updateShopperContext: readonly [
            "organizationId",
            "usid",
            "siteId",
            "evaluateContextWithClientIp"
        ];
        readonly updateShopperContextRequired: readonly [
            "organizationId",
            "usid"
        ];
    };
    /**
     * Gets the shopper's context based on the shopperJWT.
     
     With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
     *
     * If you would like to get a raw Response object use the other getShopperContext function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
     * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting January 2025, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type ShopperContext.
     *
     */
    getShopperContext(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
            siteId?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<ShopperContext>;
    /**
     * Gets the shopper's context based on the shopperJWT.
     
     With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
     * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting January 2025, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext otherwise.
     *
     */
    getShopperContext<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
            siteId?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : ShopperContext>;
    /**
     * Creates the shopper's context based on shopperJWT. If a shopper context already exists, it replaces the entire existing context.
     
     With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
     *
     * If you would like to get a raw Response object use the other createShopperContext function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
     * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
     * @param evaluateContextWithClientIp - Determines whether to evaluate the context using the provided `clientIp`. This property is available with B2C Commerce version 24.7.
     - If `evaluateContextWithClientIp` is set to `true`:
     - The `clientIp` is saved and used in subsequent requests. If `geoLocation` is also saved in the context, it takes precedence over the `clientIp`.
     
     - If `evaluateContextWithClientIp` is set to `false`:
     - The `clientIp` is not saved and will not be used in subsequent requests.
     
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void | void.
     *
     */
    createShopperContext(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
            siteId?: string;
            evaluateContextWithClientIp?: boolean;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext;
    }>): Promise<void | void>;
    /**
     * Creates the shopper's context based on shopperJWT. If a shopper context already exists, it replaces the entire existing context.
     
     With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
     * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
     * @param evaluateContextWithClientIp - Determines whether to evaluate the context using the provided `clientIp`. This property is available with B2C Commerce version 24.7.
     - If `evaluateContextWithClientIp` is set to `true`:
     - The `clientIp` is saved and used in subsequent requests. If `geoLocation` is also saved in the context, it takes precedence over the `clientIp`.
     
     - If `evaluateContextWithClientIp` is set to `false`:
     - The `clientIp` is not saved and will not be used in subsequent requests.
     
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void | void otherwise.
     *
     */
    createShopperContext<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
            siteId?: string;
            evaluateContextWithClientIp?: boolean;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext;
    }>, rawResponse?: T): Promise<T extends true ? Response : void | void>;
    /**
     * Gets the shopper's context based on the shopperJWT.
     
     With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
     *
     * If you would like to get a raw Response object use the other deleteShopperContext function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
     * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    deleteShopperContext(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
            siteId?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Gets the shopper's context based on the shopperJWT.
     
     With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
     * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    deleteShopperContext<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
            siteId?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Updates an existing shopper's context based on the Shopper JWT. If the shopper context exists, it's updated with the patch body.
     - If a new attribute that does not exist in the existing shopper context is present, it is added to the context.
     -If an attribute is already present in the existing shopper context, its value is replaced by the corresponding value from the new shopper context in the request body as follows:
     - `custom qualifiers` or `assignment qualifiers`:
     
     If the individual qualifier key exists, it is overwritten with the new value.
     
     If the value of the key is set to null, it is deleted from the existing shopper context.
     
     If an empty `custom qualifiers` or `assignment qualifiers` object `\{\}` is passed, the entire qualifier object is deleted.
     - `effectiveDateTime` or `sourceCode` or `clientIp`:
     
     If the new value is set to an empty string (\"\"), it is deleted from the existing shopper context.
     
     If the new value is set to null, it is ignored.
     
     If the new value is not empty or null, it overwrites the existing value.
     
     - `customerGroupIds`:
     
     If a list of `customerGroupIds` exists, it is replaced by the new list of customer group IDs from the request.
     
     If `customerGroupIds` is set to an empty array [], the existing list in the shopper context is deleted.
     
     - `geoLocation`:
     
     If it exists, the entire `geoLocation` object is replaced with the new value.
     
     If the new value is set to null, it is ignored.
     
     If an empty `geoLocation` object `\{\}` is passed, it is deleted.
     
     With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
     *
     * If you would like to get a raw Response object use the other updateShopperContext function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
     * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
     * @param evaluateContextWithClientIp - Determines whether to evaluate the context using the provided `clientIp`.  This property is available with B2C Commerce version 24.7.
     - If `evaluateContextWithClientIp` is set to `true`:
     - The `clientIP` is saved and used in subsequent requests.
     
     - If `evaluateContextWithClientIp` is set to `false`:
     - The `clientIP` is not saved and will not be used in subsequent requests.
     
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type ShopperContext.
     *
     */
    updateShopperContext(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
            siteId?: string;
            evaluateContextWithClientIp?: boolean;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext;
    }>): Promise<ShopperContext>;
    /**
     * Updates an existing shopper's context based on the Shopper JWT. If the shopper context exists, it's updated with the patch body.
     - If a new attribute that does not exist in the existing shopper context is present, it is added to the context.
     -If an attribute is already present in the existing shopper context, its value is replaced by the corresponding value from the new shopper context in the request body as follows:
     - `custom qualifiers` or `assignment qualifiers`:
     
     If the individual qualifier key exists, it is overwritten with the new value.
     
     If the value of the key is set to null, it is deleted from the existing shopper context.
     
     If an empty `custom qualifiers` or `assignment qualifiers` object `\{\}` is passed, the entire qualifier object is deleted.
     - `effectiveDateTime` or `sourceCode` or `clientIp`:
     
     If the new value is set to an empty string (\"\"), it is deleted from the existing shopper context.
     
     If the new value is set to null, it is ignored.
     
     If the new value is not empty or null, it overwrites the existing value.
     
     - `customerGroupIds`:
     
     If a list of `customerGroupIds` exists, it is replaced by the new list of customer group IDs from the request.
     
     If `customerGroupIds` is set to an empty array [], the existing list in the shopper context is deleted.
     
     - `geoLocation`:
     
     If it exists, the entire `geoLocation` object is replaced with the new value.
     
     If the new value is set to null, it is ignored.
     
     If an empty `geoLocation` object `\{\}` is passed, it is deleted.
     
     With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
     * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
     * @param evaluateContextWithClientIp - Determines whether to evaluate the context using the provided `clientIp`.  This property is available with B2C Commerce version 24.7.
     - If `evaluateContextWithClientIp` is set to `true`:
     - The `clientIP` is saved and used in subsequent requests.
     
     - If `evaluateContextWithClientIp` is set to `false`:
     - The `clientIP` is not saved and will not be used in subsequent requests.
     
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext otherwise.
     *
     */
    updateShopperContext<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
            siteId?: string;
            evaluateContextWithClientIp?: boolean;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext;
    }>, rawResponse?: T): Promise<T extends true ? Response : ShopperContext>;
}
declare namespace ShopperContextsTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type ShopperContext = {
        effectiveDateTime?: any;
        sourceCode?: any;
        customerGroupIds?: Array<string>;
        customQualifiers?: {} & {
            [key: string]: any;
        };
        assignmentQualifiers?: {} & {
            [key: string]: any;
        };
        clientIp?: string;
        geoLocation?: {
            city?: string;
            country?: string;
            countryCode?: string;
            latitude?: number;
            longitude?: number;
            metroCode?: string;
            postalCode?: string;
            region?: string;
            regionCode?: string;
        } & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query$0;
        sorts?: Array<Sort$0>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition$0;
        id?: string;
        name: L10nString$0;
        description: L10nString$0;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString$0;
        possibleValues?: Array<PropertyValueDefinition$0>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query$0;
        sorts?: Array<Sort$0>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter$0>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query$0;
        sorts?: Array<Sort$0>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter$0;
        query: Query$0;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query$0;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$0;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$0;
        termQuery?: TermQuery$0;
        textQuery?: TextQuery$0;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition$0;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition$0>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    /**
     * All path parameters that are used by at least one ShopperContexts method.
     */
    type ShopperContextsPathParameters = {
        organizationId?: string;
        usid?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperContexts method.
     */
    type ShopperContextsQueryParameters = {
        siteId?: string;
        evaluateContextWithClientIp?: boolean;
    };
    /**
     * All parameters that are used by ShopperContexts.
     */
    type ShopperContextsParameters = ShopperContextsPathParameters & BaseUriParameters & ShopperContextsQueryParameters;
    /**
     * [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-context:Summary)
     * ==================================
     *
     * *The Shopper Context API enables developers to build highly contextualized shopping experiences for shoppers.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperContexts } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperContextsClient = new ShopperContexts(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 0.0.30<br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperContexts<ConfigParameters extends ShopperContextsParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/shopper/shopper-context/{version}";
        static readonly apiPaths: {
            getShopperContext: string;
            createShopperContext: string;
            deleteShopperContext: string;
            updateShopperContext: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly getShopperContext: readonly [
                "organizationId",
                "usid",
                "siteId"
            ];
            readonly getShopperContextRequired: readonly [
                "organizationId",
                "usid"
            ];
            readonly createShopperContext: readonly [
                "organizationId",
                "usid",
                "siteId",
                "evaluateContextWithClientIp"
            ];
            readonly createShopperContextRequired: readonly [
                "organizationId",
                "usid"
            ];
            readonly deleteShopperContext: readonly [
                "organizationId",
                "usid",
                "siteId"
            ];
            readonly deleteShopperContextRequired: readonly [
                "organizationId",
                "usid"
            ];
            readonly updateShopperContext: readonly [
                "organizationId",
                "usid",
                "siteId",
                "evaluateContextWithClientIp"
            ];
            readonly updateShopperContextRequired: readonly [
                "organizationId",
                "usid"
            ];
        };
        /**
         * Gets the shopper's context based on the shopperJWT.
         
         With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
         *
         * If you would like to get a raw Response object use the other getShopperContext function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting January 2025, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type ShopperContext.
         *
         */
        getShopperContext(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                usid: string;
                siteId?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<ShopperContext>;
        /**
         * Gets the shopper's context based on the shopperJWT.
         
         With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting January 2025, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext otherwise.
         *
         */
        getShopperContext<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                usid: string;
                siteId?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : ShopperContext>;
        /**
         * Creates the shopper's context based on shopperJWT. If a shopper context already exists, it replaces the entire existing context.
         
         With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
         *
         * If you would like to get a raw Response object use the other createShopperContext function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
         * @param evaluateContextWithClientIp - Determines whether to evaluate the context using the provided `clientIp`. This property is available with B2C Commerce version 24.7.
         - If `evaluateContextWithClientIp` is set to `true`:
         - The `clientIp` is saved and used in subsequent requests. If `geoLocation` is also saved in the context, it takes precedence over the `clientIp`.
         
         - If `evaluateContextWithClientIp` is set to `false`:
         - The `clientIp` is not saved and will not be used in subsequent requests.
         
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void | void.
         *
         */
        createShopperContext(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                usid: string;
                siteId?: string;
                evaluateContextWithClientIp?: boolean;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ShopperContext;
        }>): Promise<void | void>;
        /**
         * Creates the shopper's context based on shopperJWT. If a shopper context already exists, it replaces the entire existing context.
         
         With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
         * @param evaluateContextWithClientIp - Determines whether to evaluate the context using the provided `clientIp`. This property is available with B2C Commerce version 24.7.
         - If `evaluateContextWithClientIp` is set to `true`:
         - The `clientIp` is saved and used in subsequent requests. If `geoLocation` is also saved in the context, it takes precedence over the `clientIp`.
         
         - If `evaluateContextWithClientIp` is set to `false`:
         - The `clientIp` is not saved and will not be used in subsequent requests.
         
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void | void otherwise.
         *
         */
        createShopperContext<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                usid: string;
                siteId?: string;
                evaluateContextWithClientIp?: boolean;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ShopperContext;
        }>, rawResponse?: T): Promise<T extends true ? Response : void | void>;
        /**
         * Gets the shopper's context based on the shopperJWT.
         
         With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
         *
         * If you would like to get a raw Response object use the other deleteShopperContext function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        deleteShopperContext(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                usid: string;
                siteId?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<void>;
        /**
         * Gets the shopper's context based on the shopperJWT.
         
         With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        deleteShopperContext<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                usid: string;
                siteId?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Updates an existing shopper's context based on the Shopper JWT. If the shopper context exists, it's updated with the patch body.
         - If a new attribute that does not exist in the existing shopper context is present, it is added to the context.
         -If an attribute is already present in the existing shopper context, its value is replaced by the corresponding value from the new shopper context in the request body as follows:
         - `custom qualifiers` or `assignment qualifiers`:
         
         If the individual qualifier key exists, it is overwritten with the new value.
         
         If the value of the key is set to null, it is deleted from the existing shopper context.
         
         If an empty `custom qualifiers` or `assignment qualifiers` object `\{\}` is passed, the entire qualifier object is deleted.
         - `effectiveDateTime` or `sourceCode` or `clientIp`:
         
         If the new value is set to an empty string (\"\"), it is deleted from the existing shopper context.
         
         If the new value is set to null, it is ignored.
         
         If the new value is not empty or null, it overwrites the existing value.
         
         - `customerGroupIds`:
         
         If a list of `customerGroupIds` exists, it is replaced by the new list of customer group IDs from the request.
         
         If `customerGroupIds` is set to an empty array [], the existing list in the shopper context is deleted.
         
         - `geoLocation`:
         
         If it exists, the entire `geoLocation` object is replaced with the new value.
         
         If the new value is set to null, it is ignored.
         
         If an empty `geoLocation` object `\{\}` is passed, it is deleted.
         
         With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
         *
         * If you would like to get a raw Response object use the other updateShopperContext function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
         * @param evaluateContextWithClientIp - Determines whether to evaluate the context using the provided `clientIp`.  This property is available with B2C Commerce version 24.7.
         - If `evaluateContextWithClientIp` is set to `true`:
         - The `clientIP` is saved and used in subsequent requests.
         
         - If `evaluateContextWithClientIp` is set to `false`:
         - The `clientIP` is not saved and will not be used in subsequent requests.
         
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type ShopperContext.
         *
         */
        updateShopperContext(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                usid: string;
                siteId?: string;
                evaluateContextWithClientIp?: boolean;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ShopperContext;
        }>): Promise<ShopperContext>;
        /**
         * Updates an existing shopper's context based on the Shopper JWT. If the shopper context exists, it's updated with the patch body.
         - If a new attribute that does not exist in the existing shopper context is present, it is added to the context.
         -If an attribute is already present in the existing shopper context, its value is replaced by the corresponding value from the new shopper context in the request body as follows:
         - `custom qualifiers` or `assignment qualifiers`:
         
         If the individual qualifier key exists, it is overwritten with the new value.
         
         If the value of the key is set to null, it is deleted from the existing shopper context.
         
         If an empty `custom qualifiers` or `assignment qualifiers` object `\{\}` is passed, the entire qualifier object is deleted.
         - `effectiveDateTime` or `sourceCode` or `clientIp`:
         
         If the new value is set to an empty string (\"\"), it is deleted from the existing shopper context.
         
         If the new value is set to null, it is ignored.
         
         If the new value is not empty or null, it overwrites the existing value.
         
         - `customerGroupIds`:
         
         If a list of `customerGroupIds` exists, it is replaced by the new list of customer group IDs from the request.
         
         If `customerGroupIds` is set to an empty array [], the existing list in the shopper context is deleted.
         
         - `geoLocation`:
         
         If it exists, the entire `geoLocation` object is replaced with the new value.
         
         If the new value is set to null, it is ignored.
         
         If an empty `geoLocation` object `\{\}` is passed, it is deleted.
         
         With B2C Commerce release 24.5, all endpoints in the Shopper context API will require the `siteId` parameter for new customers. This field is marked as optional for backward compatibility and will be changed to mandatory tentatively by January 2025.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifier of the site to which the request is being sent. With B2C Commerce release 24.5, all new implementations of Shopper Context require the `siteId` query parameter to be passed. Existing customers with Shopper Context implementations should start including `siteId` going forward. Starting July 31 2024, `siteId` will be required for all customers, and a bad request response code will be returned for requests without a `siteId`.
         * @param evaluateContextWithClientIp - Determines whether to evaluate the context using the provided `clientIp`.  This property is available with B2C Commerce version 24.7.
         - If `evaluateContextWithClientIp` is set to `true`:
         - The `clientIP` is saved and used in subsequent requests.
         
         - If `evaluateContextWithClientIp` is set to `false`:
         - The `clientIP` is not saved and will not be used in subsequent requests.
         
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext otherwise.
         *
         */
        updateShopperContext<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                usid: string;
                siteId?: string;
                evaluateContextWithClientIp?: boolean;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ShopperContext;
        }>, rawResponse?: T): Promise<T extends true ? Response : ShopperContext>;
    }
}
type CustomerAddress = {
    address1?: string;
    address2?: string;
    addressId: string;
    city?: string;
    companyName?: string;
    countryCode: string;
    creationDate?: any;
    firstName?: string;
    fullName?: string;
    jobTitle?: string;
    lastModified?: any;
    lastName: string;
    phone?: string;
    postBox?: string;
    postalCode?: string;
    preferred?: boolean;
    salutation?: string;
    secondName?: string;
    stateCode?: string;
    suffix?: string;
    suite?: string;
    title?: string;
} & {
    [key: string]: any;
};
type CustomerProductListResult = {
    limit: number;
    data: Array<CustomerProductList>;
    total: number;
} & {
    [key: string]: any;
};
type OptionValue = {
    default?: boolean;
    id: string;
    name?: string;
    price?: number;
} & {
    [key: string]: any;
};
type Master = {
    masterId: string;
    orderable?: boolean;
    price?: number;
    priceMax?: number;
    prices?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type OrderAddress$0 = {
    address1: string;
    address2?: string;
    city: string;
    companyName?: string;
    countryCode: string;
    firstName: string;
    fullName?: string;
    id?: string;
    jobTitle?: string;
    lastName: string;
    phone?: string;
    postBox?: string;
    postalCode: string;
    salutation?: string;
    secondName?: string;
    stateCode?: string;
    suffix?: string;
    suite?: string;
    title?: string;
} & {
    [key: string]: any;
};
type PublicProductListResult = {
    limit: number;
    data: Array<PublicProductListInfo>;
    total: number;
} & {
    [key: string]: any;
};
type BasketsResult = {
    baskets?: Array<Basket>;
    total: number;
} & {
    [key: string]: any;
};
type ResetPasswordRequest = {
    resetToken: string;
    login: string;
    newPassword: string;
} & {
    [key: string]: any;
};
type PaymentCard$0 = {
    cardType: string;
    creditCardExpired?: boolean;
    creditCardToken?: string;
    expirationMonth?: number;
    expirationYear?: number;
    holder?: string;
    issueNumber?: string;
    maskedNumber?: string;
    numberLastDigits?: string;
    validFromMonth?: number;
    validFromYear?: number;
} & {
    [key: string]: any;
};
type ShippingItem$0 = {
    adjustedTax: number;
    basePrice: number;
    itemId: string;
    itemText: string;
    price: number;
    priceAdjustments: Array<PriceAdjustment>;
    priceAfterItemDiscount: number;
    shipmentId: string;
    tax: number;
    taxBasis: number;
    taxClassId: string;
    taxRate: number;
} & {
    [key: string]: any;
};
type Discount$0 = {
    amount?: number;
    percentage?: number;
    priceBookId?: string;
    type: string;
} & {
    [key: string]: any;
};
type ResetPasswordToken = {
    login: string;
    email: string;
    resetToken: string;
    expiresInMinutes: number;
} & {
    [key: string]: any;
};
type CouponItem$0 = {
    code: string;
    couponItemId?: string;
    statusCode?: string;
    valid?: boolean;
} & {
    [key: string]: any;
};
type ShippingPromotion$0 = {
    calloutMsg: string;
    promotionId: string;
    promotionName: string;
} & {
    [key: string]: any;
};
type VariationAttribute = {
    id: string;
    name?: string;
    values?: Array<VariationAttributeValue>;
} & {
    [key: string]: any;
};
type ProductListShippingAddress = {
    addressId: string;
    city?: string;
    firstName?: string;
    lastName?: string;
} & {
    [key: string]: any;
};
type ProductItem$0 = {
    adjustedTax?: number;
    basePrice?: number;
    bonusDiscountLineItemId?: string;
    bonusProductLineItem?: boolean;
    bundledProductItems?: Array<ProductItem$0>;
    gift?: boolean;
    giftMessage?: string;
    inventoryId?: string;
    itemId?: string;
    itemText?: string;
    optionItems?: Array<OptionItem>;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment>;
    priceAfterItemDiscount?: number;
    priceAfterOrderDiscount?: number;
    productId?: string;
    productListItem?: ProductListItemReference;
    productName?: string;
    quantity: number;
    shipmentId?: string;
    shippingItemId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type CustomerProductListRegistrant = {
    email: string;
    firstName: string;
    lastName: string;
    role: string;
} & {
    [key: string]: any;
};
type PublicProductListInfo = {
    description?: string;
    id: string;
    name?: string;
    title: string;
    type: string;
} & {
    [key: string]: any;
};
type CustomerPaymentCardRequest = {
    cardType: string;
    creditCardToken?: string;
    expirationMonth: number;
    expirationYear: number;
    holder: string;
    issueNumber: string;
    number: string;
    validFromMonth: number;
    validFromYear: number;
} & {
    [key: string]: any;
};
type RecommendationType = {
    displayValue: string;
    value: number;
} & {
    [key: string]: any;
};
type OrderPaymentInstrument$0 = {
    amount: number;
    authorizationStatus: Status;
    bankRoutingNumber: string;
    maskedGiftCertificateCode: string;
    paymentBankAccount: PaymentBankAccount;
    paymentCard: PaymentCard$0;
    paymentInstrumentId: string;
    paymentMethodId: string;
} & {
    [key: string]: any;
};
type ProductType = {
    bundle: boolean;
    item: boolean;
    master: boolean;
    option: boolean;
    set: boolean;
    variant: boolean;
    variationGroup: boolean;
} & {
    [key: string]: any;
};
type PaymentBankAccount = {
    driversLicenseLastDigits?: string;
    driversLicenseStateCode?: string;
    holder?: string;
    maskedDriversLicense?: string;
    maskedNumber?: string;
    numberLastDigits?: string;
} & {
    [key: string]: any;
};
type Recommendation = {
    calloutMsg?: string;
    image?: Image;
    longDescription?: string;
    name?: string;
    recommendationType: RecommendationType;
    recommendedItemId?: string;
    recommendedItemLink?: string;
    shortDescription?: string;
} & {
    [key: string]: any;
};
type Variant = {
    orderable?: boolean;
    price?: number;
    productId: string;
    variationValues?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type BonusDiscountLineItem$0 = {
    bonusProducts: Array<ProductDetailsLink>;
    couponCode: string;
    id: string;
    maxBonusItems: number;
    promotionId: string;
} & {
    [key: string]: any;
};
type CustomerPaymentInstrument = {
    bankRoutingNumber?: string;
    creationDate?: any;
    lastModified?: any;
    maskedGiftCertificateCode?: string;
    paymentBankAccount?: PaymentBankAccount;
    paymentCard?: PaymentCard$0;
    paymentInstrumentId?: string;
    paymentMethodId?: string;
} & {
    [key: string]: any;
};
type Shipment$0 = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    gift?: boolean;
    giftMessage?: string;
    merchandizeTotalTax?: number;
    productSubTotal?: number;
    productTotal?: number;
    shipmentId?: string;
    shipmentNo?: string;
    shipmentTotal?: number;
    shippingAddress?: OrderAddress$0;
    shippingMethod?: ShippingMethod;
    shippingStatus: string;
    shippingTotal?: number;
    shippingTotalTax?: number;
    taxTotal?: number;
    trackingNumber?: string;
} & {
    [key: string]: any;
};
type CustomerInfo$0 = {
    customerId?: string;
    customerName?: string;
    customerNo: string;
    email: string;
} & {
    [key: string]: any;
};
type VariationGroup = {
    orderable: boolean;
    price: number;
    productId: string;
    variationValues: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type SimpleLink$0 = {
    link: string;
} & {
    [key: string]: any;
};
type PaymentBankAccountRequest = {
    driversLicense: string;
    driversLicenseStateCode: string;
    holder: string;
    number: string;
} & {
    [key: string]: any;
};
type PriceAdjustment$0 = {
    appliedDiscount: Discount$0;
    couponCode: string;
    createdBy: string;
    creationDate: any;
    custom: boolean;
    itemText: string;
    lastModified: any;
    manual: boolean;
    price: number;
    priceAdjustmentId: string;
    promotionId: string;
    promotionLink: string;
    reasonCode: string;
} & {
    [key: string]: any;
};
type PublicProductListItem = {
    id: string;
    priority: number;
    product?: Product;
    type: string;
} & {
    [key: string]: any;
};
type ProductDetailsLink$0 = {
    productDescription?: string;
    productId: string;
    productName?: string;
    title?: string;
} & {
    [key: string]: any;
};
type ProductLink = {
    sourceProductId: string;
    sourceProductLink: string;
    targetProductId: string;
    targetProductLink: string;
    type: string;
} & {
    [key: string]: any;
};
type OptionItem$0 = {
    adjustedTax?: number;
    basePrice?: number;
    bonusDiscountLineItemId?: string;
    bonusProductLineItem?: boolean;
    bundledProductItems?: Array<ProductItem$0>;
    gift?: boolean;
    giftMessage?: string;
    inventoryId?: string;
    itemId?: string;
    itemText?: string;
    optionId: string;
    optionItems?: Array<OptionItem$0>;
    optionValueId: string;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment$0>;
    priceAfterItemDiscount?: number;
    priceAfterOrderDiscount?: number;
    productId?: string;
    productListItem?: ProductListItemReference;
    productName?: string;
    quantity?: number;
    shipmentId?: string;
    shippingItemId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type ShippingMethod$0 = {
    description?: string;
    externalShippingMethod?: string;
    id: string;
    name?: string;
    price?: number;
    shippingPromotions?: Array<ShippingPromotion$0>;
} & {
    [key: string]: any;
};
type ProductListEvent = {
    city?: string;
    country?: string;
    date?: any;
    state?: string;
    type: string;
} & {
    [key: string]: any;
};
type PasswordChangeRequest = {
    currentPassword: string;
    password: string;
} & {
    [key: string]: any;
};
type Inventory = {
    ats?: number;
    backorderable?: boolean;
    id: string;
    inStockDate?: any;
    orderable?: boolean;
    preorderable?: boolean;
    stockLevel?: number;
} & {
    [key: string]: any;
};
type CustomerProductList = {
    coRegistrant?: CustomerProductListRegistrant;
    creationDate?: any;
    currentShippingAddressInfo?: CustomerAddressInfo;
    customerProductListItems?: Array<CustomerProductListItem>;
    description?: string;
    event?: ProductListEvent;
    id?: string;
    lastModified?: any;
    name?: string;
    postEventShippingAddressInfo?: CustomerAddressInfo;
    productListShippingAddress?: ProductListShippingAddress;
    public?: boolean;
    registrant?: CustomerProductListRegistrant;
    shippingAddressInfo?: CustomerAddressInfo;
    type?: string;
} & {
    [key: string]: any;
};
type Basket$0 = {
    adjustedMerchandizeTotalTax: number;
    adjustedShippingTotalTax: number;
    agentBasket: boolean;
    basketId: string;
    billingAddress?: OrderAddress$0;
    bonusDiscountLineItems?: Array<BonusDiscountLineItem$0>;
    channelType: string;
    couponItems?: Array<CouponItem$0>;
    creationDate: any;
    currency: string;
    customerInfo: CustomerInfo$0;
    giftCertificateItems?: Array<GiftCertificateItem>;
    groupedTaxItems?: Array<GroupedTaxItem>;
    inventoryReservationExpiry?: any;
    lastModified: any;
    merchandizeTotalTax: number;
    notes: SimpleLink$0;
    orderPriceAdjustments?: Array<PriceAdjustment$0>;
    orderTotal: number;
    paymentInstruments?: Array<OrderPaymentInstrument$0>;
    productItems?: Array<ProductItem$0>;
    productSubTotal: number;
    productTotal: number;
    shipments: Array<Shipment$0>;
    shippingItems: Array<ShippingItem$0>;
    shippingTotal: number;
    shippingTotalTax: number;
    sourceCode?: string;
    taxTotal: number;
    taxation: string;
    taxRoundedAtGroup?: boolean;
    temporaryBasket?: boolean;
} & {
    [key: string]: any;
};
type CustomerPaymentInstrumentRequest = {
    bankRoutingNumber?: string;
    giftCertificateCode?: string;
    paymentBankAccount?: PaymentBankAccountRequest;
    paymentCard?: CustomerPaymentCardRequest;
    paymentMethodId?: string;
} & {
    [key: string]: any;
};
type ImageGroup = {
    images: Array<Image>;
    variationAttributes?: Array<VariationAttribute>;
    viewType: string;
} & {
    [key: string]: any;
};
type CustomerRegistration = {
    customer: Customer;
    password: string;
} & {
    [key: string]: any;
};
type Customer = {
    addresses?: Array<CustomerAddress>;
    authType?: string;
    birthday?: any;
    companyName?: string;
    creationDate?: any;
    customerId?: string;
    customerNo?: string;
    currentPassword?: string;
    email?: string;
    enabled?: boolean;
    fax?: string;
    firstName?: string;
    gender?: number;
    hashedLogin?: string;
    jobTitle?: string;
    lastLoginTime?: any;
    lastModified?: any;
    lastName?: string;
    lastVisitTime?: any;
    login?: string;
    note?: string;
    paymentInstruments?: Array<CustomerPaymentInstrument>;
    phoneBusiness?: string;
    phoneHome?: string;
    phoneMobile?: string;
    preferredLocale?: string;
    previousLoginTime?: any;
    previousVisitTime?: any;
    salutation?: string;
    secondName?: string;
    suffix?: string;
    title?: string;
} & {
    [key: string]: any;
};
type PublicProductList = {
    coRegistrant?: ProductListRegistrant;
    creationDate?: any;
    description?: string;
    event?: ProductListEvent;
    id: string;
    lastModified?: any;
    name?: string;
    productListItems?: Array<PublicProductListItem>;
    productListShippingAddress?: ProductListShippingAddress;
    public: boolean;
    registrant?: ProductListRegistrant;
    type: string;
} & {
    [key: string]: any;
};
type Option = {
    description?: string;
    id: string;
    image?: string;
    name?: string;
    values?: Array<OptionValue>;
} & {
    [key: string]: any;
};
type CustomerOrderResult = {
    limit: number;
    data: Array<Order>;
    offset: number;
    total: number;
} & {
    [key: string]: any;
};
type CustomerExtProfileRequest = {
    authenticationProviderId: string;
    email?: string;
    externalId: string;
    firstName?: string;
    lastName?: string;
} & {
    [key: string]: any;
};
type GiftCertificateItem$0 = {
    amount: number;
    giftCertificateItemId?: string;
    message?: string;
    recipientEmail: string;
    recipientName?: string;
    senderName?: string;
    shipmentId?: string;
} & {
    [key: string]: any;
};
type CustomerExternalProfile = {
    customerId: string;
    authenticationProviderId: string;
    email?: string;
    externalId: string;
    firstName?: string;
    lastName?: string;
} & {
    [key: string]: any;
};
type CustomerAddressInfo = {
    addressId: string;
    title: string;
} & {
    [key: string]: any;
};
type ResetPasswordTokenRequest = {
    login: string;
} & {
    [key: string]: any;
};
type ProductListLink$0 = {
    description: string;
    link: string;
    name: string;
    public: boolean;
    title: string;
    type: string;
} & {
    [key: string]: any;
};
type GroupedTaxItem$0 = {
    taxRate?: number;
    taxValue?: number;
};
type ProductListRegistrant = {
    firstName: string;
    lastName: string;
    role: string;
} & {
    [key: string]: any;
};
type Order$0 = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    billingAddress?: OrderAddress$0;
    bonusDiscountLineItems?: Array<BonusDiscountLineItem$0>;
    channelType?: string;
    confirmationStatus: string;
    couponItems?: Array<CouponItem$0>;
    createdBy?: string;
    creationDate?: any;
    currency?: string;
    customerInfo?: CustomerInfo$0;
    customerName?: string;
    exportStatus: string;
    externalOrderStatus?: string;
    giftCertificateItems?: Array<GiftCertificateItem$0>;
    globalPartyId?: string;
    lastModified?: any;
    merchandizeTotalTax?: number;
    notes?: SimpleLink$0;
    orderNo?: string;
    orderPriceAdjustments?: Array<PriceAdjustment$0>;
    orderToken?: string;
    orderTotal?: number;
    paymentInstruments?: Array<OrderPaymentInstrument$0>;
    paymentStatus: string;
    productItems?: Array<ProductItem$0>;
    productSubTotal?: number;
    productTotal?: number;
    shipments?: Array<Shipment$0>;
    shippingItems?: Array<ShippingItem$0>;
    shippingStatus: string;
    shippingTotal?: number;
    shippingTotalTax?: number;
    siteId?: string;
    sourceCode?: string;
    status: string;
    taxTotal?: number;
    taxation?: string;
} & {
    [key: string]: any;
};
type Product = {
    brand?: string;
    bundledProducts?: Array<BundledProduct>;
    currency?: string;
    ean?: string;
    fetchDate?: number;
    id: string;
    imageGroups?: Array<ImageGroup>;
    inventories?: Array<Inventory>;
    inventory?: Inventory;
    longDescription?: string;
    manufacturerName?: string;
    manufacturerSku?: string;
    master?: Master;
    minOrderQuantity?: number;
    name?: string;
    options?: Array<Option>;
    pageDescription?: string;
    pageKeywords?: string;
    pageTitle?: string;
    price?: number;
    priceMax?: number;
    prices?: {} & {
        [key: string]: any;
    };
    primaryCategoryId?: string;
    productLinks?: Array<ProductLink>;
    productPromotions?: Array<ProductPromotion>;
    recommendations?: Array<Recommendation>;
    setProducts?: Array<Product>;
    shortDescription?: string;
    stepQuantity?: number;
    type?: ProductType;
    unit?: string;
    upc?: string;
    validFrom?: any;
    validTo?: any;
    variants?: Array<Variant>;
    variationAttributes?: Array<VariationAttribute>;
    variationGroups?: Array<VariationGroup>;
    variationValues?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type Image = {
    alt?: string;
    disBaseLink?: string;
    link: string;
    title?: string;
} & {
    [key: string]: any;
};
type VariationAttributeValue = {
    description?: string;
    image?: Image;
    imageSwatch?: Image;
    name?: string;
    orderable?: boolean;
    value: string;
} & {
    [key: string]: any;
};
type ProductPromotion = {
    calloutMsg: string;
    promotionId: string;
    promotionalPrice: number;
} & {
    [key: string]: any;
};
type BundledProduct = {
    id: string;
    product: Product;
    quantity: number;
} & {
    [key: string]: any;
};
type Status$0 = {
    code: string;
    message: string;
    status: number;
} & {
    [key: string]: any;
};
type CustomerProductListItem = {
    id?: string;
    priority: number;
    product?: Product;
    productId?: string;
    public: boolean;
    purchasedQuantity?: number;
    quantity: number;
    type?: string;
} & {
    [key: string]: any;
};
type ProductListItemReference$0 = {
    id: string;
    priority?: number;
    productList?: ProductListLink$0;
    public?: boolean;
    purchasedQuantity?: number;
    quantity?: number;
    type?: string;
} & {
    [key: string]: any;
};
type RangeFilter$1 = {
    [key: string]: any;
};
type BoolFilter$1 = {
    filters?: Array<Filter$0>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$1 = {} & {
    [key: string]: any;
};
type FilteredQuery$1 = {
    filter: Filter$0;
    query: Query$0;
} & {
    [key: string]: any;
};
type QueryFilter$1 = {
    query: Query$0;
} & {
    [key: string]: any;
};
type Query$1 = {
    boolQuery?: BoolQuery$0;
    filteredQuery?: FilteredQuery$1;
    matchAllQuery?: MatchAllQuery$1;
    nestedQuery?: NestedQuery$0;
    termQuery?: TermQuery$0;
    textQuery?: TextQuery$0;
} & {
    [key: string]: any;
};
type TermQuery$1 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$1 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$1 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$1 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$1 = {
    must?: Array<Query$1>;
    mustNot?: Array<Query$1>;
    should?: Array<Query$1>;
} & {
    [key: string]: any;
};
type NestedQuery$1 = {
    path: string;
    query: Query$1;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$1 = {
    boolFilter?: BoolFilter$1;
    queryFilter?: QueryFilter$1;
    range2Filter?: Range2Filter$1;
    rangeFilter?: RangeFilter$1;
    termFilter?: TermFilter$1;
} & {
    [key: string]: any;
};
type Sort$1 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type L10nString$1 = {} & {
    [key: string]: any;
};
type PropertyValueDefinition$1 = {
    description: L10nString$1;
    displayValue: L10nString$1;
    id: string;
    position?: number;
    value: string;
};
/**
 * All path parameters that are used by at least one ShopperCustomers method.
 */
type ShopperCustomersPathParameters = {
    organizationId?: string;
    customerId?: string;
    addressName?: string;
    paymentInstrumentId?: string;
    listId?: string;
    itemId?: string;
};
/**
 * All query parameters that are used by at least one ShopperCustomers method.
 */
type ShopperCustomersQueryParameters = {
    siteId?: string;
    externalId?: string;
    authenticationProviderId?: string;
    crossSites?: boolean;
    from?: string;
    until?: string;
    status?: string;
    offset?: any;
    limit?: number;
    email?: string;
    firstName?: string;
    lastName?: string;
};
/**
 * All parameters that are used by ShopperCustomers.
 */
type ShopperCustomersParameters = ShopperCustomersPathParameters & BaseUriParameters & ShopperCustomersQueryParameters;
/**
 * [Shopper Customers](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-customers:Summary)
 * ==================================
 *
 * *Allow customers to manage their own profiles and product lists.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperCustomers } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperCustomersClient = new ShopperCustomers(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 0.0.50<br />
 * Last Updated: <br />
 * </span>
 *
 *
 */
declare class ShopperCustomers<ConfigParameters extends ShopperCustomersParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/customer/shopper-customers/{version}";
    static readonly apiPaths: {
        registerCustomer: string;
        resetPassword: string;
        getResetPasswordToken: string;
        registerExternalProfile: string;
        getExternalProfile: string;
        getCustomer: string;
        updateCustomer: string;
        createCustomerAddress: string;
        getCustomerAddress: string;
        removeCustomerAddress: string;
        updateCustomerAddress: string;
        getCustomerBaskets: string;
        getCustomerOrders: string;
        updateCustomerPassword: string;
        createCustomerPaymentInstrument: string;
        deleteCustomerPaymentInstrument: string;
        getCustomerPaymentInstrument: string;
        getCustomerProductLists: string;
        createCustomerProductList: string;
        deleteCustomerProductList: string;
        getCustomerProductList: string;
        updateCustomerProductList: string;
        createCustomerProductListItem: string;
        deleteCustomerProductListItem: string;
        getCustomerProductListItem: string;
        updateCustomerProductListItem: string;
        getPublicProductListsBySearchTerm: string;
        getPublicProductList: string;
        getProductListItem: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly registerCustomer: readonly [
            "organizationId",
            "siteId"
        ];
        readonly registerCustomerRequired: readonly [
            "organizationId",
            "siteId"
        ];
        readonly resetPassword: readonly [
            "organizationId",
            "siteId"
        ];
        readonly resetPasswordRequired: readonly [
            "organizationId",
            "siteId"
        ];
        readonly getResetPasswordToken: readonly [
            "organizationId",
            "siteId"
        ];
        readonly getResetPasswordTokenRequired: readonly [
            "organizationId",
            "siteId"
        ];
        readonly registerExternalProfile: readonly [
            "organizationId",
            "siteId"
        ];
        readonly registerExternalProfileRequired: readonly [
            "organizationId",
            "siteId"
        ];
        readonly getExternalProfile: readonly [
            "organizationId",
            "externalId",
            "authenticationProviderId",
            "siteId"
        ];
        readonly getExternalProfileRequired: readonly [
            "organizationId",
            "externalId",
            "authenticationProviderId",
            "siteId"
        ];
        readonly getCustomer: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly getCustomerRequired: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly updateCustomer: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly updateCustomerRequired: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly createCustomerAddress: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly createCustomerAddressRequired: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly getCustomerAddress: readonly [
            "organizationId",
            "customerId",
            "addressName",
            "siteId"
        ];
        readonly getCustomerAddressRequired: readonly [
            "organizationId",
            "customerId",
            "addressName",
            "siteId"
        ];
        readonly removeCustomerAddress: readonly [
            "organizationId",
            "customerId",
            "addressName",
            "siteId"
        ];
        readonly removeCustomerAddressRequired: readonly [
            "organizationId",
            "customerId",
            "addressName",
            "siteId"
        ];
        readonly updateCustomerAddress: readonly [
            "organizationId",
            "customerId",
            "addressName",
            "siteId"
        ];
        readonly updateCustomerAddressRequired: readonly [
            "organizationId",
            "customerId",
            "addressName",
            "siteId"
        ];
        readonly getCustomerBaskets: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly getCustomerBasketsRequired: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly getCustomerOrders: readonly [
            "organizationId",
            "customerId",
            "crossSites",
            "from",
            "until",
            "status",
            "siteId",
            "offset",
            "limit"
        ];
        readonly getCustomerOrdersRequired: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly updateCustomerPassword: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly updateCustomerPasswordRequired: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly createCustomerPaymentInstrument: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly createCustomerPaymentInstrumentRequired: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly deleteCustomerPaymentInstrument: readonly [
            "organizationId",
            "customerId",
            "paymentInstrumentId",
            "siteId"
        ];
        readonly deleteCustomerPaymentInstrumentRequired: readonly [
            "organizationId",
            "customerId",
            "paymentInstrumentId",
            "siteId"
        ];
        readonly getCustomerPaymentInstrument: readonly [
            "organizationId",
            "customerId",
            "paymentInstrumentId",
            "siteId"
        ];
        readonly getCustomerPaymentInstrumentRequired: readonly [
            "organizationId",
            "customerId",
            "paymentInstrumentId",
            "siteId"
        ];
        readonly getCustomerProductLists: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly getCustomerProductListsRequired: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly createCustomerProductList: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly createCustomerProductListRequired: readonly [
            "organizationId",
            "customerId",
            "siteId"
        ];
        readonly deleteCustomerProductList: readonly [
            "organizationId",
            "customerId",
            "listId",
            "siteId"
        ];
        readonly deleteCustomerProductListRequired: readonly [
            "organizationId",
            "customerId",
            "listId",
            "siteId"
        ];
        readonly getCustomerProductList: readonly [
            "organizationId",
            "customerId",
            "listId",
            "siteId"
        ];
        readonly getCustomerProductListRequired: readonly [
            "organizationId",
            "customerId",
            "listId",
            "siteId"
        ];
        readonly updateCustomerProductList: readonly [
            "organizationId",
            "customerId",
            "listId",
            "siteId"
        ];
        readonly updateCustomerProductListRequired: readonly [
            "organizationId",
            "customerId",
            "listId",
            "siteId"
        ];
        readonly createCustomerProductListItem: readonly [
            "organizationId",
            "customerId",
            "listId",
            "siteId"
        ];
        readonly createCustomerProductListItemRequired: readonly [
            "organizationId",
            "customerId",
            "listId",
            "siteId"
        ];
        readonly deleteCustomerProductListItem: readonly [
            "organizationId",
            "customerId",
            "listId",
            "itemId",
            "siteId"
        ];
        readonly deleteCustomerProductListItemRequired: readonly [
            "organizationId",
            "customerId",
            "listId",
            "itemId",
            "siteId"
        ];
        readonly getCustomerProductListItem: readonly [
            "organizationId",
            "customerId",
            "listId",
            "itemId",
            "siteId"
        ];
        readonly getCustomerProductListItemRequired: readonly [
            "organizationId",
            "customerId",
            "listId",
            "itemId",
            "siteId"
        ];
        readonly updateCustomerProductListItem: readonly [
            "organizationId",
            "customerId",
            "listId",
            "itemId",
            "siteId"
        ];
        readonly updateCustomerProductListItemRequired: readonly [
            "organizationId",
            "customerId",
            "listId",
            "itemId",
            "siteId"
        ];
        readonly getPublicProductListsBySearchTerm: readonly [
            "organizationId",
            "email",
            "firstName",
            "lastName",
            "siteId"
        ];
        readonly getPublicProductListsBySearchTermRequired: readonly [
            "organizationId",
            "siteId"
        ];
        readonly getPublicProductList: readonly [
            "organizationId",
            "listId",
            "siteId"
        ];
        readonly getPublicProductListRequired: readonly [
            "organizationId",
            "listId",
            "siteId"
        ];
        readonly getProductListItem: readonly [
            "organizationId",
            "listId",
            "itemId",
            "siteId"
        ];
        readonly getProductListItemRequired: readonly [
            "organizationId",
            "listId",
            "itemId",
            "siteId"
        ];
    };
    /**
     * Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\", or from the Shopper Login (SLAS) API. The return type object for this endpoint is a common customer object shared by multiple Shopper Customer endpoints. In this case, all customer object details are returned, but attributes that are not included in the response, although they might be part of the customer object, are ignored. For example, although address information is included in the customer object, it is not displayed in the response for this endpoint and is ignored.
     *
     * If you would like to get a raw Response object use the other registerCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Customer.
     *
     */
    registerCustomer(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerRegistration;
    }>): Promise<Customer>;
    /**
     * Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\", or from the Shopper Login (SLAS) API. The return type object for this endpoint is a common customer object shared by multiple Shopper Customer endpoints. In this case, all customer object details are returned, but attributes that are not included in the response, although they might be part of the customer object, are ignored. For example, although address information is included in the customer object, it is not displayed in the response for this endpoint and is ignored.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
     *
     */
    registerCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerRegistration;
    }>, rawResponse?: T): Promise<T extends true ? Response : Customer>;
    /**
     * Reset customer password, after obtaining a reset token. This is the second step in the reset customer password flow, where a customer password is reset by providing the new credentials along with a reset token. This call should be preceded by a call to the /create-reset-token endpoint.
     *
     * If you would like to get a raw Response object use the other resetPassword function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    resetPassword(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ResetPasswordRequest;
    }>): Promise<void>;
    /**
     * Reset customer password, after obtaining a reset token. This is the second step in the reset customer password flow, where a customer password is reset by providing the new credentials along with a reset token. This call should be preceded by a call to the /create-reset-token endpoint.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    resetPassword<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ResetPasswordRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Get reset password token. This is the first step in the reset customer password flow, where a password reset token is requested for future use to reset a customer password. This call should be followed by a call to the /reset endpoint.
     *
     * If you would like to get a raw Response object use the other getResetPasswordToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type ResetPasswordToken.
     *
     */
    getResetPasswordToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ResetPasswordTokenRequest;
    }>): Promise<ResetPasswordToken>;
    /**
     * Get reset password token. This is the first step in the reset customer password flow, where a password reset token is requested for future use to reset a customer password. This call should be followed by a call to the /reset endpoint.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ResetPasswordToken otherwise.
     *
     */
    getResetPasswordToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ResetPasswordTokenRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : ResetPasswordToken>;
    /**
     * Registers a new external profile for a customer. This endpoint accepts a guest customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other registerExternalProfile function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerExternalProfile.
     *
     */
    registerExternalProfile(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerExtProfileRequest;
    }>): Promise<CustomerExternalProfile>;
    /**
     * Registers a new external profile for a customer. This endpoint accepts a guest customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerExternalProfile otherwise.
     *
     */
    registerExternalProfile<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerExtProfileRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerExternalProfile>;
    /**
     * Gets the new external profile for a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other getExternalProfile function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param externalId - The External ID of the customer.
     * @param authenticationProviderId - The authentication Provider Id.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerExternalProfile.
     *
     */
    getExternalProfile(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            externalId: string;
            authenticationProviderId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerExternalProfile>;
    /**
     * Gets the new external profile for a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param externalId - The External ID of the customer.
     * @param authenticationProviderId - The authentication Provider Id.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerExternalProfile otherwise.
     *
     */
    getExternalProfile<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            externalId: string;
            authenticationProviderId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerExternalProfile>;
    /**
     * Gets a customer with all existing addresses and payment instruments associated with the requested customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other getCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Customer.
     *
     */
    getCustomer(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Customer>;
    /**
     * Gets a customer with all existing addresses and payment instruments associated with the requested customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
     *
     */
    getCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Customer>;
    /**
     * Updates a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other updateCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Customer.
     *
     */
    updateCustomer(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Customer;
    }>): Promise<Customer>;
    /**
     * Updates a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
     *
     */
    updateCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Customer;
    }>, rawResponse?: T): Promise<T extends true ? Response : Customer>;
    /**
     * Creates a new address with the given name for the given customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other createCustomerAddress function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerAddress.
     *
     */
    createCustomerAddress(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerAddress;
    }>): Promise<CustomerAddress>;
    /**
     * Creates a new address with the given name for the given customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
     *
     */
    createCustomerAddress<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerAddress;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerAddress>;
    /**
     * Retrieves a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other getCustomerAddress function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerAddress.
     *
     */
    getCustomerAddress(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerAddress>;
    /**
     * Retrieves a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
     *
     */
    getCustomerAddress<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerAddress>;
    /**
     * Deletes a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other removeCustomerAddress function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    removeCustomerAddress(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Deletes a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    removeCustomerAddress<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Updates a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other updateCustomerAddress function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerAddress.
     *
     */
    updateCustomerAddress(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerAddress;
    }>): Promise<CustomerAddress>;
    /**
     * Updates a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
     *
     */
    updateCustomerAddress<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerAddress;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerAddress>;
    /**
     * Gets the baskets of a customer. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * If you would like to get a raw Response object use the other getCustomerBaskets function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type BasketsResult.
     *
     */
    getCustomerBaskets(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<BasketsResult>;
    /**
     * Gets the baskets of a customer. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type BasketsResult otherwise.
     *
     */
    getCustomerBaskets<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : BasketsResult>;
    /**
     * Returns a pageable list of all customer's orders. The default page size is 10. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * If you would like to get a raw Response object use the other getCustomerOrders function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param crossSites - The flag indicating whether all sites should be searched. This flag is ignored unless a valid User / Agent is present with a trusted agent on behalf (TAOB) token. Without a TAOB token, only the customer's orders placed on the site specified by siteId are returned.
     * @param from -
     * @param until -
     * @param status -
     * @param siteId -
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 10.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerOrderResult.
     *
     */
    getCustomerOrders(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            crossSites?: boolean;
            from?: string;
            until?: string;
            status?: string;
            siteId: string;
            offset?: any;
            limit?: number;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerOrderResult>;
    /**
     * Returns a pageable list of all customer's orders. The default page size is 10. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param crossSites - The flag indicating whether all sites should be searched. This flag is ignored unless a valid User / Agent is present with a trusted agent on behalf (TAOB) token. Without a TAOB token, only the customer's orders placed on the site specified by siteId are returned.
     * @param from -
     * @param until -
     * @param status -
     * @param siteId -
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 10.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerOrderResult otherwise.
     *
     */
    getCustomerOrders<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            crossSites?: boolean;
            from?: string;
            until?: string;
            status?: string;
            siteId: string;
            offset?: any;
            limit?: number;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerOrderResult>;
    /**
     * Updates the customer's password. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other updateCustomerPassword function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    updateCustomerPassword(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordChangeRequest;
    }>): Promise<void>;
    /**
     * Updates the customer's password. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    updateCustomerPassword<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordChangeRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Adds a payment instrument to the customer information. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other createCustomerPaymentInstrument function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerPaymentInstrument.
     *
     */
    createCustomerPaymentInstrument(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerPaymentInstrumentRequest;
    }>): Promise<CustomerPaymentInstrument>;
    /**
     * Adds a payment instrument to the customer information. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerPaymentInstrument otherwise.
     *
     */
    createCustomerPaymentInstrument<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerPaymentInstrumentRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerPaymentInstrument>;
    /**
     * Deletes a customer's payment instrument. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other deleteCustomerPaymentInstrument function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    deleteCustomerPaymentInstrument(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            paymentInstrumentId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Deletes a customer's payment instrument. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    deleteCustomerPaymentInstrument<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            paymentInstrumentId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Retrieves a customer's payment instrument by its ID. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * If you would like to get a raw Response object use the other getCustomerPaymentInstrument function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerPaymentInstrument.
     *
     */
    getCustomerPaymentInstrument(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            paymentInstrumentId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerPaymentInstrument>;
    /**
     * Retrieves a customer's payment instrument by its ID. This endpoint accepts a registered customer ShopperToken (JWT) only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerPaymentInstrument otherwise.
     *
     */
    getCustomerPaymentInstrument<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            paymentInstrumentId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerPaymentInstrument>;
    /**
     * Returns all customer product lists. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * If you would like to get a raw Response object use the other getCustomerProductLists function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerProductListResult.
     *
     */
    getCustomerProductLists(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerProductListResult>;
    /**
     * Returns all customer product lists. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListResult otherwise.
     *
     */
    getCustomerProductLists<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListResult>;
    /**
     * Creates a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * If you would like to get a raw Response object use the other createCustomerProductList function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerProductList.
     *
     */
    createCustomerProductList(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductList;
    }>): Promise<CustomerProductList>;
    /**
     * Creates a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
     *
     */
    createCustomerProductList<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductList;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductList>;
    /**
     * Deletes a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer  ShopperToken.
     *
     * If you would like to get a raw Response object use the other deleteCustomerProductList function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    deleteCustomerProductList(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Deletes a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer  ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    deleteCustomerProductList<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Returns a customer product list of the given customer and the items in the list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * If you would like to get a raw Response object use the other getCustomerProductList function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerProductList.
     *
     */
    getCustomerProductList(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerProductList>;
    /**
     * Returns a customer product list of the given customer and the items in the list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
     *
     */
    getCustomerProductList<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductList>;
    /**
     * Changes a product list. Changeable properties are the name, description, and if the list is public. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * If you would like to get a raw Response object use the other updateCustomerProductList function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerProductList.
     *
     */
    updateCustomerProductList(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductList;
    }>): Promise<CustomerProductList>;
    /**
     * Changes a product list. Changeable properties are the name, description, and if the list is public. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
     *
     */
    updateCustomerProductList<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductList;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductList>;
    /**
     * Adds an item to the customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     
     Considered values from the request body are:
     
     - `type` → The type of the item to be added to the customer's product. Must be a valid type. Mandatory.
     list.
     - `priority` → The priority of the item to be added to the customer's product list.
     - `public` → The flag that determines whether the item to be added to the customer's product list is public.
     - `product_id` → The ID (SKU) of the product related to the item to be added to the customer's product list. A valid product ID, used for product item type only. Must be a valid product ID; otherwise, a `ProductListProductIdMissingException` or `ProductListProductNotFoundException` is thrown. Mandatory when item type is `product`.
     - `quantity` → Used for product item type only. This is the quantity of the item to be added to the customer's product list.
     
     You can also use a custom property of the form `c_\<CUSTOM_NAME\>`. The custom property must correspond to a custom attribute (`\<CUSTOM_NAME\>`) that is defined for `ProductListItem`. The value of this property must be valid for the type of custom attribute defined for `ProductListItem`.
     *
     * If you would like to get a raw Response object use the other createCustomerProductListItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerProductListItem.
     *
     */
    createCustomerProductListItem(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductListItem;
    }>): Promise<CustomerProductListItem>;
    /**
     * Adds an item to the customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     
     Considered values from the request body are:
     
     - `type` → The type of the item to be added to the customer's product. Must be a valid type. Mandatory.
     list.
     - `priority` → The priority of the item to be added to the customer's product list.
     - `public` → The flag that determines whether the item to be added to the customer's product list is public.
     - `product_id` → The ID (SKU) of the product related to the item to be added to the customer's product list. A valid product ID, used for product item type only. Must be a valid product ID; otherwise, a `ProductListProductIdMissingException` or `ProductListProductNotFoundException` is thrown. Mandatory when item type is `product`.
     - `quantity` → Used for product item type only. This is the quantity of the item to be added to the customer's product list.
     
     You can also use a custom property of the form `c_\<CUSTOM_NAME\>`. The custom property must correspond to a custom attribute (`\<CUSTOM_NAME\>`) that is defined for `ProductListItem`. The value of this property must be valid for the type of custom attribute defined for `ProductListItem`.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
     *
     */
    createCustomerProductListItem<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductListItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListItem>;
    /**
     * Removes an item from a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * If you would like to get a raw Response object use the other deleteCustomerProductListItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    deleteCustomerProductListItem(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Removes an item from a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    deleteCustomerProductListItem<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Returns an item of a customer product list and the actual product details like image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * If you would like to get a raw Response object use the other getCustomerProductListItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerProductListItem.
     *
     */
    getCustomerProductListItem(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerProductListItem>;
    /**
     * Returns an item of a customer product list and the actual product details like image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
     *
     */
    getCustomerProductListItem<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListItem>;
    /**
     * Updates an item of a customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     Considered values from the request body are:
     
     priority: This is the priority of the customer's product list item.
     public: This is the flag whether the customer's product list item is public.
     quantity: This is the quantity of
     the customer's product list item. Used for product item type only.
     custom properties in the form c_\<CUSTOM_NAME\>: The custom property
     must correspond to a custom attribute (\<CUSTOM_NAME\>) defined for ProductListItem.
     The value of this property must be valid for the type of custom attribute defined for ProductListItem.
     *
     * If you would like to get a raw Response object use the other updateCustomerProductListItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerProductListItem.
     *
     */
    updateCustomerProductListItem(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductListItem;
    }>): Promise<CustomerProductListItem>;
    /**
     * Updates an item of a customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     Considered values from the request body are:
     
     priority: This is the priority of the customer's product list item.
     public: This is the flag whether the customer's product list item is public.
     quantity: This is the quantity of
     the customer's product list item. Used for product item type only.
     custom properties in the form c_\<CUSTOM_NAME\>: The custom property
     must correspond to a custom attribute (\<CUSTOM_NAME\>) defined for ProductListItem.
     The value of this property must be valid for the type of custom attribute defined for ProductListItem.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
     *
     */
    updateCustomerProductListItem<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductListItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListItem>;
    /**
     * Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name). This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * If you would like to get a raw Response object use the other getPublicProductListsBySearchTerm function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param email - The email address of the customer the product lists belong to.
     * @param firstName - The first name of the customer the product lists belong to.
     * @param lastName - The last name of the customer the product lists belong to.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PublicProductListResult.
     *
     */
    getPublicProductListsBySearchTerm(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PublicProductListResult>;
    /**
     * Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name). This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param email - The email address of the customer the product lists belong to.
     * @param firstName - The first name of the customer the product lists belong to.
     * @param lastName - The last name of the customer the product lists belong to.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductListResult otherwise.
     *
     */
    getPublicProductListsBySearchTerm<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PublicProductListResult>;
    /**
     * Retrieves a public product list by ID and the items under that product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * If you would like to get a raw Response object use the other getPublicProductList function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param listId - The ID of the list.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PublicProductList.
     *
     */
    getPublicProductList(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            listId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PublicProductList>;
    /**
     * Retrieves a public product list by ID and the items under that product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param listId - The ID of the list.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductList otherwise.
     *
     */
    getPublicProductList<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            listId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PublicProductList>;
    /**
     * Retrieves an item from a public product list and the actual product details like product, image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * If you would like to get a raw Response object use the other getProductListItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param listId - The ID of the list.
     * @param itemId - The ID of the item.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PublicProductListItem.
     *
     */
    getProductListItem(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            listId: string;
            itemId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PublicProductListItem>;
    /**
     * Retrieves an item from a public product list and the actual product details like product, image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param listId - The ID of the list.
     * @param itemId - The ID of the item.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductListItem otherwise.
     *
     */
    getProductListItem<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            listId: string;
            itemId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PublicProductListItem>;
}
declare namespace ShopperCustomersTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type CustomerAddress = {
        address1?: string;
        address2?: string;
        addressId: string;
        city?: string;
        companyName?: string;
        countryCode: string;
        creationDate?: any;
        firstName?: string;
        fullName?: string;
        jobTitle?: string;
        lastModified?: any;
        lastName: string;
        phone?: string;
        postBox?: string;
        postalCode?: string;
        preferred?: boolean;
        salutation?: string;
        secondName?: string;
        stateCode?: string;
        suffix?: string;
        suite?: string;
        title?: string;
    } & {
        [key: string]: any;
    };
    type CustomerProductListResult = {
        limit: number;
        data: Array<CustomerProductList>;
        total: number;
    } & {
        [key: string]: any;
    };
    type CustomerProductListItemPurchase = {
        id: string;
        orderNo: string;
        productListItemId: string;
        purchaserName: string;
        quantity: number;
    } & {
        [key: string]: any;
    };
    type OptionValue = {
        default?: boolean;
        id: string;
        name?: string;
        price?: number;
    } & {
        [key: string]: any;
    };
    type Master = {
        masterId: string;
        orderable?: boolean;
        price?: number;
        priceMax?: number;
        prices?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type OrderAddress = {
        address1: string;
        address2?: string;
        city: string;
        companyName?: string;
        countryCode: string;
        firstName: string;
        fullName?: string;
        id?: string;
        jobTitle?: string;
        lastName: string;
        phone?: string;
        postBox?: string;
        postalCode: string;
        salutation?: string;
        secondName?: string;
        stateCode?: string;
        suffix?: string;
        suite?: string;
        title?: string;
    } & {
        [key: string]: any;
    };
    type PublicProductListResult = {
        limit: number;
        data: Array<PublicProductListInfo>;
        total: number;
    } & {
        [key: string]: any;
    };
    type BasketsResult = {
        baskets?: Array<Basket$0>;
        total: number;
    } & {
        [key: string]: any;
    };
    type TrustedSystemAuthRequest = {
        clientId: string;
        login: string;
    } & {
        [key: string]: any;
    };
    type ResetPasswordRequest = {
        resetToken: string;
        login: string;
        newPassword: string;
    } & {
        [key: string]: any;
    };
    type PaymentCard = {
        cardType: string;
        creditCardExpired?: boolean;
        creditCardToken?: string;
        expirationMonth?: number;
        expirationYear?: number;
        holder?: string;
        issueNumber?: string;
        maskedNumber?: string;
        numberLastDigits?: string;
        validFromMonth?: number;
        validFromYear?: number;
    } & {
        [key: string]: any;
    };
    type ShippingItem = {
        adjustedTax: number;
        basePrice: number;
        itemId: string;
        itemText: string;
        price: number;
        priceAdjustments: Array<PriceAdjustment$0>;
        priceAfterItemDiscount: number;
        shipmentId: string;
        tax: number;
        taxBasis: number;
        taxClassId: string;
        taxRate: number;
    } & {
        [key: string]: any;
    };
    type Discount = {
        amount?: number;
        percentage?: number;
        priceBookId?: string;
        type: string;
    } & {
        [key: string]: any;
    };
    type ResetPasswordToken = {
        login: string;
        email: string;
        resetToken: string;
        expiresInMinutes: number;
    } & {
        [key: string]: any;
    };
    type CouponItem = {
        code: string;
        couponItemId?: string;
        statusCode?: string;
        valid?: boolean;
    } & {
        [key: string]: any;
    };
    type ShippingPromotion = {
        calloutMsg: string;
        promotionId: string;
        promotionName: string;
    } & {
        [key: string]: any;
    };
    type VariationAttribute = {
        id: string;
        name?: string;
        values?: Array<VariationAttributeValue>;
    } & {
        [key: string]: any;
    };
    type ProductListShippingAddress = {
        addressId: string;
        city?: string;
        firstName?: string;
        lastName?: string;
    } & {
        [key: string]: any;
    };
    type ProductItem = {
        adjustedTax?: number;
        basePrice?: number;
        bonusDiscountLineItemId?: string;
        bonusProductLineItem?: boolean;
        bundledProductItems?: Array<ProductItem>;
        gift?: boolean;
        giftMessage?: string;
        inventoryId?: string;
        itemId?: string;
        itemText?: string;
        optionItems?: Array<OptionItem$0>;
        price?: number;
        priceAdjustments?: Array<PriceAdjustment$0>;
        priceAfterItemDiscount?: number;
        priceAfterOrderDiscount?: number;
        productId?: string;
        productListItem?: ProductListItemReference$0;
        productName?: string;
        quantity: number;
        shipmentId?: string;
        shippingItemId?: string;
        tax?: number;
        taxBasis?: number;
        taxClassId?: string;
        taxRate?: number;
    } & {
        [key: string]: any;
    };
    type CustomerProductListRegistrant = {
        email: string;
        firstName: string;
        lastName: string;
        role: string;
    } & {
        [key: string]: any;
    };
    type PublicProductListInfo = {
        description?: string;
        id: string;
        name?: string;
        title: string;
        type: string;
    } & {
        [key: string]: any;
    };
    type CustomerPaymentCardRequest = {
        cardType: string;
        creditCardToken?: string;
        expirationMonth: number;
        expirationYear: number;
        holder: string;
        issueNumber: string;
        number: string;
        validFromMonth: number;
        validFromYear: number;
    } & {
        [key: string]: any;
    };
    type RecommendationType = {
        displayValue: string;
        value: number;
    } & {
        [key: string]: any;
    };
    type OrderPaymentInstrument = {
        amount: number;
        authorizationStatus: Status$0;
        bankRoutingNumber: string;
        maskedGiftCertificateCode: string;
        paymentBankAccount: PaymentBankAccount;
        paymentCard: PaymentCard;
        paymentInstrumentId: string;
        paymentMethodId: string;
    } & {
        [key: string]: any;
    };
    type ProductType = {
        bundle: boolean;
        item: boolean;
        master: boolean;
        option: boolean;
        set: boolean;
        variant: boolean;
        variationGroup: boolean;
    } & {
        [key: string]: any;
    };
    type PaymentBankAccount = {
        driversLicenseLastDigits?: string;
        driversLicenseStateCode?: string;
        holder?: string;
        maskedDriversLicense?: string;
        maskedNumber?: string;
        numberLastDigits?: string;
    } & {
        [key: string]: any;
    };
    type Recommendation = {
        calloutMsg?: string;
        image?: Image;
        longDescription?: string;
        name?: string;
        recommendationType: RecommendationType;
        recommendedItemId?: string;
        recommendedItemLink?: string;
        shortDescription?: string;
    } & {
        [key: string]: any;
    };
    type Variant = {
        orderable?: boolean;
        price?: number;
        productId: string;
        variationValues?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type BonusDiscountLineItem = {
        bonusProducts: Array<ProductDetailsLink$0>;
        couponCode: string;
        id: string;
        maxBonusItems: number;
        promotionId: string;
    } & {
        [key: string]: any;
    };
    type CustomerPaymentInstrument = {
        bankRoutingNumber?: string;
        creationDate?: any;
        lastModified?: any;
        maskedGiftCertificateCode?: string;
        paymentBankAccount?: PaymentBankAccount;
        paymentCard?: PaymentCard;
        paymentInstrumentId?: string;
        paymentMethodId?: string;
    } & {
        [key: string]: any;
    };
    type Shipment = {
        adjustedMerchandizeTotalTax?: number;
        adjustedShippingTotalTax?: number;
        gift?: boolean;
        giftMessage?: string;
        merchandizeTotalTax?: number;
        productSubTotal?: number;
        productTotal?: number;
        shipmentId?: string;
        shipmentNo?: string;
        shipmentTotal?: number;
        shippingAddress?: OrderAddress;
        shippingMethod?: ShippingMethod$0;
        shippingStatus: string;
        shippingTotal?: number;
        shippingTotalTax?: number;
        taxTotal?: number;
        trackingNumber?: string;
    } & {
        [key: string]: any;
    };
    type CustomerInfo = {
        customerId?: string;
        customerName?: string;
        customerNo: string;
        email: string;
    } & {
        [key: string]: any;
    };
    type VariationGroup = {
        orderable: boolean;
        price: number;
        productId: string;
        variationValues: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type SimpleLink = {
        link: string;
    } & {
        [key: string]: any;
    };
    type PaymentBankAccountRequest = {
        driversLicense: string;
        driversLicenseStateCode: string;
        holder: string;
        number: string;
    } & {
        [key: string]: any;
    };
    type PriceAdjustment = {
        appliedDiscount: Discount;
        couponCode: string;
        createdBy: string;
        creationDate: any;
        custom: boolean;
        itemText: string;
        lastModified: any;
        manual: boolean;
        price: number;
        priceAdjustmentId: string;
        promotionId: string;
        promotionLink: string;
        reasonCode: string;
    } & {
        [key: string]: any;
    };
    type PublicProductListItem = {
        id: string;
        priority: number;
        product?: Product;
        type: string;
    } & {
        [key: string]: any;
    };
    type ProductDetailsLink = {
        productDescription?: string;
        productId: string;
        productName?: string;
        title?: string;
    } & {
        [key: string]: any;
    };
    type ProductLink = {
        sourceProductId: string;
        sourceProductLink: string;
        targetProductId: string;
        targetProductLink: string;
        type: string;
    } & {
        [key: string]: any;
    };
    type OptionItem = {
        adjustedTax?: number;
        basePrice?: number;
        bonusDiscountLineItemId?: string;
        bonusProductLineItem?: boolean;
        bundledProductItems?: Array<ProductItem>;
        gift?: boolean;
        giftMessage?: string;
        inventoryId?: string;
        itemId?: string;
        itemText?: string;
        optionId: string;
        optionItems?: Array<OptionItem>;
        optionValueId: string;
        price?: number;
        priceAdjustments?: Array<PriceAdjustment>;
        priceAfterItemDiscount?: number;
        priceAfterOrderDiscount?: number;
        productId?: string;
        productListItem?: ProductListItemReference$0;
        productName?: string;
        quantity?: number;
        shipmentId?: string;
        shippingItemId?: string;
        tax?: number;
        taxBasis?: number;
        taxClassId?: string;
        taxRate?: number;
    } & {
        [key: string]: any;
    };
    type ShippingMethod = {
        description?: string;
        externalShippingMethod?: string;
        id: string;
        name?: string;
        price?: number;
        shippingPromotions?: Array<ShippingPromotion>;
    } & {
        [key: string]: any;
    };
    type ProductListEvent = {
        city?: string;
        country?: string;
        date?: any;
        state?: string;
        type: string;
    } & {
        [key: string]: any;
    };
    type PasswordChangeRequest = {
        currentPassword: string;
        password: string;
    } & {
        [key: string]: any;
    };
    type AuthRequest = {
        type?: string;
    } & {
        [key: string]: any;
    };
    type Inventory = {
        ats?: number;
        backorderable?: boolean;
        id: string;
        inStockDate?: any;
        orderable?: boolean;
        preorderable?: boolean;
        stockLevel?: number;
    } & {
        [key: string]: any;
    };
    type CustomerProductList = {
        coRegistrant?: CustomerProductListRegistrant;
        creationDate?: any;
        currentShippingAddressInfo?: CustomerAddressInfo;
        customerProductListItems?: Array<CustomerProductListItem>;
        description?: string;
        event?: ProductListEvent;
        id?: string;
        lastModified?: any;
        name?: string;
        postEventShippingAddressInfo?: CustomerAddressInfo;
        productListShippingAddress?: ProductListShippingAddress;
        public?: boolean;
        registrant?: CustomerProductListRegistrant;
        shippingAddressInfo?: CustomerAddressInfo;
        type?: string;
    } & {
        [key: string]: any;
    };
    type Basket = {
        adjustedMerchandizeTotalTax: number;
        adjustedShippingTotalTax: number;
        agentBasket: boolean;
        basketId: string;
        billingAddress?: OrderAddress;
        bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
        channelType: string;
        couponItems?: Array<CouponItem>;
        creationDate: any;
        currency: string;
        customerInfo: CustomerInfo;
        giftCertificateItems?: Array<GiftCertificateItem$0>;
        groupedTaxItems?: Array<GroupedTaxItem$0>;
        inventoryReservationExpiry?: any;
        lastModified: any;
        merchandizeTotalTax: number;
        notes: SimpleLink;
        orderPriceAdjustments?: Array<PriceAdjustment>;
        orderTotal: number;
        paymentInstruments?: Array<OrderPaymentInstrument>;
        productItems?: Array<ProductItem>;
        productSubTotal: number;
        productTotal: number;
        shipments: Array<Shipment>;
        shippingItems: Array<ShippingItem>;
        shippingTotal: number;
        shippingTotalTax: number;
        sourceCode?: string;
        taxTotal: number;
        taxation: string;
        taxRoundedAtGroup?: boolean;
        temporaryBasket?: boolean;
    } & {
        [key: string]: any;
    };
    type CustomerPaymentInstrumentRequest = {
        bankRoutingNumber?: string;
        giftCertificateCode?: string;
        paymentBankAccount?: PaymentBankAccountRequest;
        paymentCard?: CustomerPaymentCardRequest;
        paymentMethodId?: string;
    } & {
        [key: string]: any;
    };
    type ImageGroup = {
        images: Array<Image>;
        variationAttributes?: Array<VariationAttribute>;
        viewType: string;
    } & {
        [key: string]: any;
    };
    type CustomerRegistration = {
        customer: Customer;
        password: string;
    } & {
        [key: string]: any;
    };
    type Customer = {
        addresses?: Array<CustomerAddress>;
        authType?: string;
        birthday?: any;
        companyName?: string;
        creationDate?: any;
        customerId?: string;
        customerNo?: string;
        currentPassword?: string;
        email?: string;
        enabled?: boolean;
        fax?: string;
        firstName?: string;
        gender?: number;
        hashedLogin?: string;
        jobTitle?: string;
        lastLoginTime?: any;
        lastModified?: any;
        lastName?: string;
        lastVisitTime?: any;
        login?: string;
        note?: string;
        paymentInstruments?: Array<CustomerPaymentInstrument>;
        phoneBusiness?: string;
        phoneHome?: string;
        phoneMobile?: string;
        preferredLocale?: string;
        previousLoginTime?: any;
        previousVisitTime?: any;
        salutation?: string;
        secondName?: string;
        suffix?: string;
        title?: string;
    } & {
        [key: string]: any;
    };
    type PublicProductList = {
        coRegistrant?: ProductListRegistrant;
        creationDate?: any;
        description?: string;
        event?: ProductListEvent;
        id: string;
        lastModified?: any;
        name?: string;
        productListItems?: Array<PublicProductListItem>;
        productListShippingAddress?: ProductListShippingAddress;
        public: boolean;
        registrant?: ProductListRegistrant;
        type: string;
    } & {
        [key: string]: any;
    };
    type Option = {
        description?: string;
        id: string;
        image?: string;
        name?: string;
        values?: Array<OptionValue>;
    } & {
        [key: string]: any;
    };
    type CustomerOrderResult = {
        limit: number;
        data: Array<Order$0>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type CustomerExtProfileRequest = {
        authenticationProviderId: string;
        email?: string;
        externalId: string;
        firstName?: string;
        lastName?: string;
    } & {
        [key: string]: any;
    };
    type GiftCertificateItem = {
        amount: number;
        giftCertificateItemId?: string;
        message?: string;
        recipientEmail: string;
        recipientName?: string;
        senderName?: string;
        shipmentId?: string;
    } & {
        [key: string]: any;
    };
    type CustomerExternalProfile = {
        customerId: string;
        authenticationProviderId: string;
        email?: string;
        externalId: string;
        firstName?: string;
        lastName?: string;
    } & {
        [key: string]: any;
    };
    type CustomerAddressInfo = {
        addressId: string;
        title: string;
    } & {
        [key: string]: any;
    };
    type ResetPasswordTokenRequest = {
        login: string;
    } & {
        [key: string]: any;
    };
    type ProductListLink = {
        description: string;
        link: string;
        name: string;
        public: boolean;
        title: string;
        type: string;
    } & {
        [key: string]: any;
    };
    type GroupedTaxItem = {
        taxRate?: number;
        taxValue?: number;
    };
    type ProductListRegistrant = {
        firstName: string;
        lastName: string;
        role: string;
    } & {
        [key: string]: any;
    };
    type Order = {
        adjustedMerchandizeTotalTax?: number;
        adjustedShippingTotalTax?: number;
        billingAddress?: OrderAddress;
        bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
        channelType?: string;
        confirmationStatus: string;
        couponItems?: Array<CouponItem>;
        createdBy?: string;
        creationDate?: any;
        currency?: string;
        customerInfo?: CustomerInfo;
        customerName?: string;
        exportStatus: string;
        externalOrderStatus?: string;
        giftCertificateItems?: Array<GiftCertificateItem>;
        globalPartyId?: string;
        lastModified?: any;
        merchandizeTotalTax?: number;
        notes?: SimpleLink;
        orderNo?: string;
        orderPriceAdjustments?: Array<PriceAdjustment>;
        orderToken?: string;
        orderTotal?: number;
        paymentInstruments?: Array<OrderPaymentInstrument>;
        paymentStatus: string;
        productItems?: Array<ProductItem>;
        productSubTotal?: number;
        productTotal?: number;
        shipments?: Array<Shipment>;
        shippingItems?: Array<ShippingItem>;
        shippingStatus: string;
        shippingTotal?: number;
        shippingTotalTax?: number;
        siteId?: string;
        sourceCode?: string;
        status: string;
        taxTotal?: number;
        taxation?: string;
    } & {
        [key: string]: any;
    };
    type Product = {
        brand?: string;
        bundledProducts?: Array<BundledProduct>;
        currency?: string;
        ean?: string;
        fetchDate?: number;
        id: string;
        imageGroups?: Array<ImageGroup>;
        inventories?: Array<Inventory>;
        inventory?: Inventory;
        longDescription?: string;
        manufacturerName?: string;
        manufacturerSku?: string;
        master?: Master;
        minOrderQuantity?: number;
        name?: string;
        options?: Array<Option>;
        pageDescription?: string;
        pageKeywords?: string;
        pageTitle?: string;
        price?: number;
        priceMax?: number;
        prices?: {} & {
            [key: string]: any;
        };
        primaryCategoryId?: string;
        productLinks?: Array<ProductLink>;
        productPromotions?: Array<ProductPromotion>;
        recommendations?: Array<Recommendation>;
        setProducts?: Array<Product>;
        shortDescription?: string;
        stepQuantity?: number;
        type?: ProductType;
        unit?: string;
        upc?: string;
        validFrom?: any;
        validTo?: any;
        variants?: Array<Variant>;
        variationAttributes?: Array<VariationAttribute>;
        variationGroups?: Array<VariationGroup>;
        variationValues?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type Image = {
        alt?: string;
        disBaseLink?: string;
        link: string;
        title?: string;
    } & {
        [key: string]: any;
    };
    type VariationAttributeValue = {
        description?: string;
        image?: Image;
        imageSwatch?: Image;
        name?: string;
        orderable?: boolean;
        value: string;
    } & {
        [key: string]: any;
    };
    type ProductPromotion = {
        calloutMsg: string;
        promotionId: string;
        promotionalPrice: number;
    } & {
        [key: string]: any;
    };
    type BundledProduct = {
        id: string;
        product: Product;
        quantity: number;
    } & {
        [key: string]: any;
    };
    type Status = {
        code: string;
        message: string;
        status: number;
    } & {
        [key: string]: any;
    };
    type CustomerProductListItem = {
        id?: string;
        priority: number;
        product?: Product;
        productId?: string;
        public: boolean;
        purchasedQuantity?: number;
        quantity: number;
        type?: string;
    } & {
        [key: string]: any;
    };
    type ProductListItemReference = {
        id: string;
        priority?: number;
        productList?: ProductListLink;
        public?: boolean;
        purchasedQuantity?: number;
        quantity?: number;
        type?: string;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query$1;
        sorts?: Array<Sort$1>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition$1;
        id?: string;
        name: L10nString$1;
        description: L10nString$1;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString$1;
        possibleValues?: Array<PropertyValueDefinition$1>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query$1;
        sorts?: Array<Sort$1>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter$1>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query$1;
        sorts?: Array<Sort$1>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter$1;
        query: Query$1;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query$1;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$1;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$1;
        termQuery?: TermQuery$1;
        textQuery?: TextQuery$1;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition$1;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition$1>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    /**
     * All path parameters that are used by at least one ShopperCustomers method.
     */
    type ShopperCustomersPathParameters = {
        organizationId?: string;
        customerId?: string;
        addressName?: string;
        paymentInstrumentId?: string;
        listId?: string;
        itemId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperCustomers method.
     */
    type ShopperCustomersQueryParameters = {
        siteId?: string;
        externalId?: string;
        authenticationProviderId?: string;
        crossSites?: boolean;
        from?: string;
        until?: string;
        status?: string;
        offset?: any;
        limit?: number;
        email?: string;
        firstName?: string;
        lastName?: string;
    };
    /**
     * All parameters that are used by ShopperCustomers.
     */
    type ShopperCustomersParameters = ShopperCustomersPathParameters & BaseUriParameters & ShopperCustomersQueryParameters;
    /**
     * [Shopper Customers](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-customers:Summary)
     * ==================================
     *
     * *Allow customers to manage their own profiles and product lists.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperCustomers } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperCustomersClient = new ShopperCustomers(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 0.0.50<br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperCustomers<ConfigParameters extends ShopperCustomersParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/customer/shopper-customers/{version}";
        static readonly apiPaths: {
            registerCustomer: string;
            resetPassword: string;
            getResetPasswordToken: string;
            registerExternalProfile: string;
            getExternalProfile: string;
            getCustomer: string;
            updateCustomer: string;
            createCustomerAddress: string;
            getCustomerAddress: string;
            removeCustomerAddress: string;
            updateCustomerAddress: string;
            getCustomerBaskets: string;
            getCustomerOrders: string;
            updateCustomerPassword: string;
            createCustomerPaymentInstrument: string;
            deleteCustomerPaymentInstrument: string;
            getCustomerPaymentInstrument: string;
            getCustomerProductLists: string;
            createCustomerProductList: string;
            deleteCustomerProductList: string;
            getCustomerProductList: string;
            updateCustomerProductList: string;
            createCustomerProductListItem: string;
            deleteCustomerProductListItem: string;
            getCustomerProductListItem: string;
            updateCustomerProductListItem: string;
            getPublicProductListsBySearchTerm: string;
            getPublicProductList: string;
            getProductListItem: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly registerCustomer: readonly [
                "organizationId",
                "siteId"
            ];
            readonly registerCustomerRequired: readonly [
                "organizationId",
                "siteId"
            ];
            readonly resetPassword: readonly [
                "organizationId",
                "siteId"
            ];
            readonly resetPasswordRequired: readonly [
                "organizationId",
                "siteId"
            ];
            readonly getResetPasswordToken: readonly [
                "organizationId",
                "siteId"
            ];
            readonly getResetPasswordTokenRequired: readonly [
                "organizationId",
                "siteId"
            ];
            readonly registerExternalProfile: readonly [
                "organizationId",
                "siteId"
            ];
            readonly registerExternalProfileRequired: readonly [
                "organizationId",
                "siteId"
            ];
            readonly getExternalProfile: readonly [
                "organizationId",
                "externalId",
                "authenticationProviderId",
                "siteId"
            ];
            readonly getExternalProfileRequired: readonly [
                "organizationId",
                "externalId",
                "authenticationProviderId",
                "siteId"
            ];
            readonly getCustomer: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly getCustomerRequired: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly updateCustomer: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly updateCustomerRequired: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly createCustomerAddress: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly createCustomerAddressRequired: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly getCustomerAddress: readonly [
                "organizationId",
                "customerId",
                "addressName",
                "siteId"
            ];
            readonly getCustomerAddressRequired: readonly [
                "organizationId",
                "customerId",
                "addressName",
                "siteId"
            ];
            readonly removeCustomerAddress: readonly [
                "organizationId",
                "customerId",
                "addressName",
                "siteId"
            ];
            readonly removeCustomerAddressRequired: readonly [
                "organizationId",
                "customerId",
                "addressName",
                "siteId"
            ];
            readonly updateCustomerAddress: readonly [
                "organizationId",
                "customerId",
                "addressName",
                "siteId"
            ];
            readonly updateCustomerAddressRequired: readonly [
                "organizationId",
                "customerId",
                "addressName",
                "siteId"
            ];
            readonly getCustomerBaskets: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly getCustomerBasketsRequired: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly getCustomerOrders: readonly [
                "organizationId",
                "customerId",
                "crossSites",
                "from",
                "until",
                "status",
                "siteId",
                "offset",
                "limit"
            ];
            readonly getCustomerOrdersRequired: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly updateCustomerPassword: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly updateCustomerPasswordRequired: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly createCustomerPaymentInstrument: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly createCustomerPaymentInstrumentRequired: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly deleteCustomerPaymentInstrument: readonly [
                "organizationId",
                "customerId",
                "paymentInstrumentId",
                "siteId"
            ];
            readonly deleteCustomerPaymentInstrumentRequired: readonly [
                "organizationId",
                "customerId",
                "paymentInstrumentId",
                "siteId"
            ];
            readonly getCustomerPaymentInstrument: readonly [
                "organizationId",
                "customerId",
                "paymentInstrumentId",
                "siteId"
            ];
            readonly getCustomerPaymentInstrumentRequired: readonly [
                "organizationId",
                "customerId",
                "paymentInstrumentId",
                "siteId"
            ];
            readonly getCustomerProductLists: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly getCustomerProductListsRequired: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly createCustomerProductList: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly createCustomerProductListRequired: readonly [
                "organizationId",
                "customerId",
                "siteId"
            ];
            readonly deleteCustomerProductList: readonly [
                "organizationId",
                "customerId",
                "listId",
                "siteId"
            ];
            readonly deleteCustomerProductListRequired: readonly [
                "organizationId",
                "customerId",
                "listId",
                "siteId"
            ];
            readonly getCustomerProductList: readonly [
                "organizationId",
                "customerId",
                "listId",
                "siteId"
            ];
            readonly getCustomerProductListRequired: readonly [
                "organizationId",
                "customerId",
                "listId",
                "siteId"
            ];
            readonly updateCustomerProductList: readonly [
                "organizationId",
                "customerId",
                "listId",
                "siteId"
            ];
            readonly updateCustomerProductListRequired: readonly [
                "organizationId",
                "customerId",
                "listId",
                "siteId"
            ];
            readonly createCustomerProductListItem: readonly [
                "organizationId",
                "customerId",
                "listId",
                "siteId"
            ];
            readonly createCustomerProductListItemRequired: readonly [
                "organizationId",
                "customerId",
                "listId",
                "siteId"
            ];
            readonly deleteCustomerProductListItem: readonly [
                "organizationId",
                "customerId",
                "listId",
                "itemId",
                "siteId"
            ];
            readonly deleteCustomerProductListItemRequired: readonly [
                "organizationId",
                "customerId",
                "listId",
                "itemId",
                "siteId"
            ];
            readonly getCustomerProductListItem: readonly [
                "organizationId",
                "customerId",
                "listId",
                "itemId",
                "siteId"
            ];
            readonly getCustomerProductListItemRequired: readonly [
                "organizationId",
                "customerId",
                "listId",
                "itemId",
                "siteId"
            ];
            readonly updateCustomerProductListItem: readonly [
                "organizationId",
                "customerId",
                "listId",
                "itemId",
                "siteId"
            ];
            readonly updateCustomerProductListItemRequired: readonly [
                "organizationId",
                "customerId",
                "listId",
                "itemId",
                "siteId"
            ];
            readonly getPublicProductListsBySearchTerm: readonly [
                "organizationId",
                "email",
                "firstName",
                "lastName",
                "siteId"
            ];
            readonly getPublicProductListsBySearchTermRequired: readonly [
                "organizationId",
                "siteId"
            ];
            readonly getPublicProductList: readonly [
                "organizationId",
                "listId",
                "siteId"
            ];
            readonly getPublicProductListRequired: readonly [
                "organizationId",
                "listId",
                "siteId"
            ];
            readonly getProductListItem: readonly [
                "organizationId",
                "listId",
                "itemId",
                "siteId"
            ];
            readonly getProductListItemRequired: readonly [
                "organizationId",
                "listId",
                "itemId",
                "siteId"
            ];
        };
        /**
         * Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\", or from the Shopper Login (SLAS) API. The return type object for this endpoint is a common customer object shared by multiple Shopper Customer endpoints. In this case, all customer object details are returned, but attributes that are not included in the response, although they might be part of the customer object, are ignored. For example, although address information is included in the customer object, it is not displayed in the response for this endpoint and is ignored.
         *
         * If you would like to get a raw Response object use the other registerCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Customer.
         *
         */
        registerCustomer(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerRegistration;
        }>): Promise<Customer>;
        /**
         * Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\", or from the Shopper Login (SLAS) API. The return type object for this endpoint is a common customer object shared by multiple Shopper Customer endpoints. In this case, all customer object details are returned, but attributes that are not included in the response, although they might be part of the customer object, are ignored. For example, although address information is included in the customer object, it is not displayed in the response for this endpoint and is ignored.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
         *
         */
        registerCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerRegistration;
        }>, rawResponse?: T): Promise<T extends true ? Response : Customer>;
        /**
         * Reset customer password, after obtaining a reset token. This is the second step in the reset customer password flow, where a customer password is reset by providing the new credentials along with a reset token. This call should be preceded by a call to the /create-reset-token endpoint.
         *
         * If you would like to get a raw Response object use the other resetPassword function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        resetPassword(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ResetPasswordRequest;
        }>): Promise<void>;
        /**
         * Reset customer password, after obtaining a reset token. This is the second step in the reset customer password flow, where a customer password is reset by providing the new credentials along with a reset token. This call should be preceded by a call to the /create-reset-token endpoint.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        resetPassword<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ResetPasswordRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Get reset password token. This is the first step in the reset customer password flow, where a password reset token is requested for future use to reset a customer password. This call should be followed by a call to the /reset endpoint.
         *
         * If you would like to get a raw Response object use the other getResetPasswordToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type ResetPasswordToken.
         *
         */
        getResetPasswordToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ResetPasswordTokenRequest;
        }>): Promise<ResetPasswordToken>;
        /**
         * Get reset password token. This is the first step in the reset customer password flow, where a password reset token is requested for future use to reset a customer password. This call should be followed by a call to the /reset endpoint.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ResetPasswordToken otherwise.
         *
         */
        getResetPasswordToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: ResetPasswordTokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : ResetPasswordToken>;
        /**
         * Registers a new external profile for a customer. This endpoint accepts a guest customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other registerExternalProfile function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerExternalProfile.
         *
         */
        registerExternalProfile(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerExtProfileRequest;
        }>): Promise<CustomerExternalProfile>;
        /**
         * Registers a new external profile for a customer. This endpoint accepts a guest customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerExternalProfile otherwise.
         *
         */
        registerExternalProfile<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerExtProfileRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerExternalProfile>;
        /**
         * Gets the new external profile for a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other getExternalProfile function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param externalId - The External ID of the customer.
         * @param authenticationProviderId - The authentication Provider Id.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerExternalProfile.
         *
         */
        getExternalProfile(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                externalId: string;
                authenticationProviderId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<CustomerExternalProfile>;
        /**
         * Gets the new external profile for a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param externalId - The External ID of the customer.
         * @param authenticationProviderId - The authentication Provider Id.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerExternalProfile otherwise.
         *
         */
        getExternalProfile<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                externalId: string;
                authenticationProviderId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerExternalProfile>;
        /**
         * Gets a customer with all existing addresses and payment instruments associated with the requested customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other getCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Customer.
         *
         */
        getCustomer(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Customer>;
        /**
         * Gets a customer with all existing addresses and payment instruments associated with the requested customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
         *
         */
        getCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Customer>;
        /**
         * Updates a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other updateCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Customer.
         *
         */
        updateCustomer(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Customer;
        }>): Promise<Customer>;
        /**
         * Updates a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
         *
         */
        updateCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Customer;
        }>, rawResponse?: T): Promise<T extends true ? Response : Customer>;
        /**
         * Creates a new address with the given name for the given customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other createCustomerAddress function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerAddress.
         *
         */
        createCustomerAddress(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerAddress;
        }>): Promise<CustomerAddress>;
        /**
         * Creates a new address with the given name for the given customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
         *
         */
        createCustomerAddress<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerAddress;
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerAddress>;
        /**
         * Retrieves a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other getCustomerAddress function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerAddress.
         *
         */
        getCustomerAddress(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                addressName: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<CustomerAddress>;
        /**
         * Retrieves a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
         *
         */
        getCustomerAddress<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                addressName: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerAddress>;
        /**
         * Deletes a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other removeCustomerAddress function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        removeCustomerAddress(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                addressName: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<void>;
        /**
         * Deletes a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        removeCustomerAddress<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                addressName: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Updates a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other updateCustomerAddress function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerAddress.
         *
         */
        updateCustomerAddress(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                addressName: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerAddress;
        }>): Promise<CustomerAddress>;
        /**
         * Updates a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
         *
         */
        updateCustomerAddress<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                addressName: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerAddress;
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerAddress>;
        /**
         * Gets the baskets of a customer. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getCustomerBaskets function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type BasketsResult.
         *
         */
        getCustomerBaskets(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<BasketsResult>;
        /**
         * Gets the baskets of a customer. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type BasketsResult otherwise.
         *
         */
        getCustomerBaskets<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : BasketsResult>;
        /**
         * Returns a pageable list of all customer's orders. The default page size is 10. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getCustomerOrders function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param crossSites - The flag indicating whether all sites should be searched. This flag is ignored unless a valid User / Agent is present with a trusted agent on behalf (TAOB) token. Without a TAOB token, only the customer's orders placed on the site specified by siteId are returned.
         * @param from -
         * @param until -
         * @param status -
         * @param siteId -
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 10.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerOrderResult.
         *
         */
        getCustomerOrders(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                crossSites?: boolean;
                from?: string;
                until?: string;
                status?: string;
                siteId: string;
                offset?: any;
                limit?: number;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<CustomerOrderResult>;
        /**
         * Returns a pageable list of all customer's orders. The default page size is 10. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param crossSites - The flag indicating whether all sites should be searched. This flag is ignored unless a valid User / Agent is present with a trusted agent on behalf (TAOB) token. Without a TAOB token, only the customer's orders placed on the site specified by siteId are returned.
         * @param from -
         * @param until -
         * @param status -
         * @param siteId -
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 10.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerOrderResult otherwise.
         *
         */
        getCustomerOrders<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                crossSites?: boolean;
                from?: string;
                until?: string;
                status?: string;
                siteId: string;
                offset?: any;
                limit?: number;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerOrderResult>;
        /**
         * Updates the customer's password. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other updateCustomerPassword function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        updateCustomerPassword(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordChangeRequest;
        }>): Promise<void>;
        /**
         * Updates the customer's password. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        updateCustomerPassword<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordChangeRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Adds a payment instrument to the customer information. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other createCustomerPaymentInstrument function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerPaymentInstrument.
         *
         */
        createCustomerPaymentInstrument(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerPaymentInstrumentRequest;
        }>): Promise<CustomerPaymentInstrument>;
        /**
         * Adds a payment instrument to the customer information. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerPaymentInstrument otherwise.
         *
         */
        createCustomerPaymentInstrument<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerPaymentInstrumentRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerPaymentInstrument>;
        /**
         * Deletes a customer's payment instrument. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other deleteCustomerPaymentInstrument function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        deleteCustomerPaymentInstrument(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                paymentInstrumentId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<void>;
        /**
         * Deletes a customer's payment instrument. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        deleteCustomerPaymentInstrument<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                paymentInstrumentId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Retrieves a customer's payment instrument by its ID. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other getCustomerPaymentInstrument function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerPaymentInstrument.
         *
         */
        getCustomerPaymentInstrument(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                paymentInstrumentId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<CustomerPaymentInstrument>;
        /**
         * Retrieves a customer's payment instrument by its ID. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerPaymentInstrument otherwise.
         *
         */
        getCustomerPaymentInstrument<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                paymentInstrumentId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerPaymentInstrument>;
        /**
         * Returns all customer product lists. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getCustomerProductLists function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerProductListResult.
         *
         */
        getCustomerProductLists(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<CustomerProductListResult>;
        /**
         * Returns all customer product lists. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListResult otherwise.
         *
         */
        getCustomerProductLists<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListResult>;
        /**
         * Creates a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other createCustomerProductList function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerProductList.
         *
         */
        createCustomerProductList(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerProductList;
        }>): Promise<CustomerProductList>;
        /**
         * Creates a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
         *
         */
        createCustomerProductList<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerProductList;
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductList>;
        /**
         * Deletes a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer  ShopperToken.
         *
         * If you would like to get a raw Response object use the other deleteCustomerProductList function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        deleteCustomerProductList(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<void>;
        /**
         * Deletes a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer  ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        deleteCustomerProductList<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Returns a customer product list of the given customer and the items in the list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getCustomerProductList function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerProductList.
         *
         */
        getCustomerProductList(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<CustomerProductList>;
        /**
         * Returns a customer product list of the given customer and the items in the list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
         *
         */
        getCustomerProductList<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductList>;
        /**
         * Changes a product list. Changeable properties are the name, description, and if the list is public. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other updateCustomerProductList function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerProductList.
         *
         */
        updateCustomerProductList(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerProductList;
        }>): Promise<CustomerProductList>;
        /**
         * Changes a product list. Changeable properties are the name, description, and if the list is public. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
         *
         */
        updateCustomerProductList<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerProductList;
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductList>;
        /**
         * Adds an item to the customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         
         Considered values from the request body are:
         
         - `type` → The type of the item to be added to the customer's product. Must be a valid type. Mandatory.
         list.
         - `priority` → The priority of the item to be added to the customer's product list.
         - `public` → The flag that determines whether the item to be added to the customer's product list is public.
         - `product_id` → The ID (SKU) of the product related to the item to be added to the customer's product list. A valid product ID, used for product item type only. Must be a valid product ID; otherwise, a `ProductListProductIdMissingException` or `ProductListProductNotFoundException` is thrown. Mandatory when item type is `product`.
         - `quantity` → Used for product item type only. This is the quantity of the item to be added to the customer's product list.
         
         You can also use a custom property of the form `c_\<CUSTOM_NAME\>`. The custom property must correspond to a custom attribute (`\<CUSTOM_NAME\>`) that is defined for `ProductListItem`. The value of this property must be valid for the type of custom attribute defined for `ProductListItem`.
         *
         * If you would like to get a raw Response object use the other createCustomerProductListItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerProductListItem.
         *
         */
        createCustomerProductListItem(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerProductListItem;
        }>): Promise<CustomerProductListItem>;
        /**
         * Adds an item to the customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         
         Considered values from the request body are:
         
         - `type` → The type of the item to be added to the customer's product. Must be a valid type. Mandatory.
         list.
         - `priority` → The priority of the item to be added to the customer's product list.
         - `public` → The flag that determines whether the item to be added to the customer's product list is public.
         - `product_id` → The ID (SKU) of the product related to the item to be added to the customer's product list. A valid product ID, used for product item type only. Must be a valid product ID; otherwise, a `ProductListProductIdMissingException` or `ProductListProductNotFoundException` is thrown. Mandatory when item type is `product`.
         - `quantity` → Used for product item type only. This is the quantity of the item to be added to the customer's product list.
         
         You can also use a custom property of the form `c_\<CUSTOM_NAME\>`. The custom property must correspond to a custom attribute (`\<CUSTOM_NAME\>`) that is defined for `ProductListItem`. The value of this property must be valid for the type of custom attribute defined for `ProductListItem`.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
         *
         */
        createCustomerProductListItem<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerProductListItem;
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListItem>;
        /**
         * Removes an item from a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other deleteCustomerProductListItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        deleteCustomerProductListItem(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                itemId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<void>;
        /**
         * Removes an item from a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        deleteCustomerProductListItem<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                itemId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Returns an item of a customer product list and the actual product details like image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getCustomerProductListItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerProductListItem.
         *
         */
        getCustomerProductListItem(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                itemId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<CustomerProductListItem>;
        /**
         * Returns an item of a customer product list and the actual product details like image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
         *
         */
        getCustomerProductListItem<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                itemId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListItem>;
        /**
         * Updates an item of a customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         Considered values from the request body are:
         
         priority: This is the priority of the customer's product list item.
         public: This is the flag whether the customer's product list item is public.
         quantity: This is the quantity of
         the customer's product list item. Used for product item type only.
         custom properties in the form c_\<CUSTOM_NAME\>: The custom property
         must correspond to a custom attribute (\<CUSTOM_NAME\>) defined for ProductListItem.
         The value of this property must be valid for the type of custom attribute defined for ProductListItem.
         *
         * If you would like to get a raw Response object use the other updateCustomerProductListItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerProductListItem.
         *
         */
        updateCustomerProductListItem(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                itemId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerProductListItem;
        }>): Promise<CustomerProductListItem>;
        /**
         * Updates an item of a customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         Considered values from the request body are:
         
         priority: This is the priority of the customer's product list item.
         public: This is the flag whether the customer's product list item is public.
         quantity: This is the quantity of
         the customer's product list item. Used for product item type only.
         custom properties in the form c_\<CUSTOM_NAME\>: The custom property
         must correspond to a custom attribute (\<CUSTOM_NAME\>) defined for ProductListItem.
         The value of this property must be valid for the type of custom attribute defined for ProductListItem.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
         *
         */
        updateCustomerProductListItem<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                customerId: string;
                listId: string;
                itemId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: CustomerProductListItem;
        }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListItem>;
        /**
         * Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name). This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getPublicProductListsBySearchTerm function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param email - The email address of the customer the product lists belong to.
         * @param firstName - The first name of the customer the product lists belong to.
         * @param lastName - The last name of the customer the product lists belong to.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PublicProductListResult.
         *
         */
        getPublicProductListsBySearchTerm(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                email?: string;
                firstName?: string;
                lastName?: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<PublicProductListResult>;
        /**
         * Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name). This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param email - The email address of the customer the product lists belong to.
         * @param firstName - The first name of the customer the product lists belong to.
         * @param lastName - The last name of the customer the product lists belong to.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductListResult otherwise.
         *
         */
        getPublicProductListsBySearchTerm<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                email?: string;
                firstName?: string;
                lastName?: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : PublicProductListResult>;
        /**
         * Retrieves a public product list by ID and the items under that product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getPublicProductList function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param listId - The ID of the list.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PublicProductList.
         *
         */
        getPublicProductList(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                listId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<PublicProductList>;
        /**
         * Retrieves a public product list by ID and the items under that product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param listId - The ID of the list.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductList otherwise.
         *
         */
        getPublicProductList<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                listId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : PublicProductList>;
        /**
         * Retrieves an item from a public product list and the actual product details like product, image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getProductListItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param listId - The ID of the list.
         * @param itemId - The ID of the item.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PublicProductListItem.
         *
         */
        getProductListItem(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                listId: string;
                itemId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<PublicProductListItem>;
        /**
         * Retrieves an item from a public product list and the actual product details like product, image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param listId - The ID of the list.
         * @param itemId - The ID of the item.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductListItem otherwise.
         *
         */
        getProductListItem<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                listId: string;
                itemId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : PublicProductListItem>;
    }
}
type BoolFilter$2 = {
    filters?: Array<any>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$2 = {} & {
    [key: string]: any;
};
type FilteredQuery$2 = {
    filter: any;
    query: any;
} & {
    [key: string]: any;
};
type QueryFilter$2 = {
    query: any;
} & {
    [key: string]: any;
};
type Query$2 = {
    boolQuery?: BoolQuery$1;
    filteredQuery?: FilteredQuery$2;
    matchAllQuery?: MatchAllQuery$2;
    nestedQuery?: NestedQuery$1;
    termQuery?: TermQuery$1;
    textQuery?: TextQuery$1;
} & {
    [key: string]: any;
};
type TermQuery$2 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$2 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$2 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$2 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$2 = {
    must?: Array<any>;
    mustNot?: Array<any>;
    should?: Array<any>;
} & {
    [key: string]: any;
};
type NestedQuery$2 = {
    path: string;
    query: any;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$2 = {
    boolFilter?: BoolFilter$2;
    queryFilter?: QueryFilter$2;
    range2Filter?: Range2Filter$2;
    rangeFilter?: RangeFilter$1;
    termFilter?: TermFilter$2;
} & {
    [key: string]: any;
};
type Sort$2 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type RangeFilter$2 = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
} & {
    [key: string]: any;
};
type ExpansionAttribute = {
    attributeId: string;
    path: string;
    value: any;
} & {
    [key: string]: any;
};
type PaginationLinks = {
    prev?: Self;
    self: Self;
    next?: Self;
} & {
    [key: string]: any;
};
type Self = {
    href: string;
};
type Highlighting = {
    attributes: Array<string>;
} & {
    [key: string]: any;
};
type QueryOutput = {
    hits: Array<Result>;
    facets?: Array<FacetOutput>;
    links: PaginationLinks;
    limit: number;
    offset: any;
    total: any;
};
type QueryInput = {
    query?: Query$2;
    refinements?: Array<Refinement>;
    returnedAttributes?: Array<string>;
    grouping?: Grouping;
    facets?: Array<FacetInput>;
    facetRequest?: FacetRequest;
    sorting: Sorting;
};
type CorrectableAttributes = {
    attributes: Array<string>;
} & {
    [key: string]: any;
};
type Refinement = {
    attributeId: string;
    refinementType: string;
} & {
    [key: string]: any;
};
type FacetInput = {
    attributeId: string;
    facetType: string;
} & {
    [key: string]: any;
};
type FacetRequest = {
    facetLimit?: any;
    facets?: Array<FacetInput>;
} & {
    [key: string]: any;
};
type ValueFacetOutputEntity = {
    value: string;
    count: any;
} & {
    [key: string]: any;
};
type FacetOutput = {
    attributeId: string;
    facetType: string;
} & {
    [key: string]: any;
};
type Sorting = {
    sortType: string;
} & {
    [key: string]: any;
};
type Grouping = {
    groupType: string;
} & {
    [key: string]: any;
};
type ItemReference = {
    itemId: string;
    attributes?: Array<ExpansionAttribute>;
} & {
    [key: string]: any;
};
type Highlight = {
    attributeId: string;
    value: string;
} & {
    [key: string]: any;
};
type Result = {
    matchedItem: ItemReference;
    highlights?: Array<Highlight>;
    groupId?: string;
    totalGroupedItems?: any;
    groupedItems?: Array<ItemReference>;
};
type Suggestion = {
    phrase: string;
};
type Suggestions = {
    recentSearchPhrases?: Array<Suggestion>;
    suggestedSearchPhrases?: Array<Suggestion>;
    popularSearchPhrases?: Array<Suggestion>;
};
/**
 * All path parameters that are used by at least one ShopperDiscoverySearch method.
 */
type ShopperDiscoverySearchPathParameters = {
    organizationId?: string;
    channelId?: string;
};
/**
 * All query parameters that are used by at least one ShopperDiscoverySearch method.
 */
type ShopperDiscoverySearchQueryParameters = {
    locale?: string;
    offset?: any;
    limit?: number;
    suggestionTypes?: Array<string>;
    searchText?: string;
};
/**
 * All parameters that are used by ShopperDiscoverySearch.
 */
type ShopperDiscoverySearchParameters = ShopperDiscoverySearchPathParameters & BaseUriParameters & ShopperDiscoverySearchQueryParameters;
/**
 * [Shopper Discovery Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-discovery-search:Summary)
 * ==================================
 *
 * *Einstein-powered product search and search suggestions.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperDiscoverySearch } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperDiscoverySearchClient = new ShopperDiscoverySearch(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.1.6<br />
 * Last Updated: <br />
 * </span>
 *
 * @beta
 *
 *
 */
declare class ShopperDiscoverySearch<ConfigParameters extends ShopperDiscoverySearchParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/discovery/query/{version}";
    static readonly apiPaths: {
        retrieveResults: string;
        getSuggestions: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly retrieveResults: readonly [
            "organizationId",
            "channelId",
            "locale",
            "offset",
            "limit"
        ];
        readonly retrieveResultsRequired: readonly [
            "organizationId",
            "channelId",
            "locale"
        ];
        readonly getSuggestions: readonly [
            "organizationId",
            "channelId",
            "suggestionTypes",
            "searchText",
            "locale"
        ];
        readonly getSuggestionsRequired: readonly [
            "organizationId",
            "channelId",
            "suggestionTypes",
            "locale"
        ];
    };
    /**
     * This method retrieves search results for a Channel.
     *
     * If you would like to get a raw Response object use the other retrieveResults function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param channelId - The unique identifier of a Channel.
     * @param locale -
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 240. Defaults to 30.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type QueryOutput.
     *
     * @beta
     *
     */
    retrieveResults(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channelId: string;
            locale: string;
            offset?: any;
            limit?: number;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: QueryInput;
    }>): Promise<QueryOutput>;
    /**
     * This method retrieves search results for a Channel.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param channelId - The unique identifier of a Channel.
     * @param locale -
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 240. Defaults to 30.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type QueryOutput otherwise.
     *
     * @beta
     *
     */
    retrieveResults<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channelId: string;
            locale: string;
            offset?: any;
            limit?: number;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: QueryInput;
    }>, rawResponse?: T): Promise<T extends true ? Response : QueryOutput>;
    /**
     * This method gets suggestions for the user's search activity for a channel.
     *
     * If you would like to get a raw Response object use the other getSuggestions function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param channelId - The unique identifier of a Channel.
     * @param suggestionTypes - The types of suggestions to return.
     * @param searchText - The optional text to retrieve suggestions for.
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Suggestions.
     *
     * @beta
     *
     */
    getSuggestions(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channelId: string;
            suggestionTypes: Array<string>;
            searchText?: string;
            locale: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Suggestions>;
    /**
     * This method gets suggestions for the user's search activity for a channel.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param channelId - The unique identifier of a Channel.
     * @param suggestionTypes - The types of suggestions to return.
     * @param searchText - The optional text to retrieve suggestions for.
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Suggestions otherwise.
     *
     * @beta
     *
     */
    getSuggestions<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channelId: string;
            suggestionTypes: Array<string>;
            searchText?: string;
            locale: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Suggestions>;
}
declare namespace ShopperDiscoverySearchTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: any;
        sorts?: Array<Sort$2>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: any;
        sorts?: Array<Sort$2>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<any>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: any;
        sorts?: Array<Sort$2>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: any;
        query: any;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: any;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$2;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$2;
        termQuery?: TermQuery$2;
        textQuery?: TextQuery$2;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<any>;
        mustNot?: Array<any>;
        should?: Array<any>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: any;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter$2;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        field: string;
        from?: any;
        fromInclusive?: boolean;
        to?: any;
        toInclusive?: boolean;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type ExpansionAttribute = {
        attributeId: string;
        path: string;
        value: any;
    } & {
        [key: string]: any;
    };
    type PaginationLinks = {
        prev?: Self;
        self: Self;
        next?: Self;
    } & {
        [key: string]: any;
    };
    type ResourceLink = {
        self: Self;
    } & {
        [key: string]: any;
    };
    type Self = {
        href: string;
    };
    type SelfResourceLink = {
        self: Self;
    };
    type Pagination = {
        prev?: Self;
        self: Self;
        next?: Self;
    };
    // This is a known deviation from the RAML definition, required due to limitations in
    // the SDK generation. The full definition will be included in the next major release.
    type ResourceBadRequest = {
        [key: string]: any;
    };
    type ResourceNonReadableHttpMessage = {};
    type ResourceInvalidRequest = {};
    type AuthenticationFailure = {};
    type BaseError = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    };
    type NotFound = {};
    type InvalidRequest = {};
    type AuthorizationFailure = {};
    type BadRequest = {};
    type ServiceUnavailable = {};
    type InternalServerError = {};
    type RateLimitExceeded = {
        requestLimit: any;
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    };
    type NonReadableHttpMessage = {};
    type AttributesQuery = {
        value: {
            attributes: Array<string>;
            phrase: string;
        } & {
            [key: string]: any;
        };
        queryType: string;
        correctableAttributes?: CorrectableAttributes;
        highlighting?: Highlighting;
    };
    type Highlighting = {
        attributes: Array<string>;
    } & {
        [key: string]: any;
    };
    type PhraseQuery = {
        value: string;
        queryType: string;
        correctableAttributes?: CorrectableAttributes;
        highlighting?: Highlighting;
    };
    type QueryOutput = {
        hits: Array<Result>;
        facets?: Array<FacetOutput>;
        links: PaginationLinks;
        limit: number;
        offset: any;
        total: any;
    };
    type QueryInput = {
        query?: Query;
        refinements?: Array<Refinement>;
        returnedAttributes?: Array<string>;
        grouping?: Grouping;
        facets?: Array<FacetInput>;
        facetRequest?: FacetRequest;
        sorting: Sorting;
    };
    type CorrectableAttributes = {
        attributes: Array<string>;
    } & {
        [key: string]: any;
    };
    type Refinement = {
        attributeId: string;
        refinementType: string;
    } & {
        [key: string]: any;
    };
    type ValueRefinement = {
        values: Array<any>;
        attributeId: string;
        refinementType: string;
    };
    type RangeRefinement = {
        min: any;
        max: any;
        attributeId: string;
        refinementType: string;
    };
    type ValueFacetOutput = {
        values?: Array<ValueFacetOutputEntity>;
        attributeId: string;
        facetType: string;
    };
    type FacetInput = {
        attributeId: string;
        facetType: string;
    } & {
        [key: string]: any;
    };
    type RangeFacetInput = {};
    type RangeFacetOutput = {
        min: any;
        max: any;
        attributeId: string;
        facetType: string;
    };
    type ValueFacetInput = {
        mask?: Array<string>;
        attributeId: string;
        facetType: string;
    };
    type FacetRequest = {
        facetLimit?: any;
        facets?: Array<FacetInput>;
    } & {
        [key: string]: any;
    };
    type ValueFacetOutputEntity = {
        value: string;
        count: any;
    } & {
        [key: string]: any;
    };
    type FacetOutput = {
        attributeId: string;
        facetType: string;
    } & {
        [key: string]: any;
    };
    type Sorting = {
        sortType: string;
    } & {
        [key: string]: any;
    };
    type AttributeSorting = {
        attributeId: string;
        direction: string;
        sortType: string;
    };
    type RelevanceSorting = {};
    type Grouping = {
        groupType: string;
    } & {
        [key: string]: any;
    };
    type AttributeGrouping = {
        attributeId: string;
        returnedAttributes?: Array<string>;
        groupType: string;
    };
    type ItemReference = {
        itemId: string;
        attributes?: Array<ExpansionAttribute>;
    } & {
        [key: string]: any;
    };
    type Highlight = {
        attributeId: string;
        value: string;
    } & {
        [key: string]: any;
    };
    type Result = {
        matchedItem: ItemReference;
        highlights?: Array<Highlight>;
        groupId?: string;
        totalGroupedItems?: any;
        groupedItems?: Array<ItemReference>;
    };
    type Suggestion = {
        phrase: string;
    };
    type Suggestions = {
        recentSearchPhrases?: Array<Suggestion>;
        suggestedSearchPhrases?: Array<Suggestion>;
        popularSearchPhrases?: Array<Suggestion>;
    };
    /**
     * All path parameters that are used by at least one ShopperDiscoverySearch method.
     */
    type ShopperDiscoverySearchPathParameters = {
        organizationId?: string;
        channelId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperDiscoverySearch method.
     */
    type ShopperDiscoverySearchQueryParameters = {
        locale?: string;
        offset?: any;
        limit?: number;
        suggestionTypes?: Array<string>;
        searchText?: string;
    };
    /**
     * All parameters that are used by ShopperDiscoverySearch.
     */
    type ShopperDiscoverySearchParameters = ShopperDiscoverySearchPathParameters & BaseUriParameters & ShopperDiscoverySearchQueryParameters;
    /**
     * [Shopper Discovery Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-discovery-search:Summary)
     * ==================================
     *
     * *Einstein-powered product search and search suggestions.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperDiscoverySearch } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperDiscoverySearchClient = new ShopperDiscoverySearch(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.1.6<br />
     * Last Updated: <br />
     * </span>
     *
     * @beta
     *
     *
     */
    class ShopperDiscoverySearch<ConfigParameters extends ShopperDiscoverySearchParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/discovery/query/{version}";
        static readonly apiPaths: {
            retrieveResults: string;
            getSuggestions: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly retrieveResults: readonly [
                "organizationId",
                "channelId",
                "locale",
                "offset",
                "limit"
            ];
            readonly retrieveResultsRequired: readonly [
                "organizationId",
                "channelId",
                "locale"
            ];
            readonly getSuggestions: readonly [
                "organizationId",
                "channelId",
                "suggestionTypes",
                "searchText",
                "locale"
            ];
            readonly getSuggestionsRequired: readonly [
                "organizationId",
                "channelId",
                "suggestionTypes",
                "locale"
            ];
        };
        /**
         * This method retrieves search results for a Channel.
         *
         * If you would like to get a raw Response object use the other retrieveResults function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param channelId - The unique identifier of a Channel.
         * @param locale -
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 240. Defaults to 30.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type QueryOutput.
         *
         * @beta
         *
         */
        retrieveResults(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                channelId: string;
                locale: string;
                offset?: any;
                limit?: number;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: QueryInput;
        }>): Promise<QueryOutput>;
        /**
         * This method retrieves search results for a Channel.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param channelId - The unique identifier of a Channel.
         * @param locale -
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 240. Defaults to 30.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type QueryOutput otherwise.
         *
         * @beta
         *
         */
        retrieveResults<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                channelId: string;
                locale: string;
                offset?: any;
                limit?: number;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: QueryInput;
        }>, rawResponse?: T): Promise<T extends true ? Response : QueryOutput>;
        /**
         * This method gets suggestions for the user's search activity for a channel.
         *
         * If you would like to get a raw Response object use the other getSuggestions function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param channelId - The unique identifier of a Channel.
         * @param suggestionTypes - The types of suggestions to return.
         * @param searchText - The optional text to retrieve suggestions for.
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Suggestions.
         *
         * @beta
         *
         */
        getSuggestions(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                channelId: string;
                suggestionTypes: Array<string>;
                searchText?: string;
                locale: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Suggestions>;
        /**
         * This method gets suggestions for the user's search activity for a channel.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param channelId - The unique identifier of a Channel.
         * @param suggestionTypes - The types of suggestions to return.
         * @param searchText - The optional text to retrieve suggestions for.
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Suggestions otherwise.
         *
         * @beta
         *
         */
        getSuggestions<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                channelId: string;
                suggestionTypes: Array<string>;
                searchText?: string;
                locale: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Suggestions>;
    }
}
type PageResult = {
    data: Array<Page>;
} & {
    [key: string]: any;
};
type Page = {
    id: string;
    typeId: string;
    aspectTypeId?: string;
    name?: string;
    description?: string;
    pageTitle?: string;
    pageDescription?: string;
    pageKeywords?: string;
    data?: {} & {
        [key: string]: any;
    };
    custom?: {} & {
        [key: string]: any;
    };
    regions?: Array<Region>;
} & {
    [key: string]: any;
};
type Region = {
    id: string;
    components?: Array<Component>;
} & {
    [key: string]: any;
};
type Component = {
    id: string;
    typeId: string;
    data?: {} & {
        [key: string]: any;
    };
    custom?: {} & {
        [key: string]: any;
    };
    regions?: Array<Region>;
} & {
    [key: string]: any;
};
type RangeFilter$3 = {
    [key: string]: any;
};
type BoolFilter$3 = {
    filters?: Array<Filter$2>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$3 = {} & {
    [key: string]: any;
};
type FilteredQuery$3 = {
    filter: Filter$2;
    query: Query$2;
} & {
    [key: string]: any;
};
type QueryFilter$3 = {
    query: Query$2;
} & {
    [key: string]: any;
};
type Query$3 = {
    boolQuery?: BoolQuery$2;
    filteredQuery?: FilteredQuery$3;
    matchAllQuery?: MatchAllQuery$3;
    nestedQuery?: NestedQuery$2;
    termQuery?: TermQuery$2;
    textQuery?: TextQuery$2;
} & {
    [key: string]: any;
};
type TermQuery$3 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$3 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$3 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$3 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$3 = {
    must?: Array<Query$3>;
    mustNot?: Array<Query$3>;
    should?: Array<Query$3>;
} & {
    [key: string]: any;
};
type NestedQuery$3 = {
    path: string;
    query: Query$3;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$3 = {
    boolFilter?: BoolFilter$3;
    queryFilter?: QueryFilter$3;
    range2Filter?: Range2Filter$3;
    rangeFilter?: RangeFilter$3;
    termFilter?: TermFilter$3;
} & {
    [key: string]: any;
};
type Sort$3 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type L10nString$2 = {} & {
    [key: string]: any;
};
type PropertyValueDefinition$2 = {
    description: L10nString$2;
    displayValue: L10nString$2;
    id: string;
    position?: number;
    value: string;
};
/**
 * All path parameters that are used by at least one ShopperExperience method.
 */
type ShopperExperiencePathParameters = {
    organizationId?: string;
    pageId?: string;
};
/**
 * All query parameters that are used by at least one ShopperExperience method.
 */
type ShopperExperienceQueryParameters = {
    categoryId?: string;
    productId?: string;
    aspectTypeId?: string;
    aspectAttributes?: string;
    parameters?: string;
    siteId?: string;
    locale?: string;
};
/**
 * All parameters that are used by ShopperExperience.
 */
type ShopperExperienceParameters = ShopperExperiencePathParameters & BaseUriParameters & ShopperExperienceQueryParameters;
/**
 * [Shopper Experience](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-experience:Summary)
 * ==================================
 *
 * **<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperExperience } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperExperienceClient = new ShopperExperience(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.0.5<br />
 * Last Updated: <br />
 * </span>
 *
 *
 */
declare class ShopperExperience<ConfigParameters extends ShopperExperienceParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/experience/shopper-experience/{version}";
    static readonly apiPaths: {
        getPages: string;
        getPage: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly getPages: readonly [
            "organizationId",
            "categoryId",
            "productId",
            "aspectTypeId",
            "aspectAttributes",
            "parameters",
            "siteId",
            "locale"
        ];
        readonly getPagesRequired: readonly [
            "organizationId",
            "aspectTypeId",
            "siteId"
        ];
        readonly getPage: readonly [
            "organizationId",
            "pageId",
            "aspectAttributes",
            "parameters",
            "siteId",
            "locale"
        ];
        readonly getPageRequired: readonly [
            "organizationId",
            "pageId",
            "siteId"
        ];
    };
    /**
     * Get Page Designer pages. The results will apply the visibility rules for each page's components, such as personalization or scheduled visibility.
     
     Either `categoryId` or `productId` must be given in addition to `aspectTypeId`. Because only a single page-to-product and page-to-category assignment per aspect type can be authored today, the returned result contains one element at most.
     
     **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
     
     **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
     *
     * If you would like to get a raw Response object use the other getPages function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param categoryId - Category identifier that is used for searching the page assignment. Must be provided if no `productId` is provided.
     * @param productId - Product identifier that is used for searching the page assignment. Must be provided if no `categoryId` is provided.
     * @param aspectTypeId - Aspect type identifier that is used for searching the page assignment in conjunction with either the `productId` or `categoryId`.
     * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
     * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PageResult.
     *
     */
    getPages(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            categoryId?: string;
            productId?: string;
            aspectTypeId: string;
            aspectAttributes?: string;
            parameters?: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PageResult>;
    /**
     * Get Page Designer pages. The results will apply the visibility rules for each page's components, such as personalization or scheduled visibility.
     
     Either `categoryId` or `productId` must be given in addition to `aspectTypeId`. Because only a single page-to-product and page-to-category assignment per aspect type can be authored today, the returned result contains one element at most.
     
     **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
     
     **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param categoryId - Category identifier that is used for searching the page assignment. Must be provided if no `productId` is provided.
     * @param productId - Product identifier that is used for searching the page assignment. Must be provided if no `categoryId` is provided.
     * @param aspectTypeId - Aspect type identifier that is used for searching the page assignment in conjunction with either the `productId` or `categoryId`.
     * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
     * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PageResult otherwise.
     *
     */
    getPages<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            categoryId?: string;
            productId?: string;
            aspectTypeId: string;
            aspectAttributes?: string;
            parameters?: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PageResult>;
    /**
     * Get a Page Designer page based on a single page ID. The results will apply the visibility rules for the page's components, such as personalization or scheduled visibility.
     
     **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
     
     **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
     *
     * If you would like to get a raw Response object use the other getPage function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param pageId - Identifier for the requested page.
     * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
     * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Page.
     *
     */
    getPage(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            pageId: string;
            aspectAttributes?: string;
            parameters?: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Page>;
    /**
     * Get a Page Designer page based on a single page ID. The results will apply the visibility rules for the page's components, such as personalization or scheduled visibility.
     
     **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
     
     **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param pageId - Identifier for the requested page.
     * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
     * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Page otherwise.
     *
     */
    getPage<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            pageId: string;
            aspectAttributes?: string;
            parameters?: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Page>;
}
declare namespace ShopperExperienceTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type PageResult = {
        data: Array<Page>;
    } & {
        [key: string]: any;
    };
    type Page = {
        id: string;
        typeId: string;
        aspectTypeId?: string;
        name?: string;
        description?: string;
        pageTitle?: string;
        pageDescription?: string;
        pageKeywords?: string;
        data?: {} & {
            [key: string]: any;
        };
        custom?: {} & {
            [key: string]: any;
        };
        regions?: Array<Region>;
    } & {
        [key: string]: any;
    };
    type Region = {
        id: string;
        components?: Array<Component>;
    } & {
        [key: string]: any;
    };
    type Component = {
        id: string;
        typeId: string;
        data?: {} & {
            [key: string]: any;
        };
        custom?: {} & {
            [key: string]: any;
        };
        regions?: Array<Region>;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query$3;
        sorts?: Array<Sort$3>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition$2;
        id?: string;
        name: L10nString$2;
        description: L10nString$2;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString$2;
        possibleValues?: Array<PropertyValueDefinition$2>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query$3;
        sorts?: Array<Sort$3>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter$3>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query$3;
        sorts?: Array<Sort$3>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter$3;
        query: Query$3;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query$3;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$3;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$3;
        termQuery?: TermQuery$3;
        textQuery?: TextQuery$3;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition$2;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition$2>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    /**
     * All path parameters that are used by at least one ShopperExperience method.
     */
    type ShopperExperiencePathParameters = {
        organizationId?: string;
        pageId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperExperience method.
     */
    type ShopperExperienceQueryParameters = {
        categoryId?: string;
        productId?: string;
        aspectTypeId?: string;
        aspectAttributes?: string;
        parameters?: string;
        siteId?: string;
        locale?: string;
    };
    /**
     * All parameters that are used by ShopperExperience.
     */
    type ShopperExperienceParameters = ShopperExperiencePathParameters & BaseUriParameters & ShopperExperienceQueryParameters;
    /**
     * [Shopper Experience](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-experience:Summary)
     * ==================================
     *
     * **<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperExperience } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperExperienceClient = new ShopperExperience(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.0.5<br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperExperience<ConfigParameters extends ShopperExperienceParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/experience/shopper-experience/{version}";
        static readonly apiPaths: {
            getPages: string;
            getPage: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly getPages: readonly [
                "organizationId",
                "categoryId",
                "productId",
                "aspectTypeId",
                "aspectAttributes",
                "parameters",
                "siteId",
                "locale"
            ];
            readonly getPagesRequired: readonly [
                "organizationId",
                "aspectTypeId",
                "siteId"
            ];
            readonly getPage: readonly [
                "organizationId",
                "pageId",
                "aspectAttributes",
                "parameters",
                "siteId",
                "locale"
            ];
            readonly getPageRequired: readonly [
                "organizationId",
                "pageId",
                "siteId"
            ];
        };
        /**
         * Get Page Designer pages. The results will apply the visibility rules for each page's components, such as personalization or scheduled visibility.
         
         Either `categoryId` or `productId` must be given in addition to `aspectTypeId`. Because only a single page-to-product and page-to-category assignment per aspect type can be authored today, the returned result contains one element at most.
         
         **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
         
         **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
         *
         * If you would like to get a raw Response object use the other getPages function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param categoryId - Category identifier that is used for searching the page assignment. Must be provided if no `productId` is provided.
         * @param productId - Product identifier that is used for searching the page assignment. Must be provided if no `categoryId` is provided.
         * @param aspectTypeId - Aspect type identifier that is used for searching the page assignment in conjunction with either the `productId` or `categoryId`.
         * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
         * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PageResult.
         *
         */
        getPages(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                categoryId?: string;
                productId?: string;
                aspectTypeId: string;
                aspectAttributes?: string;
                parameters?: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<PageResult>;
        /**
         * Get Page Designer pages. The results will apply the visibility rules for each page's components, such as personalization or scheduled visibility.
         
         Either `categoryId` or `productId` must be given in addition to `aspectTypeId`. Because only a single page-to-product and page-to-category assignment per aspect type can be authored today, the returned result contains one element at most.
         
         **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
         
         **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param categoryId - Category identifier that is used for searching the page assignment. Must be provided if no `productId` is provided.
         * @param productId - Product identifier that is used for searching the page assignment. Must be provided if no `categoryId` is provided.
         * @param aspectTypeId - Aspect type identifier that is used for searching the page assignment in conjunction with either the `productId` or `categoryId`.
         * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
         * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PageResult otherwise.
         *
         */
        getPages<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                categoryId?: string;
                productId?: string;
                aspectTypeId: string;
                aspectAttributes?: string;
                parameters?: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : PageResult>;
        /**
         * Get a Page Designer page based on a single page ID. The results will apply the visibility rules for the page's components, such as personalization or scheduled visibility.
         
         **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
         
         **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
         *
         * If you would like to get a raw Response object use the other getPage function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param pageId - Identifier for the requested page.
         * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
         * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Page.
         *
         */
        getPage(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                pageId: string;
                aspectAttributes?: string;
                parameters?: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Page>;
        /**
         * Get a Page Designer page based on a single page ID. The results will apply the visibility rules for the page's components, such as personalization or scheduled visibility.
         
         **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
         
         **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param pageId - Identifier for the requested page.
         * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
         * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Page otherwise.
         *
         */
        getPage<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                pageId: string;
                aspectAttributes?: string;
                parameters?: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Page>;
    }
}
type GiftCertificate = {
    amount: number;
    balance: number;
    description?: string;
    enabled: boolean;
    maskedGiftCertificateCode: string;
    merchantId: string;
    message?: string;
    recipientEmail: string;
    recipientName: string;
    senderName: string;
    status: string;
} & {
    [key: string]: any;
};
type GiftCertificateRequest = {
    giftCertificateCode: string;
};
type RangeFilter$4 = {
    [key: string]: any;
};
type BoolFilter$4 = {
    filters?: Array<Filter$3>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$4 = {} & {
    [key: string]: any;
};
type FilteredQuery$4 = {
    filter: Filter$3;
    query: Query$3;
} & {
    [key: string]: any;
};
type QueryFilter$4 = {
    query: Query$3;
} & {
    [key: string]: any;
};
type Query$4 = {
    boolQuery?: BoolQuery$3;
    filteredQuery?: FilteredQuery$4;
    matchAllQuery?: MatchAllQuery$4;
    nestedQuery?: NestedQuery$3;
    termQuery?: TermQuery$3;
    textQuery?: TextQuery$3;
} & {
    [key: string]: any;
};
type TermQuery$4 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$4 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$4 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$4 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$4 = {
    must?: Array<Query$4>;
    mustNot?: Array<Query$4>;
    should?: Array<Query$4>;
} & {
    [key: string]: any;
};
type NestedQuery$4 = {
    path: string;
    query: Query$4;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$4 = {
    boolFilter?: BoolFilter$4;
    queryFilter?: QueryFilter$4;
    range2Filter?: Range2Filter$4;
    rangeFilter?: RangeFilter$4;
    termFilter?: TermFilter$4;
} & {
    [key: string]: any;
};
type Sort$4 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type L10nString$3 = {} & {
    [key: string]: any;
};
type PropertyValueDefinition$3 = {
    description: L10nString$3;
    displayValue: L10nString$3;
    id: string;
    position?: number;
    value: string;
};
/**
 * All path parameters that are used by at least one ShopperGiftCertificates method.
 */
type ShopperGiftCertificatesPathParameters = {
    organizationId?: string;
};
/**
 * All query parameters that are used by at least one ShopperGiftCertificates method.
 */
type ShopperGiftCertificatesQueryParameters = {
    siteId?: string;
};
/**
 * All parameters that are used by ShopperGiftCertificates.
 */
type ShopperGiftCertificatesParameters = ShopperGiftCertificatesPathParameters & BaseUriParameters & ShopperGiftCertificatesQueryParameters;
/**
 * [Shopper Gift Certificates](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-gift-certificates:Summary)
 * ==================================
 *
 * *Obtain details about a gift certificate.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperGiftCertificates } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperGiftCertificatesClient = new ShopperGiftCertificates(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.0.17<br />
 * Last Updated: <br />
 * </span>
 *
 *
 */
declare class ShopperGiftCertificates<ConfigParameters extends ShopperGiftCertificatesParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/pricing/shopper-gift-certificates/{version}";
    static readonly apiPaths: {
        getGiftCertificate: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly getGiftCertificate: readonly [
            "organizationId",
            "siteId"
        ];
        readonly getGiftCertificateRequired: readonly [
            "organizationId",
            "siteId"
        ];
    };
    /**
     * Action to retrieve an existing gift certificate.
     *
     * If you would like to get a raw Response object use the other getGiftCertificate function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type GiftCertificate.
     *
     */
    getGiftCertificate(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateRequest;
    }>): Promise<GiftCertificate>;
    /**
     * Action to retrieve an existing gift certificate.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type GiftCertificate otherwise.
     *
     */
    getGiftCertificate<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : GiftCertificate>;
}
declare namespace ShopperGiftCertificatesTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type GiftCertificate = {
        amount: number;
        balance: number;
        description?: string;
        enabled: boolean;
        maskedGiftCertificateCode: string;
        merchantId: string;
        message?: string;
        recipientEmail: string;
        recipientName: string;
        senderName: string;
        status: string;
    } & {
        [key: string]: any;
    };
    type GiftCertificateRequest = {
        giftCertificateCode: string;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query$4;
        sorts?: Array<Sort$4>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition$3;
        id?: string;
        name: L10nString$3;
        description: L10nString$3;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString$3;
        possibleValues?: Array<PropertyValueDefinition$3>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query$4;
        sorts?: Array<Sort$4>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter$4>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query$4;
        sorts?: Array<Sort$4>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter$4;
        query: Query$4;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query$4;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$4;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$4;
        termQuery?: TermQuery$4;
        textQuery?: TextQuery$4;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition$3;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition$3>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    /**
     * All path parameters that are used by at least one ShopperGiftCertificates method.
     */
    type ShopperGiftCertificatesPathParameters = {
        organizationId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperGiftCertificates method.
     */
    type ShopperGiftCertificatesQueryParameters = {
        siteId?: string;
    };
    /**
     * All parameters that are used by ShopperGiftCertificates.
     */
    type ShopperGiftCertificatesParameters = ShopperGiftCertificatesPathParameters & BaseUriParameters & ShopperGiftCertificatesQueryParameters;
    /**
     * [Shopper Gift Certificates](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-gift-certificates:Summary)
     * ==================================
     *
     * *Obtain details about a gift certificate.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperGiftCertificates } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperGiftCertificatesClient = new ShopperGiftCertificates(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.0.17<br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperGiftCertificates<ConfigParameters extends ShopperGiftCertificatesParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/pricing/shopper-gift-certificates/{version}";
        static readonly apiPaths: {
            getGiftCertificate: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly getGiftCertificate: readonly [
                "organizationId",
                "siteId"
            ];
            readonly getGiftCertificateRequired: readonly [
                "organizationId",
                "siteId"
            ];
        };
        /**
         * Action to retrieve an existing gift certificate.
         *
         * If you would like to get a raw Response object use the other getGiftCertificate function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type GiftCertificate.
         *
         */
        getGiftCertificate(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: GiftCertificateRequest;
        }>): Promise<GiftCertificate>;
        /**
         * Action to retrieve an existing gift certificate.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type GiftCertificate otherwise.
         *
         */
        getGiftCertificate<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: GiftCertificateRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : GiftCertificate>;
    }
}
type BoolFilter$5 = {
    filters?: Array<Filter$4>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$5 = {} & {
    [key: string]: any;
};
type FilteredQuery$5 = {
    filter: Filter$4;
    query: Query$4;
} & {
    [key: string]: any;
};
type QueryFilter$5 = {
    query: Query$4;
} & {
    [key: string]: any;
};
type Query$5 = {
    boolQuery?: BoolQuery$4;
    filteredQuery?: FilteredQuery$5;
    matchAllQuery?: MatchAllQuery$5;
    nestedQuery?: NestedQuery$4;
    termQuery?: TermQuery$4;
    textQuery?: TextQuery$4;
} & {
    [key: string]: any;
};
type TermQuery$5 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$5 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$5 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$5 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$5 = {
    must?: Array<Query$5>;
    mustNot?: Array<Query$5>;
    should?: Array<Query$5>;
} & {
    [key: string]: any;
};
type NestedQuery$5 = {
    path: string;
    query: Query$5;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$5 = {
    boolFilter?: BoolFilter$5;
    queryFilter?: QueryFilter$5;
    range2Filter?: Range2Filter$5;
    rangeFilter?: RangeFilter$4;
    termFilter?: TermFilter$5;
} & {
    [key: string]: any;
};
type Sort$5 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type RangeFilter$5 = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
} & {
    [key: string]: any;
};
type L10nString$4 = {} & {
    [key: string]: any;
};
type PropertyValueDefinition$4 = {
    description: L10nString$4;
    displayValue: L10nString$4;
    id: string;
    position?: number;
    value: string;
};
type PaymentCardSpec$0 = {
    cardType?: string;
    checksumVerificationEnabled?: boolean;
    description?: string;
    image?: string;
    name?: string;
    numberLengths?: Array<string>;
    numberPrefixes?: Array<string>;
    securityCodeLength?: number;
} & {
    [key: string]: any;
};
type OrderAddress$1 = {
    address1?: string;
    address2?: string;
    city?: string;
    companyName?: string;
    countryCode?: string;
    firstName?: string;
    fullName?: string;
    id?: string;
    jobTitle?: string;
    lastName?: string;
    phone?: string;
    postBox?: string;
    postalCode?: string;
    salutation?: string;
    secondName?: string;
    stateCode?: string;
    suffix?: string;
    suite?: string;
    title?: string;
} & {
    [key: string]: any;
};
type PaymentCard$1 = {
    cardType?: string;
    creditCardExpired?: boolean;
    creditCardToken?: string;
    expirationMonth?: number;
    expirationYear?: number;
    holder?: string;
    issueNumber?: string;
    maskedNumber?: string;
    numberLastDigits?: string;
    validFromMonth?: number;
    validFromYear?: number;
};
type ShippingItem$1 = {
    adjustedTax?: number;
    basePrice?: number;
    itemId?: string;
    itemText?: string;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment$0>;
    priceAfterItemDiscount?: number;
    shipmentId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type Discount$1 = {
    amount?: number;
    percentage?: number;
    priceBookId?: string;
    type: string;
} & {
    [key: string]: any;
};
type Note$0 = {
    createdBy?: string;
    creationDate?: any;
    id?: string;
    subject?: string;
    text?: string;
};
type CouponItem$1 = {
    code: string;
    couponItemId?: string;
    statusCode?: string;
    valid?: boolean;
} & {
    [key: string]: any;
};
type ShippingPromotion$1 = {
    calloutMsg?: string;
    promotionId?: string;
    promotionName?: string;
} & {
    [key: string]: any;
};
type ProductItem$1 = {
    adjustedTax?: number;
    basePrice?: number;
    bonusDiscountLineItemId?: string;
    bonusProductLineItem?: boolean;
    bundledProductItems?: Array<ProductItem$1>;
    gift?: boolean;
    giftMessage?: string;
    inventoryId?: string;
    itemId?: string;
    itemText?: string;
    optionItems?: Array<OptionItem$0>;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment$0>;
    priceAfterItemDiscount?: number;
    priceAfterOrderDiscount?: number;
    productId?: string;
    productListItem?: ProductListItemReference$0;
    productName?: string;
    quantity?: number;
    shipmentId?: string;
    shippingItemId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type Taxes$0 = {
    taxes: {} & {
        [key: string]: any;
    };
};
type OrderPaymentInstrument$1 = {
    amount?: number;
    authorizationStatus?: Status$0;
    bankRoutingNumber?: string;
    maskedGiftCertificateCode?: string;
    paymentCard?: PaymentCard$1;
    paymentInstrumentId?: string;
    paymentMethodId?: string;
} & {
    [key: string]: any;
};
type BonusDiscountLineItem$1 = {
    bonusProducts?: Array<ProductDetailsLink$0>;
    couponCode?: string;
    id?: string;
    maxBonusItems?: number;
    promotionId?: string;
} & {
    [key: string]: any;
};
type PaymentMethodResult$0 = {
    applicablePaymentMethods?: Array<PaymentMethod>;
} & {
    [key: string]: any;
};
type Shipment$1 = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    gift?: boolean;
    giftMessage?: string;
    merchandizeTotalTax?: number;
    productSubTotal?: number;
    productTotal?: number;
    shipmentId?: string;
    shipmentNo?: string;
    shipmentTotal?: number;
    shippingAddress?: OrderAddress$1;
    shippingMethod?: ShippingMethod$0;
    shippingStatus?: string;
    shippingTotal?: number;
    shippingTotalTax?: number;
    taxTotal?: number;
    trackingNumber?: string;
} & {
    [key: string]: any;
};
type CustomerInfo$1 = {
    customerId?: string;
    customerName?: string;
    customerNo?: string;
    email: string;
} & {
    [key: string]: any;
};
type SimpleLink$1 = {};
type PriceAdjustment$1 = {
    appliedDiscount?: Discount$1;
    couponCode?: string;
    createdBy?: string;
    creationDate?: any;
    custom?: boolean;
    itemText?: string;
    lastModified?: any;
    manual?: boolean;
    price?: number;
    priceAdjustmentId?: string;
    promotionId?: string;
    promotionLink?: string;
    reasonCode?: string;
} & {
    [key: string]: any;
};
type ProductDetailsLink$1 = {
    productDescription?: string;
    productId: string;
    productName?: string;
    title?: string;
};
type OptionItem$1 = {
    adjustedTax?: number;
    basePrice?: number;
    bonusDiscountLineItemId?: string;
    bonusProductLineItem?: boolean;
    bundledProductItems?: Array<ProductItem$1>;
    gift?: boolean;
    giftMessage?: string;
    inventoryId?: string;
    itemId?: string;
    itemText?: string;
    optionId: string;
    optionItems?: Array<OptionItem$1>;
    optionValueId: string;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment$1>;
    priceAfterItemDiscount?: number;
    priceAfterOrderDiscount?: number;
    productId?: string;
    productListItem?: ProductListItemReference$0;
    productName?: string;
    quantity?: number;
    shipmentId?: string;
    shippingItemId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type ShippingMethod$1 = {
    description?: string;
    externalShippingMethod?: string;
    id: string;
    name?: string;
    price?: number;
    shippingPromotions?: Array<ShippingPromotion$1>;
} & {
    [key: string]: any;
};
type DiscountRequest$0 = {
    type: string;
    value: number;
};
type Basket$1 = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    agentBasket?: boolean;
    basketId?: string;
    billingAddress?: OrderAddress$1;
    bonusDiscountLineItems?: Array<BonusDiscountLineItem$1>;
    channelType?: string;
    couponItems?: Array<CouponItem$1>;
    creationDate?: any;
    currency?: string;
    customerInfo?: CustomerInfo$1;
    giftCertificateItems?: Array<GiftCertificateItem$0>;
    groupedTaxItems?: Array<GroupedTaxItem$0>;
    inventoryReservationExpiry?: any;
    lastModified?: any;
    merchandizeTotalTax?: number;
    notes?: SimpleLink$1;
    orderPriceAdjustments?: Array<PriceAdjustment$1>;
    orderTotal?: number;
    paymentInstruments?: Array<OrderPaymentInstrument$1>;
    productItems?: Array<ProductItem$1>;
    productSubTotal?: number;
    productTotal?: number;
    shipments?: Array<Shipment$1>;
    shippingItems?: Array<ShippingItem$1>;
    shippingTotal?: number;
    shippingTotalTax?: number;
    sourceCode?: string;
    taxTotal?: number;
    taxation?: string;
    taxRoundedAtGroup?: boolean;
    temporaryBasket?: boolean;
} & {
    [key: string]: any;
};
type OrderLookupRequest$0 = {
    email: string;
    orderViewCode: string;
};
type OrderPaymentInstrumentRequest$0 = {
    amount?: number;
    bankRoutingNumber?: string;
    giftCertificateCode?: string;
    paymentCard?: OrderPaymentCardRequest;
    paymentMethodId?: string;
} & {
    [key: string]: any;
};
type GiftCertificateItem$1 = {
    amount: number;
    giftCertificateItemId?: string;
    message?: string;
    recipientEmail: string;
    recipientName?: string;
    senderName?: string;
    shipmentId?: string;
} & {
    [key: string]: any;
};
type ProductListLink$1 = {
    description?: string;
    name?: string;
    public?: boolean;
    title?: string;
    type?: string;
} & {
    [key: string]: any;
};
type GroupedTaxItem$1 = {
    taxRate?: number;
    taxValue?: number;
};
type Order$1 = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    billingAddress?: OrderAddress$1;
    bonusDiscountLineItems?: Array<BonusDiscountLineItem$1>;
    channelType?: string;
    confirmationStatus?: string;
    couponItems?: Array<CouponItem$1>;
    createdBy?: string;
    creationDate?: any;
    currency?: string;
    customerInfo?: CustomerInfo$1;
    customerName?: string;
    exportStatus?: string;
    externalOrderStatus?: string;
    giftCertificateItems?: Array<GiftCertificateItem$1>;
    globalPartyId?: string;
    groupedTaxItems?: Array<GroupedTaxItem$1>;
    guest?: boolean;
    lastModified?: any;
    merchandizeTotalTax?: number;
    notes?: SimpleLink$1;
    orderNo?: string;
    orderPriceAdjustments?: Array<PriceAdjustment$1>;
    orderToken?: string;
    orderTotal?: number;
    orderViewCode?: string;
    paymentInstruments?: Array<OrderPaymentInstrument$1>;
    paymentStatus?: string;
    productItems?: Array<ProductItem$1>;
    productSubTotal?: number;
    productTotal?: number;
    shipments?: Array<Shipment$1>;
    shippingItems?: Array<ShippingItem$1>;
    shippingStatus?: string;
    shippingTotal?: number;
    shippingTotalTax?: number;
    siteId?: string;
    sourceCode?: string;
    status?: string;
    taxRoundedAtGroup?: boolean;
    taxTotal?: number;
    taxation?: string;
} & {
    [key: string]: any;
};
type OrderPaymentCardRequest$0 = {
    cardType?: string;
    creditCardToken?: string;
    expirationMonth?: number;
    expirationYear?: number;
    holder?: string;
    issueNumber?: string;
    maskedNumber?: string;
    validFromMonth?: number;
    validFromYear?: number;
};
type PaymentMethod$0 = {
    cards?: Array<PaymentCardSpec$0>;
    description?: string;
    id: string;
    image?: string;
    name?: string;
    paymentProcessorId?: string;
} & {
    [key: string]: any;
};
type TaxItem$0 = {
    id: string;
    rate: number;
    value?: number;
};
type Status$1 = {
    code?: string;
    message?: string;
    status?: number;
};
type ProductListItemReference$1 = {
    id: string;
    priority?: number;
    productDetailsLink?: ProductDetailsLink$1;
    productList?: ProductListLink$1;
    public?: boolean;
    purchasedQuantity?: number;
    quantity?: number;
    type?: string;
};
/**
 * All path parameters that are used by at least one ShopperOrders method.
 */
type ShopperOrdersPathParameters = {
    organizationId?: string;
    orderNo?: string;
    paymentInstrumentId?: string;
};
/**
 * All query parameters that are used by at least one ShopperOrders method.
 */
type ShopperOrdersQueryParameters = {
    siteId?: string;
    locale?: string;
};
/**
 * All parameters that are used by ShopperOrders.
 */
type ShopperOrdersParameters = ShopperOrdersPathParameters & BaseUriParameters & ShopperOrdersQueryParameters;
/**
 * [Shopper Orders](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-orders:Summary)
 * ==================================
 *
 * *Finish the shopper checkout experience resulting in an order.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperOrders } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperOrdersClient = new ShopperOrders(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 0.4.8<br />
 * Last Updated: <br />
 * </span>
 *
 *
 */
declare class ShopperOrders<ConfigParameters extends ShopperOrdersParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-orders/{version}";
    static readonly apiPaths: {
        createOrder: string;
        getOrder: string;
        guestOrderLookup: string;
        createPaymentInstrumentForOrder: string;
        removePaymentInstrumentFromOrder: string;
        updatePaymentInstrumentForOrder: string;
        getPaymentMethodsForOrder: string;
        getTaxesFromOrder: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly createOrder: readonly [
            "organizationId",
            "siteId",
            "locale"
        ];
        readonly createOrderRequired: readonly [
            "organizationId",
            "siteId"
        ];
        readonly getOrder: readonly [
            "organizationId",
            "orderNo",
            "siteId",
            "locale"
        ];
        readonly getOrderRequired: readonly [
            "organizationId",
            "orderNo",
            "siteId"
        ];
        readonly guestOrderLookup: readonly [
            "organizationId",
            "orderNo",
            "siteId",
            "locale"
        ];
        readonly guestOrderLookupRequired: readonly [
            "organizationId",
            "orderNo",
            "siteId"
        ];
        readonly createPaymentInstrumentForOrder: readonly [
            "organizationId",
            "orderNo",
            "siteId",
            "locale"
        ];
        readonly createPaymentInstrumentForOrderRequired: readonly [
            "organizationId",
            "orderNo",
            "siteId"
        ];
        readonly removePaymentInstrumentFromOrder: readonly [
            "organizationId",
            "orderNo",
            "paymentInstrumentId",
            "siteId",
            "locale"
        ];
        readonly removePaymentInstrumentFromOrderRequired: readonly [
            "organizationId",
            "orderNo",
            "paymentInstrumentId",
            "siteId"
        ];
        readonly updatePaymentInstrumentForOrder: readonly [
            "organizationId",
            "orderNo",
            "paymentInstrumentId",
            "siteId",
            "locale"
        ];
        readonly updatePaymentInstrumentForOrderRequired: readonly [
            "organizationId",
            "orderNo",
            "paymentInstrumentId",
            "siteId"
        ];
        readonly getPaymentMethodsForOrder: readonly [
            "organizationId",
            "orderNo",
            "siteId",
            "locale"
        ];
        readonly getPaymentMethodsForOrderRequired: readonly [
            "organizationId",
            "orderNo",
            "siteId"
        ];
        readonly getTaxesFromOrder: readonly [
            "organizationId",
            "orderNo",
            "siteId"
        ];
        readonly getTaxesFromOrderRequired: readonly [
            "organizationId",
            "orderNo",
            "siteId"
        ];
    };
    /**
     * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
     *
     * If you would like to get a raw Response object use the other createOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Order.
     *
     */
    createOrder(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket$1;
    }>): Promise<Order$1>;
    /**
     * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
    createOrder<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket$1;
    }>, rawResponse?: T): Promise<T extends true ? Response : Order$1>;
    /**
     * Gets information for an order.
     *
     * If you would like to get a raw Response object use the other getOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Order.
     *
     */
    getOrder(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Order$1>;
    /**
     * Gets information for an order.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
    getOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Order$1>;
    /**
     * Use this endpoint to lookup a guest order.
     
     **Important**: This endpoint uses the [ShopperTokenTsob](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-login?meta=security%3AShopperTokenTsob) security scheme. Always check the Security section of the endpoint documentation, which is hidden by default.
     
     The API uses the `orderViewCode` generated during the order creation and the `email` of the order customer to lookup a guest order. If email is not provided on the order, the field can be left blank in the lookup request.
     **Note**: In the no email on order scenario, the custom implementation must include an additional verification of an order attribute. For example, a postal code or mobile number.
     
     This API can also be used for looking up an order for a registered customer. In addition to the verification steps used for guest order lookup, the API also verifies that the customer ID of the order matches with the customer ID supplied in the `ShopperTokenTsob`.
     
     
     *
     * If you would like to get a raw Response object use the other guestOrderLookup function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Order.
     *
     */
    guestOrderLookup(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderLookupRequest$0;
    }>): Promise<Order$1>;
    /**
     * Use this endpoint to lookup a guest order.
     
     **Important**: This endpoint uses the [ShopperTokenTsob](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-login?meta=security%3AShopperTokenTsob) security scheme. Always check the Security section of the endpoint documentation, which is hidden by default.
     
     The API uses the `orderViewCode` generated during the order creation and the `email` of the order customer to lookup a guest order. If email is not provided on the order, the field can be left blank in the lookup request.
     **Note**: In the no email on order scenario, the custom implementation must include an additional verification of an order attribute. For example, a postal code or mobile number.
     
     This API can also be used for looking up an order for a registered customer. In addition to the verification steps used for guest order lookup, the API also verifies that the customer ID of the order matches with the customer ID supplied in the `ShopperTokenTsob`.
     
     
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
    guestOrderLookup<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderLookupRequest$0;
    }>, rawResponse?: T): Promise<T extends true ? Response : Order$1>;
    /**
     * Adds a payment instrument to an order.
     
     Details:
     
     The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
     /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
     *
     * If you would like to get a raw Response object use the other createPaymentInstrumentForOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Order.
     *
     */
    createPaymentInstrumentForOrder(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrumentRequest$0;
    }>): Promise<Order$1>;
    /**
     * Adds a payment instrument to an order.
     
     Details:
     
     The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
     /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
    createPaymentInstrumentForOrder<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrumentRequest$0;
    }>, rawResponse?: T): Promise<T extends true ? Response : Order$1>;
    /**
     * Removes a payment instrument of an order.
     *
     * If you would like to get a raw Response object use the other removePaymentInstrumentFromOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Order.
     *
     */
    removePaymentInstrumentFromOrder(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Order$1>;
    /**
     * Removes a payment instrument of an order.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
    removePaymentInstrumentFromOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Order$1>;
    /**
     * Updates a payment instrument of an order.
     
     Details:
     
     The payment instrument is updated with the provided details. The payment method must be applicable for the
     order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
     paymentCard must be specified in the request.
     *
     * If you would like to get a raw Response object use the other updatePaymentInstrumentForOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Order.
     *
     */
    updatePaymentInstrumentForOrder(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrumentRequest$0;
    }>): Promise<Order$1>;
    /**
     * Updates a payment instrument of an order.
     
     Details:
     
     The payment instrument is updated with the provided details. The payment method must be applicable for the
     order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
     paymentCard must be specified in the request.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
    updatePaymentInstrumentForOrder<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrumentRequest$0;
    }>, rawResponse?: T): Promise<T extends true ? Response : Order$1>;
    /**
     * Gets the applicable payment methods for an existing order considering the open payment amount only.
     *
     * If you would like to get a raw Response object use the other getPaymentMethodsForOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PaymentMethodResult.
     *
     */
    getPaymentMethodsForOrder(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PaymentMethodResult$0>;
    /**
     * Gets the applicable payment methods for an existing order considering the open payment amount only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.
     *
     */
    getPaymentMethodsForOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PaymentMethodResult$0>;
    /**
     * This method gives you the external taxation data of the order transferred from the basket during
     order creation. This endpoint can be called only if external taxation was used. See POST /baskets
     for more information.
     *
     * If you would like to get a raw Response object use the other getTaxesFromOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Taxes.
     *
     */
    getTaxesFromOrder(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Taxes$0>;
    /**
     * This method gives you the external taxation data of the order transferred from the basket during
     order creation. This endpoint can be called only if external taxation was used. See POST /baskets
     for more information.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.
     *
     */
    getTaxesFromOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Taxes$0>;
}
declare namespace ShopperOrdersTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query$5;
        sorts?: Array<Sort$5>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition$4;
        id?: string;
        name: L10nString$4;
        description: L10nString$4;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString$4;
        possibleValues?: Array<PropertyValueDefinition$4>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query$5;
        sorts?: Array<Sort$5>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter$5>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query$5;
        sorts?: Array<Sort$5>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter$5;
        query: Query$5;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query$5;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$5;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$5;
        termQuery?: TermQuery$5;
        textQuery?: TextQuery$5;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter$5;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        field: string;
        from?: any;
        fromInclusive?: boolean;
        to?: any;
        toInclusive?: boolean;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition$4;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition$4>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    type TaxItems = {
        taxItems?: Array<TaxItem$0>;
    } & {
        [key: string]: any;
    };
    type PaymentCardSpec = {
        cardType?: string;
        checksumVerificationEnabled?: boolean;
        description?: string;
        image?: string;
        name?: string;
        numberLengths?: Array<string>;
        numberPrefixes?: Array<string>;
        securityCodeLength?: number;
    } & {
        [key: string]: any;
    };
    type OrderAddress = {
        address1?: string;
        address2?: string;
        city?: string;
        companyName?: string;
        countryCode?: string;
        firstName?: string;
        fullName?: string;
        id?: string;
        jobTitle?: string;
        lastName?: string;
        phone?: string;
        postBox?: string;
        postalCode?: string;
        salutation?: string;
        secondName?: string;
        stateCode?: string;
        suffix?: string;
        suite?: string;
        title?: string;
    } & {
        [key: string]: any;
    };
    type PriceAdjustmentRequest = {
        discount?: DiscountRequest$0;
        itemId?: string;
        itemText?: string;
        level: string;
        promotionId?: string;
        reasonCode?: string;
    } & {
        [key: string]: any;
    };
    type PaymentCard = {
        cardType?: string;
        creditCardExpired?: boolean;
        creditCardToken?: string;
        expirationMonth?: number;
        expirationYear?: number;
        holder?: string;
        issueNumber?: string;
        maskedNumber?: string;
        numberLastDigits?: string;
        validFromMonth?: number;
        validFromYear?: number;
    };
    type NotesResult = {
        notes?: Array<Note$0>;
    } & {
        [key: string]: any;
    };
    type ShippingItem = {
        adjustedTax?: number;
        basePrice?: number;
        itemId?: string;
        itemText?: string;
        price?: number;
        priceAdjustments?: Array<PriceAdjustment$1>;
        priceAfterItemDiscount?: number;
        shipmentId?: string;
        tax?: number;
        taxBasis?: number;
        taxClassId?: string;
        taxRate?: number;
    } & {
        [key: string]: any;
    };
    type Discount = {
        amount?: number;
        percentage?: number;
        priceBookId?: string;
        type: string;
    } & {
        [key: string]: any;
    };
    type Note = {
        createdBy?: string;
        creationDate?: any;
        id?: string;
        subject?: string;
        text?: string;
    };
    type CouponItem = {
        code: string;
        couponItemId?: string;
        statusCode?: string;
        valid?: boolean;
    } & {
        [key: string]: any;
    };
    type PromotionLink = {
        calloutMsg?: string;
        name?: string;
        promotionId?: string;
        title?: string;
    };
    type PriceBookIds = Array<string>;
    type ShippingPromotion = {
        calloutMsg?: string;
        promotionId?: string;
        promotionName?: string;
    } & {
        [key: string]: any;
    };
    type ProductItem = {
        adjustedTax?: number;
        basePrice?: number;
        bonusDiscountLineItemId?: string;
        bonusProductLineItem?: boolean;
        bundledProductItems?: Array<ProductItem>;
        gift?: boolean;
        giftMessage?: string;
        inventoryId?: string;
        itemId?: string;
        itemText?: string;
        optionItems?: Array<OptionItem$1>;
        price?: number;
        priceAdjustments?: Array<PriceAdjustment$1>;
        priceAfterItemDiscount?: number;
        priceAfterOrderDiscount?: number;
        productId?: string;
        productListItem?: ProductListItemReference$1;
        productName?: string;
        quantity?: number;
        shipmentId?: string;
        shippingItemId?: string;
        tax?: number;
        taxBasis?: number;
        taxClassId?: string;
        taxRate?: number;
    } & {
        [key: string]: any;
    };
    type BasketPaymentInstrumentRequest = {
        amount?: number;
        bankRoutingNumber?: string;
        giftCertificateCode?: string;
        paymentCard?: OrderPaymentCardRequest$0;
        paymentMethodId?: string;
    } & {
        [key: string]: any;
    };
    type Taxes = {
        taxes: {} & {
            [key: string]: any;
        };
    };
    type OrderPaymentInstrument = {
        amount?: number;
        authorizationStatus?: Status$1;
        bankRoutingNumber?: string;
        maskedGiftCertificateCode?: string;
        paymentCard?: PaymentCard;
        paymentInstrumentId?: string;
        paymentMethodId?: string;
    } & {
        [key: string]: any;
    };
    type BonusDiscountLineItem = {
        bonusProducts?: Array<ProductDetailsLink$1>;
        couponCode?: string;
        id?: string;
        maxBonusItems?: number;
        promotionId?: string;
    } & {
        [key: string]: any;
    };
    type PaymentMethodResult = {
        applicablePaymentMethods?: Array<PaymentMethod$0>;
    } & {
        [key: string]: any;
    };
    type Shipment = {
        adjustedMerchandizeTotalTax?: number;
        adjustedShippingTotalTax?: number;
        gift?: boolean;
        giftMessage?: string;
        merchandizeTotalTax?: number;
        productSubTotal?: number;
        productTotal?: number;
        shipmentId?: string;
        shipmentNo?: string;
        shipmentTotal?: number;
        shippingAddress?: OrderAddress;
        shippingMethod?: ShippingMethod$1;
        shippingStatus?: string;
        shippingTotal?: number;
        shippingTotalTax?: number;
        taxTotal?: number;
        trackingNumber?: string;
    } & {
        [key: string]: any;
    };
    type CustomerInfo = {
        customerId?: string;
        customerName?: string;
        customerNo?: string;
        email: string;
    } & {
        [key: string]: any;
    };
    type SimpleLink = {};
    type PriceAdjustment = {
        appliedDiscount?: Discount;
        couponCode?: string;
        createdBy?: string;
        creationDate?: any;
        custom?: boolean;
        itemText?: string;
        lastModified?: any;
        manual?: boolean;
        price?: number;
        priceAdjustmentId?: string;
        promotionId?: string;
        promotionLink?: string;
        reasonCode?: string;
    } & {
        [key: string]: any;
    };
    type ShippingMethodResult = {
        applicableShippingMethods?: Array<ShippingMethod$1>;
        defaultShippingMethodId?: string;
    } & {
        [key: string]: any;
    };
    type ProductDetailsLink = {
        productDescription?: string;
        productId: string;
        productName?: string;
        title?: string;
    };
    type OptionItem = {
        adjustedTax?: number;
        basePrice?: number;
        bonusDiscountLineItemId?: string;
        bonusProductLineItem?: boolean;
        bundledProductItems?: Array<ProductItem>;
        gift?: boolean;
        giftMessage?: string;
        inventoryId?: string;
        itemId?: string;
        itemText?: string;
        optionId: string;
        optionItems?: Array<OptionItem>;
        optionValueId: string;
        price?: number;
        priceAdjustments?: Array<PriceAdjustment>;
        priceAfterItemDiscount?: number;
        priceAfterOrderDiscount?: number;
        productId?: string;
        productListItem?: ProductListItemReference$1;
        productName?: string;
        quantity?: number;
        shipmentId?: string;
        shippingItemId?: string;
        tax?: number;
        taxBasis?: number;
        taxClassId?: string;
        taxRate?: number;
    } & {
        [key: string]: any;
    };
    type ShippingMethod = {
        description?: string;
        externalShippingMethod?: string;
        id: string;
        name?: string;
        price?: number;
        shippingPromotions?: Array<ShippingPromotion>;
    } & {
        [key: string]: any;
    };
    type DiscountRequest = {
        type: string;
        value: number;
    };
    type Basket = {
        adjustedMerchandizeTotalTax?: number;
        adjustedShippingTotalTax?: number;
        agentBasket?: boolean;
        basketId?: string;
        billingAddress?: OrderAddress;
        bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
        channelType?: string;
        couponItems?: Array<CouponItem>;
        creationDate?: any;
        currency?: string;
        customerInfo?: CustomerInfo;
        giftCertificateItems?: Array<GiftCertificateItem$1>;
        groupedTaxItems?: Array<GroupedTaxItem$1>;
        inventoryReservationExpiry?: any;
        lastModified?: any;
        merchandizeTotalTax?: number;
        notes?: SimpleLink;
        orderPriceAdjustments?: Array<PriceAdjustment>;
        orderTotal?: number;
        paymentInstruments?: Array<OrderPaymentInstrument>;
        productItems?: Array<ProductItem>;
        productSubTotal?: number;
        productTotal?: number;
        shipments?: Array<Shipment>;
        shippingItems?: Array<ShippingItem>;
        shippingTotal?: number;
        shippingTotalTax?: number;
        sourceCode?: string;
        taxTotal?: number;
        taxation?: string;
        taxRoundedAtGroup?: boolean;
        temporaryBasket?: boolean;
    } & {
        [key: string]: any;
    };
    type OrderLookupRequest = {
        email: string;
        orderViewCode: string;
    };
    type OrderPaymentInstrumentRequest = {
        amount?: number;
        bankRoutingNumber?: string;
        giftCertificateCode?: string;
        paymentCard?: OrderPaymentCardRequest$0;
        paymentMethodId?: string;
    } & {
        [key: string]: any;
    };
    type GiftCertificateItem = {
        amount: number;
        giftCertificateItemId?: string;
        message?: string;
        recipientEmail: string;
        recipientName?: string;
        senderName?: string;
        shipmentId?: string;
    } & {
        [key: string]: any;
    };
    type ProductListLink = {
        description?: string;
        name?: string;
        public?: boolean;
        title?: string;
        type?: string;
    } & {
        [key: string]: any;
    };
    type GroupedTaxItem = {
        taxRate?: number;
        taxValue?: number;
    };
    type Order = {
        adjustedMerchandizeTotalTax?: number;
        adjustedShippingTotalTax?: number;
        billingAddress?: OrderAddress;
        bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
        channelType?: string;
        confirmationStatus?: string;
        couponItems?: Array<CouponItem>;
        createdBy?: string;
        creationDate?: any;
        currency?: string;
        customerInfo?: CustomerInfo;
        customerName?: string;
        exportStatus?: string;
        externalOrderStatus?: string;
        giftCertificateItems?: Array<GiftCertificateItem>;
        globalPartyId?: string;
        groupedTaxItems?: Array<GroupedTaxItem>;
        guest?: boolean;
        lastModified?: any;
        merchandizeTotalTax?: number;
        notes?: SimpleLink;
        orderNo?: string;
        orderPriceAdjustments?: Array<PriceAdjustment>;
        orderToken?: string;
        orderTotal?: number;
        orderViewCode?: string;
        paymentInstruments?: Array<OrderPaymentInstrument>;
        paymentStatus?: string;
        productItems?: Array<ProductItem>;
        productSubTotal?: number;
        productTotal?: number;
        shipments?: Array<Shipment>;
        shippingItems?: Array<ShippingItem>;
        shippingStatus?: string;
        shippingTotal?: number;
        shippingTotalTax?: number;
        siteId?: string;
        sourceCode?: string;
        status?: string;
        taxRoundedAtGroup?: boolean;
        taxTotal?: number;
        taxation?: string;
    } & {
        [key: string]: any;
    };
    type OrderPaymentCardRequest = {
        cardType?: string;
        creditCardToken?: string;
        expirationMonth?: number;
        expirationYear?: number;
        holder?: string;
        issueNumber?: string;
        maskedNumber?: string;
        validFromMonth?: number;
        validFromYear?: number;
    };
    type PaymentMethod = {
        cards?: Array<PaymentCardSpec>;
        description?: string;
        id: string;
        image?: string;
        name?: string;
        paymentProcessorId?: string;
    } & {
        [key: string]: any;
    };
    type TaxItem = {
        id: string;
        rate: number;
        value?: number;
    };
    type Status = {
        code?: string;
        message?: string;
        status?: number;
    };
    type ProductListItemReference = {
        id: string;
        priority?: number;
        productDetailsLink?: ProductDetailsLink;
        productList?: ProductListLink;
        public?: boolean;
        purchasedQuantity?: number;
        quantity?: number;
        type?: string;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    /**
     * All path parameters that are used by at least one ShopperOrders method.
     */
    type ShopperOrdersPathParameters = {
        organizationId?: string;
        orderNo?: string;
        paymentInstrumentId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperOrders method.
     */
    type ShopperOrdersQueryParameters = {
        siteId?: string;
        locale?: string;
    };
    /**
     * All parameters that are used by ShopperOrders.
     */
    type ShopperOrdersParameters = ShopperOrdersPathParameters & BaseUriParameters & ShopperOrdersQueryParameters;
    /**
     * [Shopper Orders](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-orders:Summary)
     * ==================================
     *
     * *Finish the shopper checkout experience resulting in an order.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperOrders } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperOrdersClient = new ShopperOrders(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 0.4.8<br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperOrders<ConfigParameters extends ShopperOrdersParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-orders/{version}";
        static readonly apiPaths: {
            createOrder: string;
            getOrder: string;
            guestOrderLookup: string;
            createPaymentInstrumentForOrder: string;
            removePaymentInstrumentFromOrder: string;
            updatePaymentInstrumentForOrder: string;
            getPaymentMethodsForOrder: string;
            getTaxesFromOrder: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly createOrder: readonly [
                "organizationId",
                "siteId",
                "locale"
            ];
            readonly createOrderRequired: readonly [
                "organizationId",
                "siteId"
            ];
            readonly getOrder: readonly [
                "organizationId",
                "orderNo",
                "siteId",
                "locale"
            ];
            readonly getOrderRequired: readonly [
                "organizationId",
                "orderNo",
                "siteId"
            ];
            readonly guestOrderLookup: readonly [
                "organizationId",
                "orderNo",
                "siteId",
                "locale"
            ];
            readonly guestOrderLookupRequired: readonly [
                "organizationId",
                "orderNo",
                "siteId"
            ];
            readonly createPaymentInstrumentForOrder: readonly [
                "organizationId",
                "orderNo",
                "siteId",
                "locale"
            ];
            readonly createPaymentInstrumentForOrderRequired: readonly [
                "organizationId",
                "orderNo",
                "siteId"
            ];
            readonly removePaymentInstrumentFromOrder: readonly [
                "organizationId",
                "orderNo",
                "paymentInstrumentId",
                "siteId",
                "locale"
            ];
            readonly removePaymentInstrumentFromOrderRequired: readonly [
                "organizationId",
                "orderNo",
                "paymentInstrumentId",
                "siteId"
            ];
            readonly updatePaymentInstrumentForOrder: readonly [
                "organizationId",
                "orderNo",
                "paymentInstrumentId",
                "siteId",
                "locale"
            ];
            readonly updatePaymentInstrumentForOrderRequired: readonly [
                "organizationId",
                "orderNo",
                "paymentInstrumentId",
                "siteId"
            ];
            readonly getPaymentMethodsForOrder: readonly [
                "organizationId",
                "orderNo",
                "siteId",
                "locale"
            ];
            readonly getPaymentMethodsForOrderRequired: readonly [
                "organizationId",
                "orderNo",
                "siteId"
            ];
            readonly getTaxesFromOrder: readonly [
                "organizationId",
                "orderNo",
                "siteId"
            ];
            readonly getTaxesFromOrderRequired: readonly [
                "organizationId",
                "orderNo",
                "siteId"
            ];
        };
        /**
         * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
         *
         * If you would like to get a raw Response object use the other createOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Order.
         *
         */
        createOrder(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Basket;
        }>): Promise<Order>;
        /**
         * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
         *
         */
        createOrder<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: Basket;
        }>, rawResponse?: T): Promise<T extends true ? Response : Order>;
        /**
         * Gets information for an order.
         *
         * If you would like to get a raw Response object use the other getOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Order.
         *
         */
        getOrder(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Order>;
        /**
         * Gets information for an order.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
         *
         */
        getOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Order>;
        /**
         * Use this endpoint to lookup a guest order.
         
         **Important**: This endpoint uses the [ShopperTokenTsob](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-login?meta=security%3AShopperTokenTsob) security scheme. Always check the Security section of the endpoint documentation, which is hidden by default.
         
         The API uses the `orderViewCode` generated during the order creation and the `email` of the order customer to lookup a guest order. If email is not provided on the order, the field can be left blank in the lookup request.
         **Note**: In the no email on order scenario, the custom implementation must include an additional verification of an order attribute. For example, a postal code or mobile number.
         
         This API can also be used for looking up an order for a registered customer. In addition to the verification steps used for guest order lookup, the API also verifies that the customer ID of the order matches with the customer ID supplied in the `ShopperTokenTsob`.
         
         
         *
         * If you would like to get a raw Response object use the other guestOrderLookup function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Order.
         *
         */
        guestOrderLookup(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderLookupRequest;
        }>): Promise<Order>;
        /**
         * Use this endpoint to lookup a guest order.
         
         **Important**: This endpoint uses the [ShopperTokenTsob](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-login?meta=security%3AShopperTokenTsob) security scheme. Always check the Security section of the endpoint documentation, which is hidden by default.
         
         The API uses the `orderViewCode` generated during the order creation and the `email` of the order customer to lookup a guest order. If email is not provided on the order, the field can be left blank in the lookup request.
         **Note**: In the no email on order scenario, the custom implementation must include an additional verification of an order attribute. For example, a postal code or mobile number.
         
         This API can also be used for looking up an order for a registered customer. In addition to the verification steps used for guest order lookup, the API also verifies that the customer ID of the order matches with the customer ID supplied in the `ShopperTokenTsob`.
         
         
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
         *
         */
        guestOrderLookup<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderLookupRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : Order>;
        /**
         * Adds a payment instrument to an order.
         
         Details:
         
         The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
         /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
         *
         * If you would like to get a raw Response object use the other createPaymentInstrumentForOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Order.
         *
         */
        createPaymentInstrumentForOrder(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderPaymentInstrumentRequest;
        }>): Promise<Order>;
        /**
         * Adds a payment instrument to an order.
         
         Details:
         
         The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
         /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
         *
         */
        createPaymentInstrumentForOrder<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderPaymentInstrumentRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : Order>;
        /**
         * Removes a payment instrument of an order.
         *
         * If you would like to get a raw Response object use the other removePaymentInstrumentFromOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param paymentInstrumentId - The ID of the payment instrument to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Order.
         *
         */
        removePaymentInstrumentFromOrder(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                paymentInstrumentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Order>;
        /**
         * Removes a payment instrument of an order.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param paymentInstrumentId - The ID of the payment instrument to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
         *
         */
        removePaymentInstrumentFromOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                paymentInstrumentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Order>;
        /**
         * Updates a payment instrument of an order.
         
         Details:
         
         The payment instrument is updated with the provided details. The payment method must be applicable for the
         order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
         paymentCard must be specified in the request.
         *
         * If you would like to get a raw Response object use the other updatePaymentInstrumentForOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param paymentInstrumentId - The ID of the payment instrument to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Order.
         *
         */
        updatePaymentInstrumentForOrder(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                paymentInstrumentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderPaymentInstrumentRequest;
        }>): Promise<Order>;
        /**
         * Updates a payment instrument of an order.
         
         Details:
         
         The payment instrument is updated with the provided details. The payment method must be applicable for the
         order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
         paymentCard must be specified in the request.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param paymentInstrumentId - The ID of the payment instrument to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
         *
         */
        updatePaymentInstrumentForOrder<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                paymentInstrumentId: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: OrderPaymentInstrumentRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : Order>;
        /**
         * Gets the applicable payment methods for an existing order considering the open payment amount only.
         *
         * If you would like to get a raw Response object use the other getPaymentMethodsForOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PaymentMethodResult.
         *
         */
        getPaymentMethodsForOrder(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<PaymentMethodResult>;
        /**
         * Gets the applicable payment methods for an existing order considering the open payment amount only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.
         *
         */
        getPaymentMethodsForOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : PaymentMethodResult>;
        /**
         * This method gives you the external taxation data of the order transferred from the basket during
         order creation. This endpoint can be called only if external taxation was used. See POST /baskets
         for more information.
         *
         * If you would like to get a raw Response object use the other getTaxesFromOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Taxes.
         *
         */
        getTaxesFromOrder(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Taxes>;
        /**
         * This method gives you the external taxation data of the order transferred from the basket during
         order creation. This endpoint can be called only if external taxation was used. See POST /baskets
         for more information.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.
         *
         */
        getTaxesFromOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                orderNo: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Taxes>;
    }
}
type ProductPriceTable = {
    price?: number;
    pricebook?: string;
    quantity?: number;
} & {
    [key: string]: any;
};
type PriceRange = {
    maxPrice?: number;
    minPrice?: number;
    pricebook?: string;
} & {
    [key: string]: any;
};
type OptionValue$0 = {
    default?: boolean;
    id: string;
    name?: string;
    price?: number;
} & {
    [key: string]: any;
};
type Master$0 = {
    masterId: string;
    orderable?: boolean;
    price?: number;
    priceMax?: number;
    prices?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type Category = {
    categories?: Array<Category>;
    description?: string;
    id: string;
    image?: string;
    name?: string;
    onlineSubCategoriesCount?: any;
    pageDescription?: string;
    pageKeywords?: string;
    pageTitle?: string;
    parentCategoryId?: string;
    parentCategoryTree?: Array<PathRecord>;
    thumbnail?: string;
} & {
    [key: string]: any;
};
type CategoryResult = {
    limit: number;
    data: Array<Category>;
    total: number;
} & {
    [key: string]: any;
};
type VariationAttribute$0 = {
    id: string;
    name?: string;
    values?: Array<VariationAttributeValue>;
} & {
    [key: string]: any;
};
type RecommendationType$0 = {
    displayValue: string;
    value: number;
} & {
    [key: string]: any;
};
type ProductType$0 = {
    bundle?: boolean;
    item?: boolean;
    master?: boolean;
    option?: boolean;
    set?: boolean;
    variant?: boolean;
    variationGroup?: boolean;
} & {
    [key: string]: any;
};
type Recommendation$0 = {
    calloutMsg?: string;
    image?: Image;
    longDescription?: string;
    name?: string;
    recommendationType: RecommendationType$0;
    recommendedItemId?: string;
    shortDescription?: string;
} & {
    [key: string]: any;
};
type Variant$0 = {
    orderable?: boolean;
    price?: number;
    productId: string;
    tieredPrices?: Array<ProductPriceTable>;
    variationValues?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type VariationGroup$0 = {
    orderable: boolean;
    price: number;
    productId: string;
    variationValues: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type ProductResult = {
    limit: number;
    data: Array<Product>;
    total: number;
} & {
    [key: string]: any;
};
type ProductLink$0 = {
    sourceProductId: string;
    sourceProductLink: string;
    targetProductId: string;
    targetProductLink: string;
    type: string;
} & {
    [key: string]: any;
};
type Inventory$0 = {
    ats?: number;
    backorderable?: boolean;
    id: string;
    inStockDate?: any;
    orderable?: boolean;
    preorderable?: boolean;
    stockLevel?: number;
} & {
    [key: string]: any;
};
type ImageGroup$0 = {
    images: Array<Image>;
    variationAttributes?: Array<VariationAttribute$0>;
    viewType: string;
} & {
    [key: string]: any;
};
type Option$0 = {
    description?: string;
    id: string;
    image?: string;
    name?: string;
    values?: Array<OptionValue$0>;
} & {
    [key: string]: any;
};
type Product$0 = {
    brand?: string;
    bundledProducts?: Array<BundledProduct>;
    currency?: string;
    ean?: string;
    fetchDate?: number;
    id: string;
    imageGroups?: Array<ImageGroup$0>;
    inventories?: Array<Inventory$0>;
    inventory?: Inventory$0;
    longDescription?: string;
    manufacturerName?: string;
    manufacturerSku?: string;
    master?: Master$0;
    minOrderQuantity?: number;
    name?: string;
    options?: Array<Option$0>;
    pageDescription?: string;
    pageKeywords?: string;
    pageMetaTags?: Array<PageMetaTag>;
    pageTitle?: string;
    price?: number;
    pricePerUnit?: number;
    pricePerUnitMax?: number;
    priceMax?: number;
    priceRanges?: Array<PriceRange>;
    prices?: {} & {
        [key: string]: any;
    };
    primaryCategoryId?: string;
    productLinks?: Array<ProductLink$0>;
    productPromotions?: Array<ProductPromotion>;
    recommendations?: Array<Recommendation$0>;
    setProducts?: Array<Product$0>;
    shortDescription?: string;
    slugUrl?: string;
    stepQuantity?: number;
    tieredPrices?: Array<ProductPriceTable>;
    type?: ProductType$0;
    unit?: string;
    upc?: string;
    validFrom?: any;
    validTo?: any;
    variants?: Array<Variant$0>;
    variationAttributes?: Array<VariationAttribute$0>;
    variationGroups?: Array<VariationGroup$0>;
    variationValues?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type Image$0 = {
    alt?: string;
    disBaseLink?: string;
    link: string;
    title?: string;
} & {
    [key: string]: any;
};
type VariationAttributeValue$0 = {
    description?: string;
    image?: Image$0;
    imageSwatch?: Image$0;
    name?: string;
    orderable?: boolean;
    value: string;
} & {
    [key: string]: any;
};
type ProductPromotion$0 = {
    calloutMsg: string;
    promotionId: string;
    promotionalPrice: number;
} & {
    [key: string]: any;
};
type PathRecord = {
    id?: string;
    name?: string;
} & {
    [key: string]: any;
};
type BundledProduct$0 = {
    id: string;
    product: Product$0;
    quantity: number;
} & {
    [key: string]: any;
};
type PageMetaTag = {
    id?: string;
    value?: string;
} & {
    [key: string]: any;
};
type RangeFilter$6 = {
    [key: string]: any;
};
type BoolFilter$6 = {
    filters?: Array<Filter$5>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$6 = {} & {
    [key: string]: any;
};
type FilteredQuery$6 = {
    filter: Filter$5;
    query: Query$5;
} & {
    [key: string]: any;
};
type QueryFilter$6 = {
    query: Query$5;
} & {
    [key: string]: any;
};
type Query$6 = {
    boolQuery?: BoolQuery$5;
    filteredQuery?: FilteredQuery$6;
    matchAllQuery?: MatchAllQuery$6;
    nestedQuery?: NestedQuery$5;
    termQuery?: TermQuery$5;
    textQuery?: TextQuery$5;
} & {
    [key: string]: any;
};
type TermQuery$6 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$6 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$6 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$6 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$6 = {
    must?: Array<Query$6>;
    mustNot?: Array<Query$6>;
    should?: Array<Query$6>;
} & {
    [key: string]: any;
};
type NestedQuery$6 = {
    path: string;
    query: Query$6;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$6 = {
    boolFilter?: BoolFilter$6;
    queryFilter?: QueryFilter$6;
    range2Filter?: Range2Filter$6;
    rangeFilter?: RangeFilter$6;
    termFilter?: TermFilter$6;
} & {
    [key: string]: any;
};
type Sort$6 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type L10nString$5 = {} & {
    [key: string]: any;
};
type PropertyValueDefinition$5 = {
    description: L10nString$5;
    displayValue: L10nString$5;
    id: string;
    position?: number;
    value: string;
};
/**
 * All path parameters that are used by at least one ShopperProducts method.
 */
type ShopperProductsPathParameters = {
    organizationId?: string;
    id?: string;
};
/**
 * All query parameters that are used by at least one ShopperProducts method.
 */
type ShopperProductsQueryParameters = {
    select?: string;
    ids?: string;
    inventoryIds?: string;
    currency?: string;
    expand?: Array<string>;
    locale?: string;
    allImages?: boolean;
    perPricebook?: boolean;
    siteId?: string;
    levels?: number;
};
/**
 * All parameters that are used by ShopperProducts.
 */
type ShopperProductsParameters = ShopperProductsPathParameters & BaseUriParameters & ShopperProductsQueryParameters;
/**
 * [Shopper Products](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-products:Summary)
 * ==================================
 *
 * *Display product details across your storefront.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperProducts } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperProductsClient = new ShopperProducts(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 0.0.37<br />
 * Last Updated: <br />
 * </span>
 *
 *
 */
declare class ShopperProducts<ConfigParameters extends ShopperProductsParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/product/shopper-products/{version}";
    static readonly apiPaths: {
        getProducts: string;
        getProduct: string;
        getCategories: string;
        getCategory: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly getProducts: readonly [
            "organizationId",
            "select",
            "ids",
            "inventoryIds",
            "currency",
            "expand",
            "locale",
            "allImages",
            "perPricebook",
            "siteId"
        ];
        readonly getProductsRequired: readonly [
            "organizationId",
            "ids",
            "siteId"
        ];
        readonly getProduct: readonly [
            "organizationId",
            "id",
            "select",
            "inventoryIds",
            "currency",
            "expand",
            "locale",
            "allImages",
            "perPricebook",
            "siteId"
        ];
        readonly getProductRequired: readonly [
            "organizationId",
            "id",
            "siteId"
        ];
        readonly getCategories: readonly [
            "organizationId",
            "ids",
            "levels",
            "locale",
            "siteId"
        ];
        readonly getCategoriesRequired: readonly [
            "organizationId",
            "ids",
            "siteId"
        ];
        readonly getCategory: readonly [
            "organizationId",
            "id",
            "levels",
            "locale",
            "siteId"
        ];
        readonly getCategoryRequired: readonly [
            "organizationId",
            "id",
            "siteId"
        ];
    };
    /**
     * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Along with product details, the availability, product options, images, price, promotions, and variations for the valid products will be included, as appropriate.
     *
     * If you would like to get a raw Response object use the other getProducts function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
     * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
     * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
     * @param currency - The currency mnemonic specified for price.
     * @param expand - The expand parameter. A comma separated list with the allowed values (availability, links, promotions, options, images, prices, variations, recommendations, page_meta_tags). All expand parameters except page_meta_tags are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options. **The `page_meta_tags` expand value is optional and available starting from B2C Commerce version 25.2.**
     * @param locale - The locale context.
     * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
     * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type ProductResult.
     *
     */
    getProducts(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            select?: string;
            ids: string;
            inventoryIds?: string;
            currency?: string;
            expand?: Array<string>;
            locale?: string;
            allImages?: boolean;
            perPricebook?: boolean;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<ProductResult>;
    /**
     * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Along with product details, the availability, product options, images, price, promotions, and variations for the valid products will be included, as appropriate.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
     * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
     * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
     * @param currency - The currency mnemonic specified for price.
     * @param expand - The expand parameter. A comma separated list with the allowed values (availability, links, promotions, options, images, prices, variations, recommendations, page_meta_tags). All expand parameters except page_meta_tags are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options. **The `page_meta_tags` expand value is optional and available starting from B2C Commerce version 25.2.**
     * @param locale - The locale context.
     * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
     * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ProductResult otherwise.
     *
     */
    getProducts<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            select?: string;
            ids: string;
            inventoryIds?: string;
            currency?: string;
            expand?: Array<string>;
            locale?: string;
            allImages?: boolean;
            perPricebook?: boolean;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : ProductResult>;
    /**
     * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability, images, price, bundled_products, set_products, recommedations, product options, variations, and promotions for the products will be included, as appropriate.
     *
     * If you would like to get a raw Response object use the other getProduct function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param id - The ID of the requested product.
     * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
     * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
     * @param currency - The currency mnemonic specified for price.
     * @param expand - The expand parameter. A comma separated list with the allowed values (availability, bundled_products, links, promotions, options, images, prices, variations, set_products, recommendations, page_meta_tags). All expand parameters except page_meta_tags are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options. **The `page_meta_tags` expand value is optional and available starting from B2C Commerce version 25.2.**
     * @param locale - The locale context.
     * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
     * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Product.
     *
     */
    getProduct(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            id: string;
            select?: string;
            inventoryIds?: string;
            currency?: string;
            expand?: Array<string>;
            locale?: string;
            allImages?: boolean;
            perPricebook?: boolean;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Product$0>;
    /**
     * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability, images, price, bundled_products, set_products, recommedations, product options, variations, and promotions for the products will be included, as appropriate.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param id - The ID of the requested product.
     * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
     * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
     * @param currency - The currency mnemonic specified for price.
     * @param expand - The expand parameter. A comma separated list with the allowed values (availability, bundled_products, links, promotions, options, images, prices, variations, set_products, recommendations, page_meta_tags). All expand parameters except page_meta_tags are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options. **The `page_meta_tags` expand value is optional and available starting from B2C Commerce version 25.2.**
     * @param locale - The locale context.
     * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
     * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Product otherwise.
     *
     */
    getProduct<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            id: string;
            select?: string;
            inventoryIds?: string;
            currency?: string;
            expand?: Array<string>;
            locale?: string;
            allImages?: boolean;
            perPricebook?: boolean;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Product$0>;
    /**
     * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character.
     *
     * If you would like to get a raw Response object use the other getCategories function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param ids - The comma separated list of category IDs (max 50).
     * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2. Only online subcategories are returned.
     * @param locale - The locale context.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CategoryResult.
     *
     */
    getCategories(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            ids: string;
            levels?: number;
            locale?: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CategoryResult>;
    /**
     * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param ids - The comma separated list of category IDs (max 50).
     * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2. Only online subcategories are returned.
     * @param locale - The locale context.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CategoryResult otherwise.
     *
     */
    getCategories<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            ids: string;
            levels?: number;
            locale?: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CategoryResult>;
    /**
     * When you use the URL template below, the server returns a category identified by its ID; by default, the server
     also returns the first level of subcategories, but you can specify another level by setting the levels
     parameter.
     *
     * If you would like to get a raw Response object use the other getCategory function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param id - The ID of the requested category.
     * @param levels -
     * @param locale -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Category.
     *
     */
    getCategory(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            id: string;
            levels?: number;
            locale?: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Category>;
    /**
     * When you use the URL template below, the server returns a category identified by its ID; by default, the server
     also returns the first level of subcategories, but you can specify another level by setting the levels
     parameter.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param id - The ID of the requested category.
     * @param levels -
     * @param locale -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Category otherwise.
     *
     */
    getCategory<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            id: string;
            levels?: number;
            locale?: string;
            siteId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Category>;
}
declare namespace ShopperProductsTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type ProductPriceTable = {
        price?: number;
        pricebook?: string;
        quantity?: number;
    } & {
        [key: string]: any;
    };
    type PriceRange = {
        maxPrice?: number;
        minPrice?: number;
        pricebook?: string;
    } & {
        [key: string]: any;
    };
    type OptionValue = {
        default?: boolean;
        id: string;
        name?: string;
        price?: number;
    } & {
        [key: string]: any;
    };
    type Master = {
        masterId: string;
        orderable?: boolean;
        price?: number;
        priceMax?: number;
        prices?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type Category = {
        categories?: Array<Category>;
        description?: string;
        id: string;
        image?: string;
        name?: string;
        onlineSubCategoriesCount?: any;
        pageDescription?: string;
        pageKeywords?: string;
        pageTitle?: string;
        parentCategoryId?: string;
        parentCategoryTree?: Array<PathRecord>;
        thumbnail?: string;
    } & {
        [key: string]: any;
    };
    type CategoryResult = {
        limit: number;
        data: Array<Category>;
        total: number;
    } & {
        [key: string]: any;
    };
    type VariationAttribute = {
        id: string;
        name?: string;
        values?: Array<VariationAttributeValue$0>;
    } & {
        [key: string]: any;
    };
    type RecommendationType = {
        displayValue: string;
        value: number;
    } & {
        [key: string]: any;
    };
    type ProductType = {
        bundle?: boolean;
        item?: boolean;
        master?: boolean;
        option?: boolean;
        set?: boolean;
        variant?: boolean;
        variationGroup?: boolean;
    } & {
        [key: string]: any;
    };
    type Recommendation = {
        calloutMsg?: string;
        image?: Image$0;
        longDescription?: string;
        name?: string;
        recommendationType: RecommendationType;
        recommendedItemId?: string;
        shortDescription?: string;
    } & {
        [key: string]: any;
    };
    type Variant = {
        orderable?: boolean;
        price?: number;
        productId: string;
        tieredPrices?: Array<ProductPriceTable>;
        variationValues?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type VariationGroup = {
        orderable: boolean;
        price: number;
        productId: string;
        variationValues: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type ProductResult = {
        limit: number;
        data: Array<Product$0>;
        total: number;
    } & {
        [key: string]: any;
    };
    type ProductLink = {
        sourceProductId: string;
        sourceProductLink: string;
        targetProductId: string;
        targetProductLink: string;
        type: string;
    } & {
        [key: string]: any;
    };
    type Inventory = {
        ats?: number;
        backorderable?: boolean;
        id: string;
        inStockDate?: any;
        orderable?: boolean;
        preorderable?: boolean;
        stockLevel?: number;
    } & {
        [key: string]: any;
    };
    type ImageGroup = {
        images: Array<Image$0>;
        variationAttributes?: Array<VariationAttribute>;
        viewType: string;
    } & {
        [key: string]: any;
    };
    type Option = {
        description?: string;
        id: string;
        image?: string;
        name?: string;
        values?: Array<OptionValue>;
    } & {
        [key: string]: any;
    };
    type Product = {
        brand?: string;
        bundledProducts?: Array<BundledProduct$0>;
        currency?: string;
        ean?: string;
        fetchDate?: number;
        id: string;
        imageGroups?: Array<ImageGroup>;
        inventories?: Array<Inventory>;
        inventory?: Inventory;
        longDescription?: string;
        manufacturerName?: string;
        manufacturerSku?: string;
        master?: Master;
        minOrderQuantity?: number;
        name?: string;
        options?: Array<Option>;
        pageDescription?: string;
        pageKeywords?: string;
        pageMetaTags?: Array<PageMetaTag>;
        pageTitle?: string;
        price?: number;
        pricePerUnit?: number;
        pricePerUnitMax?: number;
        priceMax?: number;
        priceRanges?: Array<PriceRange>;
        prices?: {} & {
            [key: string]: any;
        };
        primaryCategoryId?: string;
        productLinks?: Array<ProductLink>;
        productPromotions?: Array<ProductPromotion$0>;
        recommendations?: Array<Recommendation>;
        setProducts?: Array<Product>;
        shortDescription?: string;
        slugUrl?: string;
        stepQuantity?: number;
        tieredPrices?: Array<ProductPriceTable>;
        type?: ProductType;
        unit?: string;
        upc?: string;
        validFrom?: any;
        validTo?: any;
        variants?: Array<Variant>;
        variationAttributes?: Array<VariationAttribute>;
        variationGroups?: Array<VariationGroup>;
        variationValues?: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type Image = {
        alt?: string;
        disBaseLink?: string;
        link: string;
        title?: string;
    } & {
        [key: string]: any;
    };
    type VariationAttributeValue = {
        description?: string;
        image?: Image;
        imageSwatch?: Image;
        name?: string;
        orderable?: boolean;
        value: string;
    } & {
        [key: string]: any;
    };
    type ProductPromotion = {
        calloutMsg: string;
        promotionId: string;
        promotionalPrice: number;
    } & {
        [key: string]: any;
    };
    type PathRecord = {
        id?: string;
        name?: string;
    } & {
        [key: string]: any;
    };
    type BundledProduct = {
        id: string;
        product: Product;
        quantity: number;
    } & {
        [key: string]: any;
    };
    type PageMetaTag = {
        id?: string;
        value?: string;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query$6;
        sorts?: Array<Sort$6>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition$5;
        id?: string;
        name: L10nString$5;
        description: L10nString$5;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString$5;
        possibleValues?: Array<PropertyValueDefinition$5>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query$6;
        sorts?: Array<Sort$6>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter$6>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query$6;
        sorts?: Array<Sort$6>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter$6;
        query: Query$6;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query$6;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$6;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$6;
        termQuery?: TermQuery$6;
        textQuery?: TextQuery$6;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition$5;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition$5>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    /**
     * All path parameters that are used by at least one ShopperProducts method.
     */
    type ShopperProductsPathParameters = {
        organizationId?: string;
        id?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperProducts method.
     */
    type ShopperProductsQueryParameters = {
        select?: string;
        ids?: string;
        inventoryIds?: string;
        currency?: string;
        expand?: Array<string>;
        locale?: string;
        allImages?: boolean;
        perPricebook?: boolean;
        siteId?: string;
        levels?: number;
    };
    /**
     * All parameters that are used by ShopperProducts.
     */
    type ShopperProductsParameters = ShopperProductsPathParameters & BaseUriParameters & ShopperProductsQueryParameters;
    /**
     * [Shopper Products](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-products:Summary)
     * ==================================
     *
     * *Display product details across your storefront.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperProducts } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperProductsClient = new ShopperProducts(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 0.0.37<br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperProducts<ConfigParameters extends ShopperProductsParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/product/shopper-products/{version}";
        static readonly apiPaths: {
            getProducts: string;
            getProduct: string;
            getCategories: string;
            getCategory: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly getProducts: readonly [
                "organizationId",
                "select",
                "ids",
                "inventoryIds",
                "currency",
                "expand",
                "locale",
                "allImages",
                "perPricebook",
                "siteId"
            ];
            readonly getProductsRequired: readonly [
                "organizationId",
                "ids",
                "siteId"
            ];
            readonly getProduct: readonly [
                "organizationId",
                "id",
                "select",
                "inventoryIds",
                "currency",
                "expand",
                "locale",
                "allImages",
                "perPricebook",
                "siteId"
            ];
            readonly getProductRequired: readonly [
                "organizationId",
                "id",
                "siteId"
            ];
            readonly getCategories: readonly [
                "organizationId",
                "ids",
                "levels",
                "locale",
                "siteId"
            ];
            readonly getCategoriesRequired: readonly [
                "organizationId",
                "ids",
                "siteId"
            ];
            readonly getCategory: readonly [
                "organizationId",
                "id",
                "levels",
                "locale",
                "siteId"
            ];
            readonly getCategoryRequired: readonly [
                "organizationId",
                "id",
                "siteId"
            ];
        };
        /**
         * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Along with product details, the availability, product options, images, price, promotions, and variations for the valid products will be included, as appropriate.
         *
         * If you would like to get a raw Response object use the other getProducts function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
         * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
         * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
         * @param currency - The currency mnemonic specified for price.
         * @param expand - The expand parameter. A comma separated list with the allowed values (availability, links, promotions, options, images, prices, variations, recommendations, page_meta_tags). All expand parameters except page_meta_tags are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options. **The `page_meta_tags` expand value is optional and available starting from B2C Commerce version 25.2.**
         * @param locale - The locale context.
         * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
         * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type ProductResult.
         *
         */
        getProducts(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                select?: string;
                ids: string;
                inventoryIds?: string;
                currency?: string;
                expand?: Array<string>;
                locale?: string;
                allImages?: boolean;
                perPricebook?: boolean;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<ProductResult>;
        /**
         * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Along with product details, the availability, product options, images, price, promotions, and variations for the valid products will be included, as appropriate.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
         * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
         * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
         * @param currency - The currency mnemonic specified for price.
         * @param expand - The expand parameter. A comma separated list with the allowed values (availability, links, promotions, options, images, prices, variations, recommendations, page_meta_tags). All expand parameters except page_meta_tags are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options. **The `page_meta_tags` expand value is optional and available starting from B2C Commerce version 25.2.**
         * @param locale - The locale context.
         * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
         * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ProductResult otherwise.
         *
         */
        getProducts<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                select?: string;
                ids: string;
                inventoryIds?: string;
                currency?: string;
                expand?: Array<string>;
                locale?: string;
                allImages?: boolean;
                perPricebook?: boolean;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : ProductResult>;
        /**
         * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability, images, price, bundled_products, set_products, recommedations, product options, variations, and promotions for the products will be included, as appropriate.
         *
         * If you would like to get a raw Response object use the other getProduct function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param id - The ID of the requested product.
         * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
         * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
         * @param currency - The currency mnemonic specified for price.
         * @param expand - The expand parameter. A comma separated list with the allowed values (availability, bundled_products, links, promotions, options, images, prices, variations, set_products, recommendations, page_meta_tags). All expand parameters except page_meta_tags are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options. **The `page_meta_tags` expand value is optional and available starting from B2C Commerce version 25.2.**
         * @param locale - The locale context.
         * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
         * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Product.
         *
         */
        getProduct(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                id: string;
                select?: string;
                inventoryIds?: string;
                currency?: string;
                expand?: Array<string>;
                locale?: string;
                allImages?: boolean;
                perPricebook?: boolean;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Product>;
        /**
         * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability, images, price, bundled_products, set_products, recommedations, product options, variations, and promotions for the products will be included, as appropriate.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param id - The ID of the requested product.
         * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
         * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
         * @param currency - The currency mnemonic specified for price.
         * @param expand - The expand parameter. A comma separated list with the allowed values (availability, bundled_products, links, promotions, options, images, prices, variations, set_products, recommendations, page_meta_tags). All expand parameters except page_meta_tags are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options. **The `page_meta_tags` expand value is optional and available starting from B2C Commerce version 25.2.**
         * @param locale - The locale context.
         * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
         * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Product otherwise.
         *
         */
        getProduct<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                id: string;
                select?: string;
                inventoryIds?: string;
                currency?: string;
                expand?: Array<string>;
                locale?: string;
                allImages?: boolean;
                perPricebook?: boolean;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Product>;
        /**
         * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character.
         *
         * If you would like to get a raw Response object use the other getCategories function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param ids - The comma separated list of category IDs (max 50).
         * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2. Only online subcategories are returned.
         * @param locale - The locale context.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CategoryResult.
         *
         */
        getCategories(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                ids: string;
                levels?: number;
                locale?: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<CategoryResult>;
        /**
         * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param ids - The comma separated list of category IDs (max 50).
         * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2. Only online subcategories are returned.
         * @param locale - The locale context.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CategoryResult otherwise.
         *
         */
        getCategories<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                ids: string;
                levels?: number;
                locale?: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : CategoryResult>;
        /**
         * When you use the URL template below, the server returns a category identified by its ID; by default, the server
         also returns the first level of subcategories, but you can specify another level by setting the levels
         parameter.
         *
         * If you would like to get a raw Response object use the other getCategory function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param id - The ID of the requested category.
         * @param levels -
         * @param locale -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Category.
         *
         */
        getCategory(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                id: string;
                levels?: number;
                locale?: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Category>;
        /**
         * When you use the URL template below, the server returns a category identified by its ID; by default, the server
         also returns the first level of subcategories, but you can specify another level by setting the levels
         parameter.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param id - The ID of the requested category.
         * @param levels -
         * @param locale -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Category otherwise.
         *
         */
        getCategory<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                id: string;
                levels?: number;
                locale?: string;
                siteId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Category>;
    }
}
type Promotion = {
    calloutMsg?: string;
    currency?: string;
    details?: string;
    endDate?: any;
    id: string;
    image?: string;
    name?: string;
    startDate?: any;
} & {
    [key: string]: any;
};
type PromotionResult = {
    limit: number;
    data: Array<Promotion>;
    total: number;
};
type RangeFilter$7 = {
    [key: string]: any;
};
type BoolFilter$7 = {
    filters?: Array<Filter$6>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$7 = {} & {
    [key: string]: any;
};
type FilteredQuery$7 = {
    filter: Filter$6;
    query: Query$6;
} & {
    [key: string]: any;
};
type QueryFilter$7 = {
    query: Query$6;
} & {
    [key: string]: any;
};
type Query$7 = {
    boolQuery?: BoolQuery$6;
    filteredQuery?: FilteredQuery$7;
    matchAllQuery?: MatchAllQuery$7;
    nestedQuery?: NestedQuery$6;
    termQuery?: TermQuery$6;
    textQuery?: TextQuery$6;
} & {
    [key: string]: any;
};
type TermQuery$7 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$7 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$7 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$7 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$7 = {
    must?: Array<Query$7>;
    mustNot?: Array<Query$7>;
    should?: Array<Query$7>;
} & {
    [key: string]: any;
};
type NestedQuery$7 = {
    path: string;
    query: Query$7;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$7 = {
    boolFilter?: BoolFilter$7;
    queryFilter?: QueryFilter$7;
    range2Filter?: Range2Filter$7;
    rangeFilter?: RangeFilter$7;
    termFilter?: TermFilter$7;
} & {
    [key: string]: any;
};
type Sort$7 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type L10nString$6 = {} & {
    [key: string]: any;
};
type PropertyValueDefinition$6 = {
    description: L10nString$6;
    displayValue: L10nString$6;
    id: string;
    position?: number;
    value: string;
};
/**
 * All path parameters that are used by at least one ShopperPromotions method.
 */
type ShopperPromotionsPathParameters = {
    organizationId?: string;
    campaignId?: string;
};
/**
 * All query parameters that are used by at least one ShopperPromotions method.
 */
type ShopperPromotionsQueryParameters = {
    siteId?: string;
    ids?: string;
    locale?: string;
    startDate?: string;
    endDate?: string;
    currency?: string;
};
/**
 * All parameters that are used by ShopperPromotions.
 */
type ShopperPromotionsParameters = ShopperPromotionsPathParameters & BaseUriParameters & ShopperPromotionsQueryParameters;
/**
 * [Shopper Promotions](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-promotions:Summary)
 * ==================================
 *
 * *View details for active promotions.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperPromotions } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperPromotionsClient = new ShopperPromotions(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.0.27<br />
 * Last Updated: <br />
 * </span>
 *
 *
 */
declare class ShopperPromotions<ConfigParameters extends ShopperPromotionsParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/pricing/shopper-promotions/{version}";
    static readonly apiPaths: {
        getPromotions: string;
        getPromotionsForCampaign: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly getPromotions: readonly [
            "organizationId",
            "siteId",
            "ids",
            "locale"
        ];
        readonly getPromotionsRequired: readonly [
            "organizationId",
            "siteId",
            "ids"
        ];
        readonly getPromotionsForCampaign: readonly [
            "organizationId",
            "campaignId",
            "siteId",
            "startDate",
            "endDate",
            "currency"
        ];
        readonly getPromotionsForCampaignRequired: readonly [
            "organizationId",
            "campaignId",
            "siteId"
        ];
    };
    /**
     * Returns an array of enabled promotions for a list of specified IDs. In the request URL, you can specify up to 50 IDs. If you specify an ID that contains either parentheses or the separator characters, you must URL encode these characters. Each request returns only enabled promotions as the server does not consider promotion qualifiers or schedules.
     *
     * If you would like to get a raw Response object use the other getPromotions function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param ids -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PromotionResult.
     *
     */
    getPromotions(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            ids: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PromotionResult>;
    /**
     * Returns an array of enabled promotions for a list of specified IDs. In the request URL, you can specify up to 50 IDs. If you specify an ID that contains either parentheses or the separator characters, you must URL encode these characters. Each request returns only enabled promotions as the server does not consider promotion qualifiers or schedules.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param ids -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PromotionResult otherwise.
     *
     */
    getPromotions<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            ids: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PromotionResult>;
    /**
     * Handles get promotion by filter criteria. Returns an array of enabled promotions matching the specified filter
     criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date
     range by providing start_date and end_date parameters. Both parameters are required to specify a date range, as
     omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled
     promotions, since the server does not consider promotion qualifiers or schedules.
     *
     * If you would like to get a raw Response object use the other getPromotionsForCampaign function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param campaignId - Find the promotions assigned to this campaign (mandatory).
     * @param siteId -
     * @param startDate - The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param endDate - The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param currency - The currency mnemonic specified for price. This parameter is effective only for product suggestions.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PromotionResult.
     *
     */
    getPromotionsForCampaign(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            campaignId: string;
            siteId: string;
            startDate?: string;
            endDate?: string;
            currency?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PromotionResult>;
    /**
     * Handles get promotion by filter criteria. Returns an array of enabled promotions matching the specified filter
     criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date
     range by providing start_date and end_date parameters. Both parameters are required to specify a date range, as
     omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled
     promotions, since the server does not consider promotion qualifiers or schedules.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param campaignId - Find the promotions assigned to this campaign (mandatory).
     * @param siteId -
     * @param startDate - The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param endDate - The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param currency - The currency mnemonic specified for price. This parameter is effective only for product suggestions.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PromotionResult otherwise.
     *
     */
    getPromotionsForCampaign<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            campaignId: string;
            siteId: string;
            startDate?: string;
            endDate?: string;
            currency?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PromotionResult>;
}
declare namespace ShopperPromotionsTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type Promotion = {
        calloutMsg?: string;
        currency?: string;
        details?: string;
        endDate?: any;
        id: string;
        image?: string;
        name?: string;
        startDate?: any;
    } & {
        [key: string]: any;
    };
    type PromotionResult = {
        limit: number;
        data: Array<Promotion>;
        total: number;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query$7;
        sorts?: Array<Sort$7>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition$6;
        id?: string;
        name: L10nString$6;
        description: L10nString$6;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString$6;
        possibleValues?: Array<PropertyValueDefinition$6>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query$7;
        sorts?: Array<Sort$7>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter$7>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query$7;
        sorts?: Array<Sort$7>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter$7;
        query: Query$7;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query$7;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$7;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$7;
        termQuery?: TermQuery$7;
        textQuery?: TextQuery$7;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition$6;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition$6>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    /**
     * All path parameters that are used by at least one ShopperPromotions method.
     */
    type ShopperPromotionsPathParameters = {
        organizationId?: string;
        campaignId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperPromotions method.
     */
    type ShopperPromotionsQueryParameters = {
        siteId?: string;
        ids?: string;
        locale?: string;
        startDate?: string;
        endDate?: string;
        currency?: string;
    };
    /**
     * All parameters that are used by ShopperPromotions.
     */
    type ShopperPromotionsParameters = ShopperPromotionsPathParameters & BaseUriParameters & ShopperPromotionsQueryParameters;
    /**
     * [Shopper Promotions](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-promotions:Summary)
     * ==================================
     *
     * *View details for active promotions.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperPromotions } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperPromotionsClient = new ShopperPromotions(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.0.27<br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperPromotions<ConfigParameters extends ShopperPromotionsParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/pricing/shopper-promotions/{version}";
        static readonly apiPaths: {
            getPromotions: string;
            getPromotionsForCampaign: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly getPromotions: readonly [
                "organizationId",
                "siteId",
                "ids",
                "locale"
            ];
            readonly getPromotionsRequired: readonly [
                "organizationId",
                "siteId",
                "ids"
            ];
            readonly getPromotionsForCampaign: readonly [
                "organizationId",
                "campaignId",
                "siteId",
                "startDate",
                "endDate",
                "currency"
            ];
            readonly getPromotionsForCampaignRequired: readonly [
                "organizationId",
                "campaignId",
                "siteId"
            ];
        };
        /**
         * Returns an array of enabled promotions for a list of specified IDs. In the request URL, you can specify up to 50 IDs. If you specify an ID that contains either parentheses or the separator characters, you must URL encode these characters. Each request returns only enabled promotions as the server does not consider promotion qualifiers or schedules.
         *
         * If you would like to get a raw Response object use the other getPromotions function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param ids -
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PromotionResult.
         *
         */
        getPromotions(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
                ids: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<PromotionResult>;
        /**
         * Returns an array of enabled promotions for a list of specified IDs. In the request URL, you can specify up to 50 IDs. If you specify an ID that contains either parentheses or the separator characters, you must URL encode these characters. Each request returns only enabled promotions as the server does not consider promotion qualifiers or schedules.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param ids -
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PromotionResult otherwise.
         *
         */
        getPromotions<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
                ids: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : PromotionResult>;
        /**
         * Handles get promotion by filter criteria. Returns an array of enabled promotions matching the specified filter
         criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date
         range by providing start_date and end_date parameters. Both parameters are required to specify a date range, as
         omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled
         promotions, since the server does not consider promotion qualifiers or schedules.
         *
         * If you would like to get a raw Response object use the other getPromotionsForCampaign function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param campaignId - Find the promotions assigned to this campaign (mandatory).
         * @param siteId -
         * @param startDate - The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
         * @param endDate - The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
         * @param currency - The currency mnemonic specified for price. This parameter is effective only for product suggestions.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PromotionResult.
         *
         */
        getPromotionsForCampaign(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                campaignId: string;
                siteId: string;
                startDate?: string;
                endDate?: string;
                currency?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<PromotionResult>;
        /**
         * Handles get promotion by filter criteria. Returns an array of enabled promotions matching the specified filter
         criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date
         range by providing start_date and end_date parameters. Both parameters are required to specify a date range, as
         omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled
         promotions, since the server does not consider promotion qualifiers or schedules.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param campaignId - Find the promotions assigned to this campaign (mandatory).
         * @param siteId -
         * @param startDate - The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
         * @param endDate - The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
         * @param currency - The currency mnemonic specified for price. This parameter is effective only for product suggestions.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PromotionResult otherwise.
         *
         */
        getPromotionsForCampaign<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                campaignId: string;
                siteId: string;
                startDate?: string;
                endDate?: string;
                currency?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : PromotionResult>;
    }
}
type BoolFilter$8 = {
    filters?: Array<Filter$7>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$8 = {} & {
    [key: string]: any;
};
type FilteredQuery$8 = {
    filter: Filter$7;
    query: Query$7;
} & {
    [key: string]: any;
};
type QueryFilter$8 = {
    query: Query$7;
} & {
    [key: string]: any;
};
type Query$8 = {
    boolQuery?: BoolQuery$7;
    filteredQuery?: FilteredQuery$8;
    matchAllQuery?: MatchAllQuery$8;
    nestedQuery?: NestedQuery$7;
    termQuery?: TermQuery$7;
    textQuery?: TextQuery$7;
} & {
    [key: string]: any;
};
type TermQuery$8 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$8 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$8 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$8 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$8 = {
    must?: Array<Query$8>;
    mustNot?: Array<Query$8>;
    should?: Array<Query$8>;
} & {
    [key: string]: any;
};
type NestedQuery$8 = {
    path: string;
    query: Query$8;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$8 = {
    boolFilter?: BoolFilter$8;
    queryFilter?: QueryFilter$8;
    range2Filter?: Range2Filter$8;
    rangeFilter?: RangeFilter$7;
    termFilter?: TermFilter$8;
} & {
    [key: string]: any;
};
type Sort$8 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type RangeFilter$8 = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
} & {
    [key: string]: any;
};
type L10nString$7 = {} & {
    [key: string]: any;
};
type PropertyValueDefinition$7 = {
    description: L10nString$7;
    displayValue: L10nString$7;
    id: string;
    position?: number;
    value: string;
};
type ProductPriceTable$0 = {
    price?: number;
    pricebook?: string;
    quantity?: number;
} & {
    [key: string]: any;
};
type ProductRef = {
    id: string;
} & {
    [key: string]: any;
};
type SuggestedTerms = {
    originalTerm: string;
    terms?: Array<SuggestedTerm>;
} & {
    [key: string]: any;
};
type PriceRange$0 = {
    maxPrice?: number;
    minPrice?: number;
    pricebook?: string;
} & {
    [key: string]: any;
};
type CategorySuggestions = {
    categories?: Array<SuggestedCategory>;
    suggestedPhrases?: Array<SuggestedPhrase>;
    suggestedTerms: Array<SuggestedTerms>;
} & {
    [key: string]: any;
};
type SuggestedProduct = {
    currency: string;
    price: number;
    productId: string;
    productName: string;
} & {
    [key: string]: any;
};
type SuggestedPhrase = {
    exactMatch: boolean;
    phrase: string;
} & {
    [key: string]: any;
};
type VariationAttribute$1 = {
    id: string;
    name?: string;
    values?: Array<VariationAttributeValue$0>;
} & {
    [key: string]: any;
};
type ProductSuggestions = {
    products?: Array<SuggestedProduct>;
    suggestedPhrases?: Array<SuggestedPhrase>;
    suggestedTerms: Array<SuggestedTerms>;
} & {
    [key: string]: any;
};
type SuggestedCategory = {
    id: string;
    name: string;
    parentCategoryName: string;
} & {
    [key: string]: any;
};
type ProductType$1 = {
    bundle?: boolean;
    item?: boolean;
    master?: boolean;
    option?: boolean;
    set?: boolean;
    variant?: boolean;
    variationGroup?: boolean;
} & {
    [key: string]: any;
};
type Variant$1 = {
    orderable?: boolean;
    price?: number;
    productId: string;
    tieredPrices?: Array<ProductPriceTable$0>;
    variationValues?: {} & {
        [key: string]: any;
    };
    productPromotions?: Array<ProductPromotion$0>;
} & {
    [key: string]: any;
};
type VariationGroup$1 = {
    orderable: boolean;
    price: number;
    productId: string;
    variationValues: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type BrandSuggestions = {} & {
    [key: string]: any;
};
type ProductSearchRefinementValue = {
    description?: string;
    hitCount: number;
    label: string;
    presentationId?: string;
    value: string;
    values?: Array<ProductSearchRefinementValue>;
} & {
    [key: string]: any;
};
type ProductSearchSortingOption = {
    id: string;
    label: string;
} & {
    [key: string]: any;
};
type ImageGroup$1 = {
    images: Array<Image$0>;
    variationAttributes?: Array<VariationAttribute$1>;
    viewType: string;
} & {
    [key: string]: any;
};
type SuggestedTerm = {
    completed: boolean;
    corrected: boolean;
    exactMatch: boolean;
    value: string;
} & {
    [key: string]: any;
};
type ProductSearchRefinement = {
    attributeId: string;
    label?: string;
    values?: Array<ProductSearchRefinementValue>;
} & {
    [key: string]: any;
};
type CustomSuggestions = {
    customSuggestion?: string;
    suggestedPhrases?: Array<SuggestedPhrase>;
    suggestedTerms: Array<SuggestedTerms>;
} & {
    [key: string]: any;
};
type ProductSearchHit = {
    currency?: string;
    hitType?: string;
    image?: Image$0;
    orderable?: boolean;
    price?: number;
    priceMax?: number;
    prices?: {} & {
        [key: string]: any;
    };
    productId: string;
    productName?: string;
    productType?: ProductType$1;
    representedProduct?: ProductRef;
    representedProducts?: Array<ProductRef>;
    variationAttributes?: Array<VariationAttribute$1>;
    imageGroups?: Array<ImageGroup$1>;
    priceRanges?: Array<PriceRange$0>;
    productPromotions?: Array<ProductPromotion$0>;
    tieredPrices?: Array<ProductPriceTable$0>;
    variants?: Array<Variant$1>;
    variationGroups?: Array<VariationGroup$1>;
} & {
    [key: string]: any;
};
type ProductSearchResult = {
    limit: number;
    hits: Array<ProductSearchHit>;
    pageMetaTags?: Array<PageMetaTag>;
    query: string;
    refinements: Array<ProductSearchRefinement>;
    searchPhraseSuggestions: Suggestion;
    selectedRefinements?: {} & {
        [key: string]: any;
    };
    selectedSortingOption?: string;
    sortingOptions: Array<ProductSearchSortingOption>;
    offset: number;
    total: number;
} & {
    [key: string]: any;
};
type Image$1 = {
    alt?: string;
    disBaseLink?: string;
    link: string;
    title?: string;
} & {
    [key: string]: any;
};
type VariationAttributeValue$1 = {
    description?: string;
    image?: Image$1;
    imageSwatch?: Image$1;
    name?: string;
    orderable?: boolean;
    value: string;
} & {
    [key: string]: any;
};
type ProductPromotion$1 = {
    calloutMsg: string;
    promotionId: string;
    promotionalPrice: number;
} & {
    [key: string]: any;
};
type Suggestion$0 = {
    suggestedPhrases?: Array<SuggestedPhrase>;
    suggestedTerms: Array<SuggestedTerms>;
} & {
    [key: string]: any;
};
type PageMetaTag$0 = {
    id?: string;
    value?: string;
} & {
    [key: string]: any;
};
type SuggestionResult = {
    brandSuggestions?: BrandSuggestions;
    categorySuggestions?: CategorySuggestions;
    productSuggestions?: ProductSuggestions;
    customSuggestion?: CustomSuggestions;
    searchPhrase: string;
} & {
    [key: string]: any;
};
/**
 * All path parameters that are used by at least one ShopperSearch method.
 */
type ShopperSearchPathParameters = {
    organizationId?: string;
};
/**
 * All query parameters that are used by at least one ShopperSearch method.
 */
type ShopperSearchQueryParameters = {
    select?: string;
    siteId?: string;
    q?: string;
    refine?: Array<string>;
    sort?: string;
    currency?: string;
    locale?: string;
    expand?: Array<string>;
    allImages?: boolean;
    perPricebook?: boolean;
    allVariationProperties?: boolean;
    offset?: any;
    limit?: number;
};
/**
 * All parameters that are used by ShopperSearch.
 */
type ShopperSearchParameters = ShopperSearchPathParameters & BaseUriParameters & ShopperSearchQueryParameters;
/**
 * [Shopper Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-search:Summary)
 * ==================================
 *
 * *product search and helpful search suggestions.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperSearch } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperSearchClient = new ShopperSearch(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.0.42<br />
 * Last Updated: <br />
 * </span>
 *
 *
 */
declare class ShopperSearch<ConfigParameters extends ShopperSearchParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/search/shopper-search/{version}/";
    static readonly apiPaths: {
        productSearch: string;
        getSearchSuggestions: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly productSearch: readonly [
            "organizationId",
            "select",
            "siteId",
            "q",
            "refine",
            "sort",
            "currency",
            "locale",
            "expand",
            "allImages",
            "perPricebook",
            "allVariationProperties",
            "offset",
            "limit"
        ];
        readonly productSearchRequired: readonly [
            "organizationId",
            "siteId"
        ];
        readonly getSearchSuggestions: readonly [
            "organizationId",
            "siteId",
            "q",
            "limit",
            "currency",
            "locale"
        ];
        readonly getSearchSuggestionsRequired: readonly [
            "organizationId",
            "siteId",
            "q"
        ];
    };
    /**
     * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
     the product search hit. The search result contains only products that are online and assigned to site catalog.
     *
     * If you would like to get a raw Response object use the other productSearch function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
     * @param siteId -
     * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
     * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
     values are separated by '='. Multiple values are supported by a subset of refinement attributes and
     can be provided by separating them using a pipe (URL
     encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
     The following system refinement attribute ids are supported:
     
     cgid: Allows refinement per single category ID. Multiple category ids are not supported.
     price: Allows refinement per single price range. Multiple price ranges are not supported.
     pmid: Allows refinement per promotion ID.
     htype: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
     orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
     * @param sort - The ID of the sorting option to sort the search hits.
     * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
     * @param locale -
     * @param expand - A comma-separated list with allowed values - `availability`, `images`, `prices`, `represented_products`, `variations`, `promotions`, `custom_properties`. By default, the expand parameter includes `availability, images, prices, represented_products, variations`. Use none to disable all expand options. **The page_meta_tags expand value is optional and is available B2C Commerce version 25.2.**
     * @param allImages - When the `images` expand parameter is used with this flag, the response includes the `imageGroups property`, which contains an image model. If this flag is true, the full image model is returned. If false, only matching images are included. If no flag is passed, the `imageGroups` property is omitted from the response.
     * @param perPricebook - When this flag is set to `true` and is used with the `prices` expand parameter, the response includes per PriceBook prices and tiered prices (if available).
     * @param allVariationProperties - The flag that determines which variation properties are included in the result. When set to `true` with the `variations` expand parameter, all variation properties (`variationAttributes`, `variationGroups`, `variants`) are returned. When set to false, only the default property `variationAttributes` is returned.
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type ProductSearchResult.
     *
     */
    productSearch(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            select?: string;
            siteId: string;
            q?: string;
            refine?: Array<string>;
            sort?: string;
            currency?: string;
            locale?: string;
            expand?: Array<string>;
            allImages?: boolean;
            perPricebook?: boolean;
            allVariationProperties?: boolean;
            offset?: any;
            limit?: number;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<ProductSearchResult>;
    /**
     * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
     the product search hit. The search result contains only products that are online and assigned to site catalog.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
     * @param siteId -
     * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
     * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
     values are separated by '='. Multiple values are supported by a subset of refinement attributes and
     can be provided by separating them using a pipe (URL
     encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
     The following system refinement attribute ids are supported:
     
     cgid: Allows refinement per single category ID. Multiple category ids are not supported.
     price: Allows refinement per single price range. Multiple price ranges are not supported.
     pmid: Allows refinement per promotion ID.
     htype: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
     orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
     * @param sort - The ID of the sorting option to sort the search hits.
     * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
     * @param locale -
     * @param expand - A comma-separated list with allowed values - `availability`, `images`, `prices`, `represented_products`, `variations`, `promotions`, `custom_properties`. By default, the expand parameter includes `availability, images, prices, represented_products, variations`. Use none to disable all expand options. **The page_meta_tags expand value is optional and is available B2C Commerce version 25.2.**
     * @param allImages - When the `images` expand parameter is used with this flag, the response includes the `imageGroups property`, which contains an image model. If this flag is true, the full image model is returned. If false, only matching images are included. If no flag is passed, the `imageGroups` property is omitted from the response.
     * @param perPricebook - When this flag is set to `true` and is used with the `prices` expand parameter, the response includes per PriceBook prices and tiered prices (if available).
     * @param allVariationProperties - The flag that determines which variation properties are included in the result. When set to `true` with the `variations` expand parameter, all variation properties (`variationAttributes`, `variationGroups`, `variants`) are returned. When set to false, only the default property `variationAttributes` is returned.
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ProductSearchResult otherwise.
     *
     */
    productSearch<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            select?: string;
            siteId: string;
            q?: string;
            refine?: Array<string>;
            sort?: string;
            currency?: string;
            locale?: string;
            expand?: Array<string>;
            allImages?: boolean;
            perPricebook?: boolean;
            allVariationProperties?: boolean;
            offset?: any;
            limit?: number;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : ProductSearchResult>;
    /**
     * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
     *
     * If you would like to get a raw Response object use the other getSearchSuggestions function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
     * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
     * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type SuggestionResult.
     *
     */
    getSearchSuggestions(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            q: string;
            limit?: number;
            currency?: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<SuggestionResult>;
    /**
     * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
     * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
     * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type SuggestionResult otherwise.
     *
     */
    getSearchSuggestions<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            q: string;
            limit?: number;
            currency?: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : SuggestionResult>;
}
declare namespace ShopperSearchTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query$8;
        sorts?: Array<Sort$8>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition$7;
        id?: string;
        name: L10nString$7;
        description: L10nString$7;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString$7;
        possibleValues?: Array<PropertyValueDefinition$7>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query$8;
        sorts?: Array<Sort$8>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter$8>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query$8;
        sorts?: Array<Sort$8>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter$8;
        query: Query$8;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query$8;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$8;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$8;
        termQuery?: TermQuery$8;
        textQuery?: TextQuery$8;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter$8;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        field: string;
        from?: any;
        fromInclusive?: boolean;
        to?: any;
        toInclusive?: boolean;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition$7;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition$7>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ProductPriceTable = {
        price?: number;
        pricebook?: string;
        quantity?: number;
    } & {
        [key: string]: any;
    };
    type ProductRef = {
        id: string;
    } & {
        [key: string]: any;
    };
    type SuggestedTerms = {
        originalTerm: string;
        terms?: Array<SuggestedTerm>;
    } & {
        [key: string]: any;
    };
    type PriceRange = {
        maxPrice?: number;
        minPrice?: number;
        pricebook?: string;
    } & {
        [key: string]: any;
    };
    type CategorySuggestions = {
        categories?: Array<SuggestedCategory>;
        suggestedPhrases?: Array<SuggestedPhrase>;
        suggestedTerms: Array<SuggestedTerms>;
    } & {
        [key: string]: any;
    };
    type SuggestedProduct = {
        currency: string;
        price: number;
        productId: string;
        productName: string;
    } & {
        [key: string]: any;
    };
    type SuggestedPhrase = {
        exactMatch: boolean;
        phrase: string;
    } & {
        [key: string]: any;
    };
    type VariationAttribute = {
        id: string;
        name?: string;
        values?: Array<VariationAttributeValue$1>;
    } & {
        [key: string]: any;
    };
    type ProductSuggestions = {
        products?: Array<SuggestedProduct>;
        suggestedPhrases?: Array<SuggestedPhrase>;
        suggestedTerms: Array<SuggestedTerms>;
    } & {
        [key: string]: any;
    };
    type SuggestedCategory = {
        id: string;
        name: string;
        parentCategoryName: string;
    } & {
        [key: string]: any;
    };
    type ProductType = {
        bundle?: boolean;
        item?: boolean;
        master?: boolean;
        option?: boolean;
        set?: boolean;
        variant?: boolean;
        variationGroup?: boolean;
    } & {
        [key: string]: any;
    };
    type Variant = {
        orderable?: boolean;
        price?: number;
        productId: string;
        tieredPrices?: Array<ProductPriceTable>;
        variationValues?: {} & {
            [key: string]: any;
        };
        productPromotions?: Array<ProductPromotion$1>;
    } & {
        [key: string]: any;
    };
    type VariationGroup = {
        orderable: boolean;
        price: number;
        productId: string;
        variationValues: {} & {
            [key: string]: any;
        };
    } & {
        [key: string]: any;
    };
    type BrandSuggestions = {} & {
        [key: string]: any;
    };
    type ProductSearchRefinementValue = {
        description?: string;
        hitCount: number;
        label: string;
        presentationId?: string;
        value: string;
        values?: Array<ProductSearchRefinementValue>;
    } & {
        [key: string]: any;
    };
    type ProductSearchSortingOption = {
        id: string;
        label: string;
    } & {
        [key: string]: any;
    };
    type ImageGroup = {
        images: Array<Image$1>;
        variationAttributes?: Array<VariationAttribute>;
        viewType: string;
    } & {
        [key: string]: any;
    };
    type SuggestedTerm = {
        completed: boolean;
        corrected: boolean;
        exactMatch: boolean;
        value: string;
    } & {
        [key: string]: any;
    };
    type ProductSearchRefinement = {
        attributeId: string;
        label?: string;
        values?: Array<ProductSearchRefinementValue>;
    } & {
        [key: string]: any;
    };
    type CustomSuggestions = {
        customSuggestion?: string;
        suggestedPhrases?: Array<SuggestedPhrase>;
        suggestedTerms: Array<SuggestedTerms>;
    } & {
        [key: string]: any;
    };
    type ProductSearchHit = {
        currency?: string;
        hitType?: string;
        image?: Image$1;
        orderable?: boolean;
        price?: number;
        priceMax?: number;
        prices?: {} & {
            [key: string]: any;
        };
        productId: string;
        productName?: string;
        productType?: ProductType;
        representedProduct?: ProductRef;
        representedProducts?: Array<ProductRef>;
        variationAttributes?: Array<VariationAttribute>;
        imageGroups?: Array<ImageGroup>;
        priceRanges?: Array<PriceRange>;
        productPromotions?: Array<ProductPromotion$1>;
        tieredPrices?: Array<ProductPriceTable>;
        variants?: Array<Variant>;
        variationGroups?: Array<VariationGroup>;
    } & {
        [key: string]: any;
    };
    type ProductSearchResult = {
        limit: number;
        hits: Array<ProductSearchHit>;
        pageMetaTags?: Array<PageMetaTag$0>;
        query: string;
        refinements: Array<ProductSearchRefinement>;
        searchPhraseSuggestions: Suggestion$0;
        selectedRefinements?: {} & {
            [key: string]: any;
        };
        selectedSortingOption?: string;
        sortingOptions: Array<ProductSearchSortingOption>;
        offset: number;
        total: number;
    } & {
        [key: string]: any;
    };
    type Image = {
        alt?: string;
        disBaseLink?: string;
        link: string;
        title?: string;
    } & {
        [key: string]: any;
    };
    type VariationAttributeValue = {
        description?: string;
        image?: Image;
        imageSwatch?: Image;
        name?: string;
        orderable?: boolean;
        value: string;
    } & {
        [key: string]: any;
    };
    type ProductPromotion = {
        calloutMsg: string;
        promotionId: string;
        promotionalPrice: number;
    } & {
        [key: string]: any;
    };
    type Suggestion = {
        suggestedPhrases?: Array<SuggestedPhrase>;
        suggestedTerms: Array<SuggestedTerms>;
    } & {
        [key: string]: any;
    };
    type PageMetaTag = {
        id?: string;
        value?: string;
    } & {
        [key: string]: any;
    };
    type SuggestionResult = {
        brandSuggestions?: BrandSuggestions;
        categorySuggestions?: CategorySuggestions;
        productSuggestions?: ProductSuggestions;
        customSuggestion?: CustomSuggestions;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    /**
     * All path parameters that are used by at least one ShopperSearch method.
     */
    type ShopperSearchPathParameters = {
        organizationId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperSearch method.
     */
    type ShopperSearchQueryParameters = {
        select?: string;
        siteId?: string;
        q?: string;
        refine?: Array<string>;
        sort?: string;
        currency?: string;
        locale?: string;
        expand?: Array<string>;
        allImages?: boolean;
        perPricebook?: boolean;
        allVariationProperties?: boolean;
        offset?: any;
        limit?: number;
    };
    /**
     * All parameters that are used by ShopperSearch.
     */
    type ShopperSearchParameters = ShopperSearchPathParameters & BaseUriParameters & ShopperSearchQueryParameters;
    /**
     * [Shopper Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-search:Summary)
     * ==================================
     *
     * *product search and helpful search suggestions.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperSearch } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperSearchClient = new ShopperSearch(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.0.42<br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperSearch<ConfigParameters extends ShopperSearchParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/search/shopper-search/{version}/";
        static readonly apiPaths: {
            productSearch: string;
            getSearchSuggestions: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly productSearch: readonly [
                "organizationId",
                "select",
                "siteId",
                "q",
                "refine",
                "sort",
                "currency",
                "locale",
                "expand",
                "allImages",
                "perPricebook",
                "allVariationProperties",
                "offset",
                "limit"
            ];
            readonly productSearchRequired: readonly [
                "organizationId",
                "siteId"
            ];
            readonly getSearchSuggestions: readonly [
                "organizationId",
                "siteId",
                "q",
                "limit",
                "currency",
                "locale"
            ];
            readonly getSearchSuggestionsRequired: readonly [
                "organizationId",
                "siteId",
                "q"
            ];
        };
        /**
         * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
         the product search hit. The search result contains only products that are online and assigned to site catalog.
         *
         * If you would like to get a raw Response object use the other productSearch function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
         * @param siteId -
         * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
         * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
         values are separated by '='. Multiple values are supported by a subset of refinement attributes and
         can be provided by separating them using a pipe (URL
         encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
         The following system refinement attribute ids are supported:
         
         cgid: Allows refinement per single category ID. Multiple category ids are not supported.
         price: Allows refinement per single price range. Multiple price ranges are not supported.
         pmid: Allows refinement per promotion ID.
         htype: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
         orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
         * @param sort - The ID of the sorting option to sort the search hits.
         * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
         * @param locale -
         * @param expand - A comma-separated list with allowed values - `availability`, `images`, `prices`, `represented_products`, `variations`, `promotions`, `custom_properties`. By default, the expand parameter includes `availability, images, prices, represented_products, variations`. Use none to disable all expand options. **The page_meta_tags expand value is optional and is available B2C Commerce version 25.2.**
         * @param allImages - When the `images` expand parameter is used with this flag, the response includes the `imageGroups property`, which contains an image model. If this flag is true, the full image model is returned. If false, only matching images are included. If no flag is passed, the `imageGroups` property is omitted from the response.
         * @param perPricebook - When this flag is set to `true` and is used with the `prices` expand parameter, the response includes per PriceBook prices and tiered prices (if available).
         * @param allVariationProperties - The flag that determines which variation properties are included in the result. When set to `true` with the `variations` expand parameter, all variation properties (`variationAttributes`, `variationGroups`, `variants`) are returned. When set to false, only the default property `variationAttributes` is returned.
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type ProductSearchResult.
         *
         */
        productSearch(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                select?: string;
                siteId: string;
                q?: string;
                refine?: Array<string>;
                sort?: string;
                currency?: string;
                locale?: string;
                expand?: Array<string>;
                allImages?: boolean;
                perPricebook?: boolean;
                allVariationProperties?: boolean;
                offset?: any;
                limit?: number;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<ProductSearchResult>;
        /**
         * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
         the product search hit. The search result contains only products that are online and assigned to site catalog.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations and filter expressions.The actual selector value must be enclosed within parentheses.
         * @param siteId -
         * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
         * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
         values are separated by '='. Multiple values are supported by a subset of refinement attributes and
         can be provided by separating them using a pipe (URL
         encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
         The following system refinement attribute ids are supported:
         
         cgid: Allows refinement per single category ID. Multiple category ids are not supported.
         price: Allows refinement per single price range. Multiple price ranges are not supported.
         pmid: Allows refinement per promotion ID.
         htype: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
         orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
         * @param sort - The ID of the sorting option to sort the search hits.
         * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
         * @param locale -
         * @param expand - A comma-separated list with allowed values - `availability`, `images`, `prices`, `represented_products`, `variations`, `promotions`, `custom_properties`. By default, the expand parameter includes `availability, images, prices, represented_products, variations`. Use none to disable all expand options. **The page_meta_tags expand value is optional and is available B2C Commerce version 25.2.**
         * @param allImages - When the `images` expand parameter is used with this flag, the response includes the `imageGroups property`, which contains an image model. If this flag is true, the full image model is returned. If false, only matching images are included. If no flag is passed, the `imageGroups` property is omitted from the response.
         * @param perPricebook - When this flag is set to `true` and is used with the `prices` expand parameter, the response includes per PriceBook prices and tiered prices (if available).
         * @param allVariationProperties - The flag that determines which variation properties are included in the result. When set to `true` with the `variations` expand parameter, all variation properties (`variationAttributes`, `variationGroups`, `variants`) are returned. When set to false, only the default property `variationAttributes` is returned.
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ProductSearchResult otherwise.
         *
         */
        productSearch<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                select?: string;
                siteId: string;
                q?: string;
                refine?: Array<string>;
                sort?: string;
                currency?: string;
                locale?: string;
                expand?: Array<string>;
                allImages?: boolean;
                perPricebook?: boolean;
                allVariationProperties?: boolean;
                offset?: any;
                limit?: number;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : ProductSearchResult>;
        /**
         * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
         *
         * If you would like to get a raw Response object use the other getSearchSuggestions function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
         * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
         * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type SuggestionResult.
         *
         */
        getSearchSuggestions(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
                q: string;
                limit?: number;
                currency?: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<SuggestionResult>;
        /**
         * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
         * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
         * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type SuggestionResult otherwise.
         *
         */
        getSearchSuggestions<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
                q: string;
                limit?: number;
                currency?: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : SuggestionResult>;
    }
}
type BoolFilter$9 = {
    filters?: Array<Filter$8>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$9 = {} & {
    [key: string]: any;
};
type FilteredQuery$9 = {
    filter: Filter$8;
    query: Query$8;
} & {
    [key: string]: any;
};
type QueryFilter$9 = {
    query: Query$8;
} & {
    [key: string]: any;
};
type Query$9 = {
    boolQuery?: BoolQuery$8;
    filteredQuery?: FilteredQuery$9;
    matchAllQuery?: MatchAllQuery$9;
    nestedQuery?: NestedQuery$8;
    termQuery?: TermQuery$8;
    textQuery?: TextQuery$8;
} & {
    [key: string]: any;
};
type TermQuery$9 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$9 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$9 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$9 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$9 = {
    must?: Array<Query$9>;
    mustNot?: Array<Query$9>;
    should?: Array<Query$9>;
} & {
    [key: string]: any;
};
type NestedQuery$9 = {
    path: string;
    query: Query$9;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$9 = {
    boolFilter?: BoolFilter$9;
    queryFilter?: QueryFilter$9;
    range2Filter?: Range2Filter$9;
    rangeFilter?: RangeFilter$8;
    termFilter?: TermFilter$9;
} & {
    [key: string]: any;
};
type Sort$9 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type RangeFilter$9 = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
} & {
    [key: string]: any;
};
type L10nString$8 = {} & {
    [key: string]: any;
};
type PropertyValueDefinition$8 = {
    description: L10nString$8;
    displayValue: L10nString$8;
    id: string;
    position?: number;
    value: string;
};
type UrlMapping = {
    resourceType?: string;
    resourceSubType?: string;
    resourceId?: string;
    refinements?: {} & {
        [key: string]: any;
    };
    statusCode?: number;
    destinationUrl?: string;
    copySourceParams?: boolean;
    additionalUrlParams?: string;
    productCategoryId?: string;
} & {
    [key: string]: any;
};
/**
 * All path parameters that are used by at least one ShopperSeo method.
 */
type ShopperSeoPathParameters = {
    organizationId?: string;
};
/**
 * All query parameters that are used by at least one ShopperSeo method.
 */
type ShopperSeoQueryParameters = {
    urlSegment?: string;
    siteId?: string;
    locale?: string;
};
/**
 * All parameters that are used by ShopperSeo.
 */
type ShopperSeoParameters = ShopperSeoPathParameters & BaseUriParameters & ShopperSeoQueryParameters;
/**
 * [Shopper Seo](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-seo:Summary)
 * ==================================
 *
 * **<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperSeo } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperSeoClient = new ShopperSeo(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.0.9<br />
 * Last Updated: <br />
 * </span>
 *
 *
 */
declare class ShopperSeo<ConfigParameters extends ShopperSeoParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/site/shopper-seo/{version}";
    static readonly apiPaths: {
        getUrlMapping: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly getUrlMapping: readonly [
            "organizationId",
            "urlSegment",
            "siteId",
            "locale"
        ];
        readonly getUrlMappingRequired: readonly [
            "organizationId",
            "urlSegment",
            "siteId"
        ];
    };
    /**
     * Gets URL mapping information for a URL that a shopper clicked or typed in. The mapping information is based on URL rules and redirects set up in Business Manager. For more information about prerequisites and sample usage, see [URL Resolution](/docs/commerce/commerce-api/guide/url-resolution.html). You can customize the behavior of this endpoint by using hooks. See the hooks for getUrlMapping in the [Hook List](https://developer.salesforce.com/docs/commerce/commerce-api/guide/hook_list.html).
     *
     * If you would like to get a raw Response object use the other getUrlMapping function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param urlSegment - The part of the requested URL that comes after the domain name. For example, the urlSegment for "www.abc.com/blue/new-arrivals/tops" is "blue/new-arrivals/tops". There's no limit on the length of the urlSegment. However, for this endpoint, the maximum allowed length of the URL (after URL encoding) is 2047 characters. Make this field URL-encoded so that it properly handles special values such as whitespace. If a urlSegment includes a query string, a 404 error code is returned.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     Please note that if no locale is specified, the default site locale will be used.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type UrlMapping.
     *
     */
    getUrlMapping(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            urlSegment: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<UrlMapping>;
    /**
     * Gets URL mapping information for a URL that a shopper clicked or typed in. The mapping information is based on URL rules and redirects set up in Business Manager. For more information about prerequisites and sample usage, see [URL Resolution](/docs/commerce/commerce-api/guide/url-resolution.html). You can customize the behavior of this endpoint by using hooks. See the hooks for getUrlMapping in the [Hook List](https://developer.salesforce.com/docs/commerce/commerce-api/guide/hook_list.html).
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param urlSegment - The part of the requested URL that comes after the domain name. For example, the urlSegment for "www.abc.com/blue/new-arrivals/tops" is "blue/new-arrivals/tops". There's no limit on the length of the urlSegment. However, for this endpoint, the maximum allowed length of the URL (after URL encoding) is 2047 characters. Make this field URL-encoded so that it properly handles special values such as whitespace. If a urlSegment includes a query string, a 404 error code is returned.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     Please note that if no locale is specified, the default site locale will be used.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type UrlMapping otherwise.
     *
     */
    getUrlMapping<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            urlSegment: string;
            siteId: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : UrlMapping>;
}
declare namespace ShopperSeoTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query$9;
        sorts?: Array<Sort$9>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition$8;
        id?: string;
        name: L10nString$8;
        description: L10nString$8;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString$8;
        possibleValues?: Array<PropertyValueDefinition$8>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query$9;
        sorts?: Array<Sort$9>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter$9>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query$9;
        sorts?: Array<Sort$9>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter$9;
        query: Query$9;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query$9;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$9;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$9;
        termQuery?: TermQuery$9;
        textQuery?: TextQuery$9;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter$9;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        field: string;
        from?: any;
        fromInclusive?: boolean;
        to?: any;
        toInclusive?: boolean;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition$8;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition$8>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    type UrlMapping = {
        resourceType?: string;
        resourceSubType?: string;
        resourceId?: string;
        refinements?: {} & {
            [key: string]: any;
        };
        statusCode?: number;
        destinationUrl?: string;
        copySourceParams?: boolean;
        additionalUrlParams?: string;
        productCategoryId?: string;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    /**
     * All path parameters that are used by at least one ShopperSeo method.
     */
    type ShopperSeoPathParameters = {
        organizationId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperSeo method.
     */
    type ShopperSeoQueryParameters = {
        urlSegment?: string;
        siteId?: string;
        locale?: string;
    };
    /**
     * All parameters that are used by ShopperSeo.
     */
    type ShopperSeoParameters = ShopperSeoPathParameters & BaseUriParameters & ShopperSeoQueryParameters;
    /**
     * [Shopper Seo](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-seo:Summary)
     * ==================================
     *
     * **<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperSeo } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperSeoClient = new ShopperSeo(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.0.9<br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperSeo<ConfigParameters extends ShopperSeoParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/site/shopper-seo/{version}";
        static readonly apiPaths: {
            getUrlMapping: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly getUrlMapping: readonly [
                "organizationId",
                "urlSegment",
                "siteId",
                "locale"
            ];
            readonly getUrlMappingRequired: readonly [
                "organizationId",
                "urlSegment",
                "siteId"
            ];
        };
        /**
         * Gets URL mapping information for a URL that a shopper clicked or typed in. The mapping information is based on URL rules and redirects set up in Business Manager. For more information about prerequisites and sample usage, see [URL Resolution](/docs/commerce/commerce-api/guide/url-resolution.html). You can customize the behavior of this endpoint by using hooks. See the hooks for getUrlMapping in the [Hook List](https://developer.salesforce.com/docs/commerce/commerce-api/guide/hook_list.html).
         *
         * If you would like to get a raw Response object use the other getUrlMapping function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param urlSegment - The part of the requested URL that comes after the domain name. For example, the urlSegment for "www.abc.com/blue/new-arrivals/tops" is "blue/new-arrivals/tops". There's no limit on the length of the urlSegment. However, for this endpoint, the maximum allowed length of the URL (after URL encoding) is 2047 characters. Make this field URL-encoded so that it properly handles special values such as whitespace. If a urlSegment includes a query string, a 404 error code is returned.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         Please note that if no locale is specified, the default site locale will be used.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type UrlMapping.
         *
         */
        getUrlMapping(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                urlSegment: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<UrlMapping>;
        /**
         * Gets URL mapping information for a URL that a shopper clicked or typed in. The mapping information is based on URL rules and redirects set up in Business Manager. For more information about prerequisites and sample usage, see [URL Resolution](/docs/commerce/commerce-api/guide/url-resolution.html). You can customize the behavior of this endpoint by using hooks. See the hooks for getUrlMapping in the [Hook List](https://developer.salesforce.com/docs/commerce/commerce-api/guide/hook_list.html).
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param urlSegment - The part of the requested URL that comes after the domain name. For example, the urlSegment for "www.abc.com/blue/new-arrivals/tops" is "blue/new-arrivals/tops". There's no limit on the length of the urlSegment. However, for this endpoint, the maximum allowed length of the URL (after URL encoding) is 2047 characters. Make this field URL-encoded so that it properly handles special values such as whitespace. If a urlSegment includes a query string, a 404 error code is returned.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         Please note that if no locale is specified, the default site locale will be used.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type UrlMapping otherwise.
         *
         */
        getUrlMapping<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                urlSegment: string;
                siteId: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : UrlMapping>;
    }
}
type BoolFilter$10 = {
    filters?: Array<Filter$9>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$10 = {} & {
    [key: string]: any;
};
type FilteredQuery$10 = {
    filter: Filter$9;
    query: Query$9;
} & {
    [key: string]: any;
};
type QueryFilter$10 = {
    query: Query$9;
} & {
    [key: string]: any;
};
type Query$10 = {
    boolQuery?: BoolQuery$9;
    filteredQuery?: FilteredQuery$10;
    matchAllQuery?: MatchAllQuery$10;
    nestedQuery?: NestedQuery$9;
    termQuery?: TermQuery$9;
    textQuery?: TextQuery$9;
} & {
    [key: string]: any;
};
type TermQuery$10 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$10 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$10 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$10 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$10 = {
    must?: Array<Query$10>;
    mustNot?: Array<Query$10>;
    should?: Array<Query$10>;
} & {
    [key: string]: any;
};
type NestedQuery$10 = {
    path: string;
    query: Query$10;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$10 = {
    boolFilter?: BoolFilter$10;
    queryFilter?: QueryFilter$10;
    range2Filter?: Range2Filter$10;
    rangeFilter?: RangeFilter$9;
    termFilter?: TermFilter$10;
} & {
    [key: string]: any;
};
type Sort$10 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type RangeFilter$10 = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
} & {
    [key: string]: any;
};
type L10nString$9 = {} & {
    [key: string]: any;
};
type PropertyValueDefinition$9 = {
    description: L10nString$9;
    displayValue: L10nString$9;
    id: string;
    position?: number;
    value: string;
};
type StoreResult = {
    limit: number;
    data: Array<Store>;
    offset?: any;
    total: any;
} & {
    [key: string]: any;
};
type Store = {
    address1?: string;
    address2?: string;
    city?: string;
    countryCode?: string;
    distance?: number;
    distanceUnit?: string;
    email?: string;
    fax?: string;
    id: string;
    image?: string;
    inventoryId?: string;
    latitude?: number;
    longitude?: number;
    name?: string;
    phone?: string;
    posEnabled?: boolean;
    postalCode?: string;
    stateCode?: string;
    storeEvents?: string;
    storeHours?: string;
    storeLocatorEnabled?: boolean;
} & {
    [key: string]: any;
};
/**
 * All path parameters that are used by at least one ShopperStores method.
 */
type ShopperStoresPathParameters = {
    organizationId?: string;
};
/**
 * All query parameters that are used by at least one ShopperStores method.
 */
type ShopperStoresQueryParameters = {
    countryCode?: string;
    distanceUnit?: string;
    latitude?: number;
    longitude?: number;
    maxDistance?: number;
    postalCode?: string;
    siteId?: string;
    locale?: string;
    offset?: any;
    limit?: number;
    ids?: string;
};
/**
 * All parameters that are used by ShopperStores.
 */
type ShopperStoresParameters = ShopperStoresPathParameters & BaseUriParameters & ShopperStoresQueryParameters;
/**
 * [Shopper Stores](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-stores:Summary)
 * ==================================
 *
 * *Search for a specific store or stores in an area.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperStores } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperStoresClient = new ShopperStores(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.0.15<br />
 * Last Updated: <br />
 * </span>
 *
 * @beta
 *
 *
 */
declare class ShopperStores<ConfigParameters extends ShopperStoresParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/store/shopper-stores/{version}";
    static readonly apiPaths: {
        searchStores: string;
        getStores: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly searchStores: readonly [
            "organizationId",
            "countryCode",
            "distanceUnit",
            "latitude",
            "longitude",
            "maxDistance",
            "postalCode",
            "siteId",
            "locale",
            "offset",
            "limit"
        ];
        readonly searchStoresRequired: readonly [
            "organizationId",
            "siteId"
        ];
        readonly getStores: readonly [
            "organizationId",
            "siteId",
            "ids",
            "locale"
        ];
        readonly getStoresRequired: readonly [
            "organizationId",
            "siteId",
            "ids"
        ];
    };
    /**
     * This resource retrieves a list of stores for the given site that are within a configured distance of a geolocation:
     - The distance is interpreted either in miles or kilometers, depending on the `distanceUnit` input parameter.
     - The location is specified by either directly providing a latitude and longitude coordinate pair, or by providing a country and a postal code. If a postal code is passed, the resource looks in the system's geolocation mappings in Business Manager to find the coordinates for this postal code. If no matching geolocation is found, the resource returns an empty list of stores. If coordinates are passed, the values for country and postal code are ignored.
     
     To verify site latitude and longitude information in Business Manager:
     - Navigate to **Merchant Tools -\> Online Marketing -\> Stores**.
     - Select the applicable site.
     - In the **Address** tab, verify that valid information is provided in the following fields: **Address**, **City**, **Postal Code**, **State**, and **Country**. For latitude and longitude values, you can manually enter values or provide all field values to auto-populate **Latitude** and **Longitude**. You must provide valid values for all of the previous fields for latitude and longitude to auto-populate **Latitude** and **Longitude** values.
     
     *
     * If you would like to get a raw Response object use the other searchStores function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param countryCode - The two letter ISO country code, such as "US". This value is required when a postalCode is provided.
     * @param distanceUnit - The distance unit. Supported values are "mi" (miles) and "km" (kilometers). The default is "km".
     * @param latitude - The geographical latitude to search for stores (value range -90.00 .. 90.00). This value is required when a longitude is provided.
     * @param longitude - The geographical longitude to search for stores (value range -180.00 .. 180.00). You must provide a longitude when a latitude is provided.
     * @param maxDistance - The area (radius) in distanceUnit where stores will be searched.
     * @param postalCode - The postal code, such as "84121". You must provide a countryCode when a postalCode is provided.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type StoreResult.
     *
     * @beta
     *
     */
    searchStores(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            countryCode?: string;
            distanceUnit?: string;
            latitude?: number;
            longitude?: number;
            maxDistance?: number;
            postalCode?: string;
            siteId: string;
            locale?: string;
            offset?: any;
            limit?: number;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<StoreResult>;
    /**
     * This resource retrieves a list of stores for the given site that are within a configured distance of a geolocation:
     - The distance is interpreted either in miles or kilometers, depending on the `distanceUnit` input parameter.
     - The location is specified by either directly providing a latitude and longitude coordinate pair, or by providing a country and a postal code. If a postal code is passed, the resource looks in the system's geolocation mappings in Business Manager to find the coordinates for this postal code. If no matching geolocation is found, the resource returns an empty list of stores. If coordinates are passed, the values for country and postal code are ignored.
     
     To verify site latitude and longitude information in Business Manager:
     - Navigate to **Merchant Tools -\> Online Marketing -\> Stores**.
     - Select the applicable site.
     - In the **Address** tab, verify that valid information is provided in the following fields: **Address**, **City**, **Postal Code**, **State**, and **Country**. For latitude and longitude values, you can manually enter values or provide all field values to auto-populate **Latitude** and **Longitude**. You must provide valid values for all of the previous fields for latitude and longitude to auto-populate **Latitude** and **Longitude** values.
     
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param countryCode - The two letter ISO country code, such as "US". This value is required when a postalCode is provided.
     * @param distanceUnit - The distance unit. Supported values are "mi" (miles) and "km" (kilometers). The default is "km".
     * @param latitude - The geographical latitude to search for stores (value range -90.00 .. 90.00). This value is required when a longitude is provided.
     * @param longitude - The geographical longitude to search for stores (value range -180.00 .. 180.00). You must provide a longitude when a latitude is provided.
     * @param maxDistance - The area (radius) in distanceUnit where stores will be searched.
     * @param postalCode - The postal code, such as "84121". You must provide a countryCode when a postalCode is provided.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type StoreResult otherwise.
     *
     * @beta
     *
     */
    searchStores<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            countryCode?: string;
            distanceUnit?: string;
            latitude?: number;
            longitude?: number;
            maxDistance?: number;
            postalCode?: string;
            siteId: string;
            locale?: string;
            offset?: any;
            limit?: number;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : StoreResult>;
    /**
     * Returns stores identified by the IDs provided as input.
     *
     * If you would like to get a raw Response object use the other getStores function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param ids - The IDs of a requested stores (comma separated, max 50 IDs).
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type StoreResult.
     *
     * @beta
     *
     */
    getStores(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            ids: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<StoreResult>;
    /**
     * Returns stores identified by the IDs provided as input.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param ids - The IDs of a requested stores (comma separated, max 50 IDs).
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type StoreResult otherwise.
     *
     * @beta
     *
     */
    getStores<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            ids: string;
            locale?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : StoreResult>;
}
declare namespace ShopperStoresTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query$10;
        sorts?: Array<Sort$10>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition$9;
        id?: string;
        name: L10nString$9;
        description: L10nString$9;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString$9;
        possibleValues?: Array<PropertyValueDefinition$9>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query$10;
        sorts?: Array<Sort$10>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter$10>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query$10;
        sorts?: Array<Sort$10>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter$10;
        query: Query$10;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query$10;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$10;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$10;
        termQuery?: TermQuery$10;
        textQuery?: TextQuery$10;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter$10;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        field: string;
        from?: any;
        fromInclusive?: boolean;
        to?: any;
        toInclusive?: boolean;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition$9;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition$9>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type StoreResult = {
        limit: number;
        data: Array<Store>;
        offset?: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type Store = {
        address1?: string;
        address2?: string;
        city?: string;
        countryCode?: string;
        distance?: number;
        distanceUnit?: string;
        email?: string;
        fax?: string;
        id: string;
        image?: string;
        inventoryId?: string;
        latitude?: number;
        longitude?: number;
        name?: string;
        phone?: string;
        posEnabled?: boolean;
        postalCode?: string;
        stateCode?: string;
        storeEvents?: string;
        storeHours?: string;
        storeLocatorEnabled?: boolean;
    } & {
        [key: string]: any;
    };
    /**
     * All path parameters that are used by at least one ShopperStores method.
     */
    type ShopperStoresPathParameters = {
        organizationId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperStores method.
     */
    type ShopperStoresQueryParameters = {
        countryCode?: string;
        distanceUnit?: string;
        latitude?: number;
        longitude?: number;
        maxDistance?: number;
        postalCode?: string;
        siteId?: string;
        locale?: string;
        offset?: any;
        limit?: number;
        ids?: string;
    };
    /**
     * All parameters that are used by ShopperStores.
     */
    type ShopperStoresParameters = ShopperStoresPathParameters & BaseUriParameters & ShopperStoresQueryParameters;
    /**
     * [Shopper Stores](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-stores:Summary)
     * ==================================
     *
     * *Search for a specific store or stores in an area.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperStores } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperStoresClient = new ShopperStores(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.0.15<br />
     * Last Updated: <br />
     * </span>
     *
     * @beta
     *
     *
     */
    class ShopperStores<ConfigParameters extends ShopperStoresParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/store/shopper-stores/{version}";
        static readonly apiPaths: {
            searchStores: string;
            getStores: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly searchStores: readonly [
                "organizationId",
                "countryCode",
                "distanceUnit",
                "latitude",
                "longitude",
                "maxDistance",
                "postalCode",
                "siteId",
                "locale",
                "offset",
                "limit"
            ];
            readonly searchStoresRequired: readonly [
                "organizationId",
                "siteId"
            ];
            readonly getStores: readonly [
                "organizationId",
                "siteId",
                "ids",
                "locale"
            ];
            readonly getStoresRequired: readonly [
                "organizationId",
                "siteId",
                "ids"
            ];
        };
        /**
         * This resource retrieves a list of stores for the given site that are within a configured distance of a geolocation:
         - The distance is interpreted either in miles or kilometers, depending on the `distanceUnit` input parameter.
         - The location is specified by either directly providing a latitude and longitude coordinate pair, or by providing a country and a postal code. If a postal code is passed, the resource looks in the system's geolocation mappings in Business Manager to find the coordinates for this postal code. If no matching geolocation is found, the resource returns an empty list of stores. If coordinates are passed, the values for country and postal code are ignored.
         
         To verify site latitude and longitude information in Business Manager:
         - Navigate to **Merchant Tools -\> Online Marketing -\> Stores**.
         - Select the applicable site.
         - In the **Address** tab, verify that valid information is provided in the following fields: **Address**, **City**, **Postal Code**, **State**, and **Country**. For latitude and longitude values, you can manually enter values or provide all field values to auto-populate **Latitude** and **Longitude**. You must provide valid values for all of the previous fields for latitude and longitude to auto-populate **Latitude** and **Longitude** values.
         
         *
         * If you would like to get a raw Response object use the other searchStores function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param countryCode - The two letter ISO country code, such as "US". This value is required when a postalCode is provided.
         * @param distanceUnit - The distance unit. Supported values are "mi" (miles) and "km" (kilometers). The default is "km".
         * @param latitude - The geographical latitude to search for stores (value range -90.00 .. 90.00). This value is required when a longitude is provided.
         * @param longitude - The geographical longitude to search for stores (value range -180.00 .. 180.00). You must provide a longitude when a latitude is provided.
         * @param maxDistance - The area (radius) in distanceUnit where stores will be searched.
         * @param postalCode - The postal code, such as "84121". You must provide a countryCode when a postalCode is provided.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type StoreResult.
         *
         * @beta
         *
         */
        searchStores(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                countryCode?: string;
                distanceUnit?: string;
                latitude?: number;
                longitude?: number;
                maxDistance?: number;
                postalCode?: string;
                siteId: string;
                locale?: string;
                offset?: any;
                limit?: number;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<StoreResult>;
        /**
         * This resource retrieves a list of stores for the given site that are within a configured distance of a geolocation:
         - The distance is interpreted either in miles or kilometers, depending on the `distanceUnit` input parameter.
         - The location is specified by either directly providing a latitude and longitude coordinate pair, or by providing a country and a postal code. If a postal code is passed, the resource looks in the system's geolocation mappings in Business Manager to find the coordinates for this postal code. If no matching geolocation is found, the resource returns an empty list of stores. If coordinates are passed, the values for country and postal code are ignored.
         
         To verify site latitude and longitude information in Business Manager:
         - Navigate to **Merchant Tools -\> Online Marketing -\> Stores**.
         - Select the applicable site.
         - In the **Address** tab, verify that valid information is provided in the following fields: **Address**, **City**, **Postal Code**, **State**, and **Country**. For latitude and longitude values, you can manually enter values or provide all field values to auto-populate **Latitude** and **Longitude**. You must provide valid values for all of the previous fields for latitude and longitude to auto-populate **Latitude** and **Longitude** values.
         
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param countryCode - The two letter ISO country code, such as "US". This value is required when a postalCode is provided.
         * @param distanceUnit - The distance unit. Supported values are "mi" (miles) and "km" (kilometers). The default is "km".
         * @param latitude - The geographical latitude to search for stores (value range -90.00 .. 90.00). This value is required when a longitude is provided.
         * @param longitude - The geographical longitude to search for stores (value range -180.00 .. 180.00). You must provide a longitude when a latitude is provided.
         * @param maxDistance - The area (radius) in distanceUnit where stores will be searched.
         * @param postalCode - The postal code, such as "84121". You must provide a countryCode when a postalCode is provided.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type StoreResult otherwise.
         *
         * @beta
         *
         */
        searchStores<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                countryCode?: string;
                distanceUnit?: string;
                latitude?: number;
                longitude?: number;
                maxDistance?: number;
                postalCode?: string;
                siteId: string;
                locale?: string;
                offset?: any;
                limit?: number;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : StoreResult>;
        /**
         * Returns stores identified by the IDs provided as input.
         *
         * If you would like to get a raw Response object use the other getStores function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param ids - The IDs of a requested stores (comma separated, max 50 IDs).
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type StoreResult.
         *
         * @beta
         *
         */
        getStores(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
                ids: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<StoreResult>;
        /**
         * Returns stores identified by the IDs provided as input.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param ids - The IDs of a requested stores (comma separated, max 50 IDs).
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type StoreResult otherwise.
         *
         * @beta
         *
         */
        getStores<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                siteId: string;
                ids: string;
                locale?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : StoreResult>;
    }
}
type LoginRequest = {
    client_id?: string;
    response_type?: string;
    redirect_uri: string;
    state?: string;
    scope?: string;
    usid?: string;
    channel_id: string;
    code_challenge?: string;
} & {
    [key: string]: any;
};
type TrustedAgentTokenRequest = {
    agent_id?: string;
    client_id: string;
    channel_id: string;
    code_verifier: string;
    grant_type: string;
    login_id: string;
    idp_origin: string;
    usid?: string;
    dnt?: string;
    state?: string;
} & {
    [key: string]: any;
};
type PasswordlessLoginRequest = {
    user_id: string;
    mode: string;
    locale?: string;
    usid?: string;
    channel_id: string;
    callback_uri?: string;
} & {
    [key: string]: any;
};
type PasswordLessLoginTokenRequest = {
    grant_type: string;
    hint: string;
    pwdless_login_token: string;
    client_id?: string;
    code_verifier?: string;
} & {
    [key: string]: any;
};
type PasswordActionVerifyRequest = {
    client_id: string;
    pwd_action_token: string;
    code_verifier: string;
    new_password?: string;
    channel_id: string;
    hint?: string;
} & {
    [key: string]: any;
};
type TrustedSystemTokenRequest = {
    usid?: string;
    grant_type: string;
    hint: string;
    login_id: string;
    idp_origin: string;
    client_id: string;
    channel_id: string;
    email_id?: string;
    dnt?: string;
} & {
    [key: string]: any;
};
type PasswordActionRequest = {
    user_id: string;
    mode: string;
    channel_id: string;
    locale?: string;
    client_id?: string;
    code_challenge?: string;
    callback_uri?: string;
    idp_name?: string;
    hint?: string;
} & {
    [key: string]: any;
};
type TokenResponse = {
    access_token: string;
    id_token: string;
    refresh_token: string;
    expires_in: number;
    refresh_token_expires_in: any;
    token_type: string;
    usid: string;
    customer_id: string;
    enc_user_id: string;
    idp_access_token: string;
} & {
    [key: string]: any;
};
type TokenRequest = {
    refresh_token?: string;
    code?: string;
    usid?: string;
    grant_type: string;
    redirect_uri?: string;
    code_verifier?: string;
    client_id?: string;
    channel_id?: string;
    dnt?: string;
} & {
    [key: string]: any;
};
type TokenActionRequest = {
    token: string;
    token_type_hint?: string;
} & {
    [key: string]: any;
};
type SessionBridgeTokenRequest = {
    code: string;
    client_id: string;
    channel_id: string;
    code_verifier: string;
    dwsid: string;
    grant_type: string;
    login_id: string;
    dwsgst?: string;
    dwsrst?: string;
    usid?: string;
    dnt?: string;
} & {
    [key: string]: any;
};
type RangeFilter$11 = {
    [key: string]: any;
};
type BoolFilter$11 = {
    filters?: Array<Filter$10>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery$11 = {} & {
    [key: string]: any;
};
type FilteredQuery$11 = {
    filter: Filter$10;
    query: Query$10;
} & {
    [key: string]: any;
};
type QueryFilter$11 = {
    query: Query$10;
} & {
    [key: string]: any;
};
type Query$11 = {
    boolQuery?: BoolQuery$10;
    filteredQuery?: FilteredQuery$11;
    matchAllQuery?: MatchAllQuery$11;
    nestedQuery?: NestedQuery$10;
    termQuery?: TermQuery$10;
    textQuery?: TextQuery$10;
} & {
    [key: string]: any;
};
type TermQuery$11 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter$11 = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$11 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter$11 = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery$11 = {
    must?: Array<Query$11>;
    mustNot?: Array<Query$11>;
    should?: Array<Query$11>;
} & {
    [key: string]: any;
};
type NestedQuery$11 = {
    path: string;
    query: Query$11;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Filter$11 = {
    boolFilter?: BoolFilter$11;
    queryFilter?: QueryFilter$11;
    range2Filter?: Range2Filter$11;
    rangeFilter?: RangeFilter$11;
    termFilter?: TermFilter$11;
} & {
    [key: string]: any;
};
type Sort$11 = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type L10nString$10 = {} & {
    [key: string]: any;
};
type PropertyValueDefinition$10 = {
    description: L10nString$10;
    displayValue: L10nString$10;
    id: string;
    position?: number;
    value: string;
};
/**
 * All path parameters that are used by at least one ShopperLogin method.
 */
type ShopperLoginPathParameters = {
    organizationId?: string;
};
/**
 * All query parameters that are used by at least one ShopperLogin method.
 */
type ShopperLoginQueryParameters = {
    client_id?: string;
    refresh_token?: string;
    channel_id?: string;
    hint?: string;
    redirect_uri?: string;
    response_type?: string;
    scope?: string;
    state?: string;
    usid?: string;
    code_challenge?: string;
    ui_locales?: string;
    login_id?: string;
    idp_origin?: string;
};
/**
 * All parameters that are used by ShopperLogin.
 */
type ShopperLoginParameters = ShopperLoginPathParameters & BaseUriParameters & ShopperLoginQueryParameters;
/**
 * [](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=:Summary)
 * ==================================
 *
 * **<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperLogin } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperLoginClient = new ShopperLogin(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: <br />
 * Last Updated: <br />
 * </span>
 *
 *
 */
declare class ShopperLogin<ConfigParameters extends ShopperLoginParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/shopper/auth/{version}";
    static readonly apiPaths: {
        authenticateCustomer: string;
        authorizePasswordlessCustomer: string;
        logoutCustomer: string;
        authorizeCustomer: string;
        getAccessToken: string;
        getSessionBridgeAccessToken: string;
        getTrustedSystemAccessToken: string;
        getTrustedAgentAuthorizationToken: string;
        getTrustedAgentAccessToken: string;
        getPasswordResetToken: string;
        resetPassword: string;
        getPasswordLessAccessToken: string;
        revokeToken: string;
        introspectToken: string;
        getUserInfo: string;
        getWellknownOpenidConfiguration: string;
        getJwksUri: string;
    };
    constructor(config: ClientConfigInit<ConfigParameters>);
    static readonly paramKeys: {
        readonly authenticateCustomer: readonly [
            "organizationId"
        ];
        readonly authenticateCustomerRequired: readonly [
            "organizationId"
        ];
        readonly authorizePasswordlessCustomer: readonly [
            "organizationId"
        ];
        readonly authorizePasswordlessCustomerRequired: readonly [
            "organizationId"
        ];
        readonly logoutCustomer: readonly [
            "organizationId",
            "client_id",
            "refresh_token",
            "channel_id",
            "hint"
        ];
        readonly logoutCustomerRequired: readonly [
            "organizationId",
            "client_id",
            "refresh_token"
        ];
        readonly authorizeCustomer: readonly [
            "organizationId",
            "redirect_uri",
            "response_type",
            "client_id",
            "scope",
            "state",
            "usid",
            "hint",
            "channel_id",
            "code_challenge",
            "ui_locales"
        ];
        readonly authorizeCustomerRequired: readonly [
            "organizationId",
            "redirect_uri",
            "response_type",
            "client_id"
        ];
        readonly getAccessToken: readonly [
            "organizationId"
        ];
        readonly getAccessTokenRequired: readonly [
            "organizationId"
        ];
        readonly getSessionBridgeAccessToken: readonly [
            "organizationId"
        ];
        readonly getSessionBridgeAccessTokenRequired: readonly [
            "organizationId"
        ];
        readonly getTrustedSystemAccessToken: readonly [
            "organizationId"
        ];
        readonly getTrustedSystemAccessTokenRequired: readonly [
            "organizationId"
        ];
        readonly getTrustedAgentAuthorizationToken: readonly [
            "organizationId",
            "client_id",
            "channel_id",
            "code_challenge",
            "login_id",
            "idp_origin",
            "redirect_uri",
            "response_type"
        ];
        readonly getTrustedAgentAuthorizationTokenRequired: readonly [
            "organizationId",
            "client_id",
            "channel_id",
            "code_challenge",
            "login_id",
            "idp_origin",
            "redirect_uri",
            "response_type"
        ];
        readonly getTrustedAgentAccessToken: readonly [
            "organizationId"
        ];
        readonly getTrustedAgentAccessTokenRequired: readonly [
            "organizationId"
        ];
        readonly getPasswordResetToken: readonly [
            "organizationId"
        ];
        readonly getPasswordResetTokenRequired: readonly [
            "organizationId"
        ];
        readonly resetPassword: readonly [
            "organizationId"
        ];
        readonly resetPasswordRequired: readonly [
            "organizationId"
        ];
        readonly getPasswordLessAccessToken: readonly [
            "organizationId"
        ];
        readonly getPasswordLessAccessTokenRequired: readonly [
            "organizationId"
        ];
        readonly revokeToken: readonly [
            "organizationId"
        ];
        readonly revokeTokenRequired: readonly [
            "organizationId"
        ];
        readonly introspectToken: readonly [
            "organizationId"
        ];
        readonly introspectTokenRequired: readonly [
            "organizationId"
        ];
        readonly getUserInfo: readonly [
            "organizationId",
            "channel_id"
        ];
        readonly getUserInfoRequired: readonly [
            "organizationId"
        ];
        readonly getWellknownOpenidConfiguration: readonly [
            "organizationId"
        ];
        readonly getWellknownOpenidConfigurationRequired: readonly [
            "organizationId"
        ];
        readonly getJwksUri: readonly [
            "organizationId"
        ];
        readonly getJwksUriRequired: readonly [
            "organizationId"
        ];
    };
    /**
     * Logs in a shopper with credentials that are managed by a B2C Commerce instance (B2C Commerce). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
     
     For PKCE values:
     - The `code_verifier` string is a random string used for the `/token` endpoint request.
     - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
     
     The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
     
     Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
     
     Optional parameters: `usid`.
     
     The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
     
     Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
     
     *
     * If you would like to get a raw Response object use the other authenticateCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    authenticateCustomer(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: LoginRequest;
    }>): Promise<void>;
    /**
     * Logs in a shopper with credentials that are managed by a B2C Commerce instance (B2C Commerce). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
     
     For PKCE values:
     - The `code_verifier` string is a random string used for the `/token` endpoint request.
     - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
     
     The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
     
     Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
     
     Optional parameters: `usid`.
     
     The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
     
     Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
     
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    authenticateCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: LoginRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Allows the customer to authenticate when their identity provider is down.
     *
     * If you would like to get a raw Response object use the other authorizePasswordlessCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Object.
     *
     */
    authorizePasswordlessCustomer(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordlessLoginRequest;
    }>): Promise<Object>;
    /**
     * Allows the customer to authenticate when their identity provider is down.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
    authorizePasswordlessCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordlessLoginRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
     * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (B2C Commerce) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
     
     Required header: Authorization header bearer token of the Shopper access token to logout.
     
     Required parameters: `refresh token`, `channel_id`, and `client`.
     *
     * If you would like to get a raw Response object use the other logoutCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param client_id - The SLAS client ID.
     * @param refresh_token - Refresh token that was given during the access token request.
     * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with B2C Commerce.
     * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    logoutCustomer(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            client_id: string;
            refresh_token: string;
            channel_id?: string;
            hint?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<TokenResponse>;
    /**
     * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (B2C Commerce) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
     
     Required header: Authorization header bearer token of the Shopper access token to logout.
     
     Required parameters: `refresh token`, `channel_id`, and `client`.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param client_id - The SLAS client ID.
     * @param refresh_token - Refresh token that was given during the access token request.
     * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with B2C Commerce.
     * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    logoutCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            client_id: string;
            refresh_token: string;
            channel_id?: string;
            hint?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
     
     This endpoint can be called from the front channel (the browser).
     *
     * If you would like to get a raw Response object use the other authorizeCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
     - `http://localhost:3000/callback`
     - `https://example.com/callback`
     - `com.example.app:redirect_uri_path`
     - ` *.subdomain.topleveldomain.com`
     
     * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
     * @param client_id - The client ID obtained during application registration.
     * @param scope -
     * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
     * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
     * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
     
     To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
     
     For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest. For session bridge authorization the SLAS Client `sfcc.session_bridge` scope.
     * @param channel_id - The channel that this request is for. For a B2C Commerce request, this is angalous to the site ID.
     * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
     
     The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
     
     The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
     * @param ui_locales - End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For example, the value `fr-CA fr en` represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation).
     
     In most cases the IDP supports one language tag and has a default language set on the server. SLAS will support the space-separated list and pass them to the IDP.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    authorizeCustomer(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            redirect_uri: string;
            response_type: string;
            client_id: string;
            scope?: string;
            state?: string;
            usid?: string;
            hint?: string;
            channel_id?: string;
            code_challenge?: string;
            ui_locales?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
     
     This endpoint can be called from the front channel (the browser).
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
     - `http://localhost:3000/callback`
     - `https://example.com/callback`
     - `com.example.app:redirect_uri_path`
     - ` *.subdomain.topleveldomain.com`
     
     * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
     * @param client_id - The client ID obtained during application registration.
     * @param scope -
     * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
     * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
     * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
     
     To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
     
     For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest. For session bridge authorization the SLAS Client `sfcc.session_bridge` scope.
     * @param channel_id - The channel that this request is for. For a B2C Commerce request, this is angalous to the site ID.
     * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
     
     The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
     
     The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
     * @param ui_locales - End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For example, the value `fr-CA fr en` represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation).
     
     In most cases the IDP supports one language tag and has a default language set on the server. SLAS will support the space-separated list and pass them to the IDP.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    authorizeCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            redirect_uri: string;
            response_type: string;
            client_id: string;
            scope?: string;
            state?: string;
            usid?: string;
            hint?: string;
            channel_id?: string;
            code_challenge?: string;
            ui_locales?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
     
     For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
     
     For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
     
     For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
     
     When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
     
     See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
     
     **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
     
     **NOTE - As of July 31, 2024**, SLAS will be requiring the `channel_id` query parameter in token requests.
     *
     * If you would like to get a raw Response object use the other getAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    getAccessToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenRequest;
    }>): Promise<TokenResponse>;
    /**
     * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
     
     For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
     
     For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
     
     For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
     
     When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
     
     See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
     
     **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
     
     **NOTE - As of July 31, 2024**, SLAS will be requiring the `channel_id` query parameter in token requests.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    getAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Get a shopper JWT access token for a registered customer using session bridge.
     
     For public client id requests the grant_type must be set to `session_bridge`.
     
     For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
     
     **DEPRECATED** - As of January 31, 2024, SLAS will no longer support the SESB `dwsid` parameter for `guest` users for `session-bridge/token` calls. It is recommended to transition over to using a SESB `dwsgst` token.
     
     The `dwsid` will still be needed for `registered` user `session-bridge/token` calls.
     
     **NOTE:** The registered customer Json Web Token (JWT) will be available in ECOM versions 25.4 and higher.
     *
     * If you would like to get a raw Response object use the other getSessionBridgeAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    getSessionBridgeAccessToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: SessionBridgeTokenRequest;
    }>): Promise<TokenResponse>;
    /**
     * Get a shopper JWT access token for a registered customer using session bridge.
     
     For public client id requests the grant_type must be set to `session_bridge`.
     
     For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
     
     **DEPRECATED** - As of January 31, 2024, SLAS will no longer support the SESB `dwsid` parameter for `guest` users for `session-bridge/token` calls. It is recommended to transition over to using a SESB `dwsgst` token.
     
     The `dwsid` will still be needed for `registered` user `session-bridge/token` calls.
     
     **NOTE:** The registered customer Json Web Token (JWT) will be available in ECOM versions 25.4 and higher.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    getSessionBridgeAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: SessionBridgeTokenRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party. The SLAS client must have the `sfcc.ts_ext_on_behalf_of` scope to access this endpoint.
     
     
     For trusted-system requests, a basic authorization header that includes a SLAS private client ID and SLAS private client secret can be used in place of the bearer token.
     
     
     For trusted-system requests SLAS public client_ids can not be used.
     *
     * If you would like to get a raw Response object use the other getTrustedSystemAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    getTrustedSystemAccessToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TrustedSystemTokenRequest;
    }>): Promise<TokenResponse>;
    /**
     * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party. The SLAS client must have the `sfcc.ts_ext_on_behalf_of` scope to access this endpoint.
     
     
     For trusted-system requests, a basic authorization header that includes a SLAS private client ID and SLAS private client secret can be used in place of the bearer token.
     
     
     For trusted-system requests SLAS public client_ids can not be used.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    getTrustedSystemAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TrustedSystemTokenRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Obtains a new agent on behalf authorization token for a registered customer.
     *
     * If you would like to get a raw Response object use the other getTrustedAgentAuthorizationToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param client_id - The SLAS public client ID or SLAS private client ID for use with trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
     * @param channel_id - The channel (B2C Commerce site) that the user is associated with.
     * @param code_challenge - PKCE code challenge. Created by the caller.
     
     The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
     
     The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
     
     The `code_challenge` is not needed if a using SLAS private `client_id`.
     * @param login_id - The ID of the shopper for trusted agent access.
     
     For TAOB Guest the `login_id` must be set to `Guest`.
     * @param idp_origin - The IDP that the shopper is associated with.
     
     For TAOB Guest the `idp_origin` must be set to `slas`. This is standard for SLAS Guest requests. If any other `idp_origin` value is used, SLAS returns a bad request.
     * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
     - `http://localhost:3000/callback`
     - `https://example.com/callback`
     - `com.example.app:redirect_uri_path`
     - ` *.subdomain.topleveldomain.com`
     
     * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    getTrustedAgentAuthorizationToken(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            client_id: string;
            channel_id: string;
            code_challenge: string;
            login_id: string;
            idp_origin: string;
            redirect_uri: string;
            response_type: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Obtains a new agent on behalf authorization token for a registered customer.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param client_id - The SLAS public client ID or SLAS private client ID for use with trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
     * @param channel_id - The channel (B2C Commerce site) that the user is associated with.
     * @param code_challenge - PKCE code challenge. Created by the caller.
     
     The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
     
     The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
     
     The `code_challenge` is not needed if a using SLAS private `client_id`.
     * @param login_id - The ID of the shopper for trusted agent access.
     
     For TAOB Guest the `login_id` must be set to `Guest`.
     * @param idp_origin - The IDP that the shopper is associated with.
     
     For TAOB Guest the `idp_origin` must be set to `slas`. This is standard for SLAS Guest requests. If any other `idp_origin` value is used, SLAS returns a bad request.
     * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
     - `http://localhost:3000/callback`
     - `https://example.com/callback`
     - `com.example.app:redirect_uri_path`
     - ` *.subdomain.topleveldomain.com`
     
     * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    getTrustedAgentAuthorizationToken<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            client_id: string;
            channel_id: string;
            code_challenge: string;
            login_id: string;
            idp_origin: string;
            redirect_uri: string;
            response_type: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
     
     If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
     
     The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
     *
     * If you would like to get a raw Response object use the other getTrustedAgentAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    getTrustedAgentAccessToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TrustedAgentTokenRequest;
    }>): Promise<TokenResponse>;
    /**
     * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
     
     If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
     
     The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    getTrustedAgentAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TrustedAgentTokenRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Request a reset password token
     *
     * If you would like to get a raw Response object use the other getPasswordResetToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    getPasswordResetToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordActionRequest;
    }>): Promise<void>;
    /**
     * Request a reset password token
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    getPasswordResetToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordActionRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Creates a new password
     *
     * If you would like to get a raw Response object use the other resetPassword function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    resetPassword(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordActionVerifyRequest;
    }>): Promise<void>;
    /**
     * Creates a new password
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    resetPassword<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordActionVerifyRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Issue a shopper token (JWT).
     *
     * If you would like to get a raw Response object use the other getPasswordLessAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    getPasswordLessAccessToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordLessLoginTokenRequest;
    }>): Promise<TokenResponse>;
    /**
     * Issue a shopper token (JWT).
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    getPasswordLessAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordLessLoginTokenRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
     *
     * If you would like to get a raw Response object use the other revokeToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    revokeToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenActionRequest;
    }>): Promise<TokenResponse>;
    /**
     * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    revokeToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenActionRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
     *
     * If you would like to get a raw Response object use the other introspectToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Object.
     *
     */
    introspectToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenActionRequest;
    }>): Promise<Object>;
    /**
     * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
    introspectToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenActionRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
     * Returns a JSON listing of claims about the currently authenticated user.
     *
     * If you would like to get a raw Response object use the other getUserInfo function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param channel_id - Used when getting user information for a SFCC login. For an B2C Commerce customer, this is angalous to the site ID. Required when getting user information for an B2C Commerce customer.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Object.
     *
     */
    getUserInfo(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channel_id?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Object>;
    /**
     * Returns a JSON listing of claims about the currently authenticated user.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param channel_id - Used when getting user information for a SFCC login. For an B2C Commerce customer, this is angalous to the site ID. Required when getting user information for an B2C Commerce customer.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
    getUserInfo<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channel_id?: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
     * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
     
     For performance purposes, the `/.well-known/openid-configuration` endpoint is rate limited to 25 call per minute.
     
     *
     * If you would like to get a raw Response object use the other getWellknownOpenidConfiguration function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Object.
     *
     */
    getWellknownOpenidConfiguration(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Object>;
    /**
     * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
     
     For performance purposes, the `/.well-known/openid-configuration` endpoint is rate limited to 25 call per minute.
     
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
    getWellknownOpenidConfiguration<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
     * The `/jwks` endpoint provides a JSON Web Key Set (JWKS) that includes current, past, and future public keys. These keys allow clients to validate the Shopper JSON Web Token (JWT) issued by SLAS, ensuring that no tampering has occurred with the token. Every SLAS JWT that is passed into SLAS, SCAPI, or OCAPI is always validated and is rejected if the signature validation does not match.
     
     To optimize performance, the `/jwks` endpoint is limited to 25 calls per minute, so it is recommended to cache the JWKS keys and refresh them only when necessary, instead of making frequent requests. Typically, the JWKs endpoint can be used once per DAY.
     
     For additional information on using JWKS, see https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-validate-jwt-with-jwks.html
     
     *
     * If you would like to get a raw Response object use the other getJwksUri function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Object.
     *
     */
    getJwksUri(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Object>;
    /**
     * The `/jwks` endpoint provides a JSON Web Key Set (JWKS) that includes current, past, and future public keys. These keys allow clients to validate the Shopper JSON Web Token (JWT) issued by SLAS, ensuring that no tampering has occurred with the token. Every SLAS JWT that is passed into SLAS, SCAPI, or OCAPI is always validated and is rejected if the signature validation does not match.
     
     To optimize performance, the `/jwks` endpoint is limited to 25 calls per minute, so it is recommended to cache the JWKS keys and refresh them only when necessary, instead of making frequent requests. Typically, the JWKs endpoint can be used once per DAY.
     
     For additional information on using JWKS, see https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-validate-jwt-with-jwks.html
     
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
    getJwksUri<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        } & {
            [key in `c_${string}`]: any;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
}
declare namespace ShopperLoginTypes {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type LoginRequest = {
        client_id?: string;
        response_type?: string;
        redirect_uri: string;
        state?: string;
        scope?: string;
        usid?: string;
        channel_id: string;
        code_challenge?: string;
    } & {
        [key: string]: any;
    };
    type TrustedAgentTokenRequest = {
        agent_id?: string;
        client_id: string;
        channel_id: string;
        code_verifier: string;
        grant_type: string;
        login_id: string;
        idp_origin: string;
        usid?: string;
        dnt?: string;
        state?: string;
    } & {
        [key: string]: any;
    };
    type IntrospectResponse = {
        active: boolean;
        scope: string;
        client_id: string;
        sub: string;
        exp: number;
        username: string;
        token_type: string;
    } & {
        [key: string]: any;
    };
    type PasswordlessLoginRequest = {
        user_id: string;
        mode: string;
        locale?: string;
        usid?: string;
        channel_id: string;
        callback_uri?: string;
    } & {
        [key: string]: any;
    };
    type JwksSuccessResponse = {
        keys: Array<any>;
    } & {
        [key: string]: any;
    };
    type PasswordLessLoginTokenRequest = {
        grant_type: string;
        hint: string;
        pwdless_login_token: string;
        client_id?: string;
        code_verifier?: string;
    } & {
        [key: string]: any;
    };
    type Oauth2ErrorResponse = {
        error: string;
        error_uri?: string;
        error_description?: string;
    } & {
        [key: string]: any;
    };
    type PasswordActionVerifyRequest = {
        client_id: string;
        pwd_action_token: string;
        code_verifier: string;
        new_password?: string;
        channel_id: string;
        hint?: string;
    } & {
        [key: string]: any;
    };
    type TrustedSystemTokenRequest = {
        usid?: string;
        grant_type: string;
        hint: string;
        login_id: string;
        idp_origin: string;
        client_id: string;
        channel_id: string;
        email_id?: string;
        dnt?: string;
    } & {
        [key: string]: any;
    };
    type PasswordActionRequest = {
        user_id: string;
        mode: string;
        channel_id: string;
        locale?: string;
        client_id?: string;
        code_challenge?: string;
        callback_uri?: string;
        idp_name?: string;
        hint?: string;
    } & {
        [key: string]: any;
    };
    type TokenResponse = {
        access_token: string;
        id_token: string;
        refresh_token: string;
        expires_in: number;
        refresh_token_expires_in: any;
        token_type: string;
        usid: string;
        customer_id: string;
        enc_user_id: string;
        idp_access_token: string;
    } & {
        [key: string]: any;
    };
    type TokenRequest = {
        refresh_token?: string;
        code?: string;
        usid?: string;
        grant_type: string;
        redirect_uri?: string;
        code_verifier?: string;
        client_id?: string;
        channel_id?: string;
        dnt?: string;
    } & {
        [key: string]: any;
    };
    type TokenActionRequest = {
        token: string;
        token_type_hint?: string;
    } & {
        [key: string]: any;
    };
    type SessionBridgeTokenRequest = {
        code: string;
        client_id: string;
        channel_id: string;
        code_verifier: string;
        dwsid: string;
        grant_type: string;
        login_id: string;
        dwsgst?: string;
        dwsrst?: string;
        usid?: string;
        dnt?: string;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query$11;
        sorts?: Array<Sort$11>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition$10;
        id?: string;
        name: L10nString$10;
        description: L10nString$10;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString$10;
        possibleValues?: Array<PropertyValueDefinition$10>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query$11;
        sorts?: Array<Sort$11>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter$11>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query$11;
        sorts?: Array<Sort$11>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter$11;
        query: Query$11;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query$11;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery$11;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery$11;
        termQuery?: TermQuery$11;
        textQuery?: TextQuery$11;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition$10;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition$10>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    /**
     * All path parameters that are used by at least one ShopperLogin method.
     */
    type ShopperLoginPathParameters = {
        organizationId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperLogin method.
     */
    type ShopperLoginQueryParameters = {
        client_id?: string;
        refresh_token?: string;
        channel_id?: string;
        hint?: string;
        redirect_uri?: string;
        response_type?: string;
        scope?: string;
        state?: string;
        usid?: string;
        code_challenge?: string;
        ui_locales?: string;
        login_id?: string;
        idp_origin?: string;
    };
    /**
     * All parameters that are used by ShopperLogin.
     */
    type ShopperLoginParameters = ShopperLoginPathParameters & BaseUriParameters & ShopperLoginQueryParameters;
    /**
     * [](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=:Summary)
     * ==================================
     *
     * **<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperLogin } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperLoginClient = new ShopperLogin(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: <br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperLogin<ConfigParameters extends ShopperLoginParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/shopper/auth/{version}";
        static readonly apiPaths: {
            authenticateCustomer: string;
            authorizePasswordlessCustomer: string;
            logoutCustomer: string;
            authorizeCustomer: string;
            getAccessToken: string;
            getSessionBridgeAccessToken: string;
            getTrustedSystemAccessToken: string;
            getTrustedAgentAuthorizationToken: string;
            getTrustedAgentAccessToken: string;
            getPasswordResetToken: string;
            resetPassword: string;
            getPasswordLessAccessToken: string;
            revokeToken: string;
            introspectToken: string;
            getUserInfo: string;
            getWellknownOpenidConfiguration: string;
            getJwksUri: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly authenticateCustomer: readonly [
                "organizationId"
            ];
            readonly authenticateCustomerRequired: readonly [
                "organizationId"
            ];
            readonly authorizePasswordlessCustomer: readonly [
                "organizationId"
            ];
            readonly authorizePasswordlessCustomerRequired: readonly [
                "organizationId"
            ];
            readonly logoutCustomer: readonly [
                "organizationId",
                "client_id",
                "refresh_token",
                "channel_id",
                "hint"
            ];
            readonly logoutCustomerRequired: readonly [
                "organizationId",
                "client_id",
                "refresh_token"
            ];
            readonly authorizeCustomer: readonly [
                "organizationId",
                "redirect_uri",
                "response_type",
                "client_id",
                "scope",
                "state",
                "usid",
                "hint",
                "channel_id",
                "code_challenge",
                "ui_locales"
            ];
            readonly authorizeCustomerRequired: readonly [
                "organizationId",
                "redirect_uri",
                "response_type",
                "client_id"
            ];
            readonly getAccessToken: readonly [
                "organizationId"
            ];
            readonly getAccessTokenRequired: readonly [
                "organizationId"
            ];
            readonly getSessionBridgeAccessToken: readonly [
                "organizationId"
            ];
            readonly getSessionBridgeAccessTokenRequired: readonly [
                "organizationId"
            ];
            readonly getTrustedSystemAccessToken: readonly [
                "organizationId"
            ];
            readonly getTrustedSystemAccessTokenRequired: readonly [
                "organizationId"
            ];
            readonly getTrustedAgentAuthorizationToken: readonly [
                "organizationId",
                "client_id",
                "channel_id",
                "code_challenge",
                "login_id",
                "idp_origin",
                "redirect_uri",
                "response_type"
            ];
            readonly getTrustedAgentAuthorizationTokenRequired: readonly [
                "organizationId",
                "client_id",
                "channel_id",
                "code_challenge",
                "login_id",
                "idp_origin",
                "redirect_uri",
                "response_type"
            ];
            readonly getTrustedAgentAccessToken: readonly [
                "organizationId"
            ];
            readonly getTrustedAgentAccessTokenRequired: readonly [
                "organizationId"
            ];
            readonly getPasswordResetToken: readonly [
                "organizationId"
            ];
            readonly getPasswordResetTokenRequired: readonly [
                "organizationId"
            ];
            readonly resetPassword: readonly [
                "organizationId"
            ];
            readonly resetPasswordRequired: readonly [
                "organizationId"
            ];
            readonly getPasswordLessAccessToken: readonly [
                "organizationId"
            ];
            readonly getPasswordLessAccessTokenRequired: readonly [
                "organizationId"
            ];
            readonly revokeToken: readonly [
                "organizationId"
            ];
            readonly revokeTokenRequired: readonly [
                "organizationId"
            ];
            readonly introspectToken: readonly [
                "organizationId"
            ];
            readonly introspectTokenRequired: readonly [
                "organizationId"
            ];
            readonly getUserInfo: readonly [
                "organizationId",
                "channel_id"
            ];
            readonly getUserInfoRequired: readonly [
                "organizationId"
            ];
            readonly getWellknownOpenidConfiguration: readonly [
                "organizationId"
            ];
            readonly getWellknownOpenidConfigurationRequired: readonly [
                "organizationId"
            ];
            readonly getJwksUri: readonly [
                "organizationId"
            ];
            readonly getJwksUriRequired: readonly [
                "organizationId"
            ];
        };
        /**
         * Logs in a shopper with credentials that are managed by a B2C Commerce instance (B2C Commerce). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
         
         For PKCE values:
         - The `code_verifier` string is a random string used for the `/token` endpoint request.
         - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
         
         The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
         
         Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
         
         Optional parameters: `usid`.
         
         The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
         
         Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
         
         *
         * If you would like to get a raw Response object use the other authenticateCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        authenticateCustomer(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: LoginRequest;
        }>): Promise<void>;
        /**
         * Logs in a shopper with credentials that are managed by a B2C Commerce instance (B2C Commerce). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
         
         For PKCE values:
         - The `code_verifier` string is a random string used for the `/token` endpoint request.
         - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
         
         The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
         
         Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
         
         Optional parameters: `usid`.
         
         The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
         
         Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
         
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        authenticateCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: LoginRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Allows the customer to authenticate when their identity provider is down.
         *
         * If you would like to get a raw Response object use the other authorizePasswordlessCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Object.
         *
         */
        authorizePasswordlessCustomer(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordlessLoginRequest;
        }>): Promise<Object>;
        /**
         * Allows the customer to authenticate when their identity provider is down.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        authorizePasswordlessCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordlessLoginRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (B2C Commerce) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
         
         Required header: Authorization header bearer token of the Shopper access token to logout.
         
         Required parameters: `refresh token`, `channel_id`, and `client`.
         *
         * If you would like to get a raw Response object use the other logoutCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS client ID.
         * @param refresh_token - Refresh token that was given during the access token request.
         * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with B2C Commerce.
         * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        logoutCustomer(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                client_id: string;
                refresh_token: string;
                channel_id?: string;
                hint?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<TokenResponse>;
        /**
         * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (B2C Commerce) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
         
         Required header: Authorization header bearer token of the Shopper access token to logout.
         
         Required parameters: `refresh token`, `channel_id`, and `client`.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS client ID.
         * @param refresh_token - Refresh token that was given during the access token request.
         * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with B2C Commerce.
         * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        logoutCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                client_id: string;
                refresh_token: string;
                channel_id?: string;
                hint?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
         
         This endpoint can be called from the front channel (the browser).
         *
         * If you would like to get a raw Response object use the other authorizeCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
         * @param client_id - The client ID obtained during application registration.
         * @param scope -
         * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
         * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
         * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
         
         To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
         
         For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest. For session bridge authorization the SLAS Client `sfcc.session_bridge` scope.
         * @param channel_id - The channel that this request is for. For a B2C Commerce request, this is angalous to the site ID.
         * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         * @param ui_locales - End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For example, the value `fr-CA fr en` represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation).
         
         In most cases the IDP supports one language tag and has a default language set on the server. SLAS will support the space-separated list and pass them to the IDP.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        authorizeCustomer(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                redirect_uri: string;
                response_type: string;
                client_id: string;
                scope?: string;
                state?: string;
                usid?: string;
                hint?: string;
                channel_id?: string;
                code_challenge?: string;
                ui_locales?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<void>;
        /**
         * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
         
         This endpoint can be called from the front channel (the browser).
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
         * @param client_id - The client ID obtained during application registration.
         * @param scope -
         * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
         * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
         * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
         
         To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
         
         For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest. For session bridge authorization the SLAS Client `sfcc.session_bridge` scope.
         * @param channel_id - The channel that this request is for. For a B2C Commerce request, this is angalous to the site ID.
         * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         * @param ui_locales - End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For example, the value `fr-CA fr en` represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation).
         
         In most cases the IDP supports one language tag and has a default language set on the server. SLAS will support the space-separated list and pass them to the IDP.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        authorizeCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                redirect_uri: string;
                response_type: string;
                client_id: string;
                scope?: string;
                state?: string;
                usid?: string;
                hint?: string;
                channel_id?: string;
                code_challenge?: string;
                ui_locales?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
         
         For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
         
         For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
         
         For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
         
         When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
         
         See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
         
         **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
         
         **NOTE - As of July 31, 2024**, SLAS will be requiring the `channel_id` query parameter in token requests.
         *
         * If you would like to get a raw Response object use the other getAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
         
         For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
         
         For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
         
         For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
         
         When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
         
         See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
         
         **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
         
         **NOTE - As of July 31, 2024**, SLAS will be requiring the `channel_id` query parameter in token requests.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Get a shopper JWT access token for a registered customer using session bridge.
         
         For public client id requests the grant_type must be set to `session_bridge`.
         
         For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
         
         **DEPRECATED** - As of January 31, 2024, SLAS will no longer support the SESB `dwsid` parameter for `guest` users for `session-bridge/token` calls. It is recommended to transition over to using a SESB `dwsgst` token.
         
         The `dwsid` will still be needed for `registered` user `session-bridge/token` calls.
         
         **NOTE:** The registered customer Json Web Token (JWT) will be available in ECOM versions 25.4 and higher.
         *
         * If you would like to get a raw Response object use the other getSessionBridgeAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getSessionBridgeAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: SessionBridgeTokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Get a shopper JWT access token for a registered customer using session bridge.
         
         For public client id requests the grant_type must be set to `session_bridge`.
         
         For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
         
         **DEPRECATED** - As of January 31, 2024, SLAS will no longer support the SESB `dwsid` parameter for `guest` users for `session-bridge/token` calls. It is recommended to transition over to using a SESB `dwsgst` token.
         
         The `dwsid` will still be needed for `registered` user `session-bridge/token` calls.
         
         **NOTE:** The registered customer Json Web Token (JWT) will be available in ECOM versions 25.4 and higher.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getSessionBridgeAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: SessionBridgeTokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party. The SLAS client must have the `sfcc.ts_ext_on_behalf_of` scope to access this endpoint.
         
         
         For trusted-system requests, a basic authorization header that includes a SLAS private client ID and SLAS private client secret can be used in place of the bearer token.
         
         
         For trusted-system requests SLAS public client_ids can not be used.
         *
         * If you would like to get a raw Response object use the other getTrustedSystemAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getTrustedSystemAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TrustedSystemTokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party. The SLAS client must have the `sfcc.ts_ext_on_behalf_of` scope to access this endpoint.
         
         
         For trusted-system requests, a basic authorization header that includes a SLAS private client ID and SLAS private client secret can be used in place of the bearer token.
         
         
         For trusted-system requests SLAS public client_ids can not be used.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getTrustedSystemAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TrustedSystemTokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Obtains a new agent on behalf authorization token for a registered customer.
         *
         * If you would like to get a raw Response object use the other getTrustedAgentAuthorizationToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS public client ID or SLAS private client ID for use with trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
         * @param channel_id - The channel (B2C Commerce site) that the user is associated with.
         * @param code_challenge - PKCE code challenge. Created by the caller.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         
         The `code_challenge` is not needed if a using SLAS private `client_id`.
         * @param login_id - The ID of the shopper for trusted agent access.
         
         For TAOB Guest the `login_id` must be set to `Guest`.
         * @param idp_origin - The IDP that the shopper is associated with.
         
         For TAOB Guest the `idp_origin` must be set to `slas`. This is standard for SLAS Guest requests. If any other `idp_origin` value is used, SLAS returns a bad request.
         * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        getTrustedAgentAuthorizationToken(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                client_id: string;
                channel_id: string;
                code_challenge: string;
                login_id: string;
                idp_origin: string;
                redirect_uri: string;
                response_type: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<void>;
        /**
         * Obtains a new agent on behalf authorization token for a registered customer.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS public client ID or SLAS private client ID for use with trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
         * @param channel_id - The channel (B2C Commerce site) that the user is associated with.
         * @param code_challenge - PKCE code challenge. Created by the caller.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         
         The `code_challenge` is not needed if a using SLAS private `client_id`.
         * @param login_id - The ID of the shopper for trusted agent access.
         
         For TAOB Guest the `login_id` must be set to `Guest`.
         * @param idp_origin - The IDP that the shopper is associated with.
         
         For TAOB Guest the `idp_origin` must be set to `slas`. This is standard for SLAS Guest requests. If any other `idp_origin` value is used, SLAS returns a bad request.
         * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        getTrustedAgentAuthorizationToken<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                client_id: string;
                channel_id: string;
                code_challenge: string;
                login_id: string;
                idp_origin: string;
                redirect_uri: string;
                response_type: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
         
         If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
         
         The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
         *
         * If you would like to get a raw Response object use the other getTrustedAgentAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getTrustedAgentAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TrustedAgentTokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
         
         If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
         
         The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getTrustedAgentAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TrustedAgentTokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Request a reset password token
         *
         * If you would like to get a raw Response object use the other getPasswordResetToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        getPasswordResetToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordActionRequest;
        }>): Promise<void>;
        /**
         * Request a reset password token
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        getPasswordResetToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordActionRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Creates a new password
         *
         * If you would like to get a raw Response object use the other resetPassword function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        resetPassword(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordActionVerifyRequest;
        }>): Promise<void>;
        /**
         * Creates a new password
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        resetPassword<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordActionVerifyRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Issue a shopper token (JWT).
         *
         * If you would like to get a raw Response object use the other getPasswordLessAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getPasswordLessAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordLessLoginTokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Issue a shopper token (JWT).
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getPasswordLessAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordLessLoginTokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
         *
         * If you would like to get a raw Response object use the other revokeToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        revokeToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>): Promise<TokenResponse>;
        /**
         * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        revokeToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
         *
         * If you would like to get a raw Response object use the other introspectToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Object.
         *
         */
        introspectToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>): Promise<Object>;
        /**
         * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        introspectToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * Returns a JSON listing of claims about the currently authenticated user.
         *
         * If you would like to get a raw Response object use the other getUserInfo function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param channel_id - Used when getting user information for a SFCC login. For an B2C Commerce customer, this is angalous to the site ID. Required when getting user information for an B2C Commerce customer.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
        getUserInfo(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                channel_id?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Object>;
        /**
         * Returns a JSON listing of claims about the currently authenticated user.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param channel_id - Used when getting user information for a SFCC login. For an B2C Commerce customer, this is angalous to the site ID. Required when getting user information for an B2C Commerce customer.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        getUserInfo<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                channel_id?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
         
         For performance purposes, the `/.well-known/openid-configuration` endpoint is rate limited to 25 call per minute.
         
         *
         * If you would like to get a raw Response object use the other getWellknownOpenidConfiguration function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
        getWellknownOpenidConfiguration(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Object>;
        /**
         * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
         
         For performance purposes, the `/.well-known/openid-configuration` endpoint is rate limited to 25 call per minute.
         
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        getWellknownOpenidConfiguration<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * The `/jwks` endpoint provides a JSON Web Key Set (JWKS) that includes current, past, and future public keys. These keys allow clients to validate the Shopper JSON Web Token (JWT) issued by SLAS, ensuring that no tampering has occurred with the token. Every SLAS JWT that is passed into SLAS, SCAPI, or OCAPI is always validated and is rejected if the signature validation does not match.
         
         To optimize performance, the `/jwks` endpoint is limited to 25 calls per minute, so it is recommended to cache the JWKS keys and refresh them only when necessary, instead of making frequent requests. Typically, the JWKs endpoint can be used once per DAY.
         
         For additional information on using JWKS, see https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-validate-jwt-with-jwks.html
         
         *
         * If you would like to get a raw Response object use the other getJwksUri function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
        getJwksUri(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Object>;
        /**
         * The `/jwks` endpoint provides a JSON Web Key Set (JWKS) that includes current, past, and future public keys. These keys allow clients to validate the Shopper JSON Web Token (JWT) issued by SLAS, ensuring that no tampering has occurred with the token. Every SLAS JWT that is passed into SLAS, SCAPI, or OCAPI is always validated and is rejected if the signature validation does not match.
         
         To optimize performance, the `/jwks` endpoint is limited to 25 calls per minute, so it is recommended to cache the JWKS keys and refresh them only when necessary, instead of making frequent requests. Typically, the JWKs endpoint can be used once per DAY.
         
         For additional information on using JWKS, see https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-validate-jwt-with-jwks.html
         
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        getJwksUri<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
    }
}
declare class TemplateURL extends URL {
    /**
     * @param url -
     * @param base -
     */
    constructor(url: string, base: string, parameters?: {
        pathParams?: PathParameters;
        queryParams?: QueryParameters;
        origin?: string;
    });
    /**
     * Replace the origin (protocol/host) portion of the URL with a new origin.
     * The path portion is retained and concatenated with any path included in the
     * new origin. Thee primary use of this function is to use a proxy.
     *
     * @param newOriginString - The new origin to substitute (ex: https://example.com)
     */
    replaceOrigin(newOriginString: string): void;
    /**
     * Add append an object literal of query parameters to the URL object. SCAPI expects
     * Arrays to be comma separated where \{ a: ["1", "2"] \} becomes ?a=1,2.
     * The 'refine' query parameter is an exception, where SCAPI expects the the "repeat"
     * convention where \{ refine: ["1", "2"] \} becomes "?refine=1&refine=2"
     */
    addQueryParams(queryParams?: QueryParameters): void;
    /**
     * Replace bracketed URL template parameters with values from parameters object
     *
     * @param template - The URL template string to make substitutions in
     * @param parameters - The object literal that provides the values to substitute
     *
     * @returns String URL with substitutions made
     */
    static renderTemplateUri(template: string, parameters?: PathParameters): string;
}
declare namespace helpers {
    /*
    * Copyright (c) 2023, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    /**
     * Makes a type easier to read.
     */
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K];
    }>;
    /**
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>;
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : Prettify<T & Required<Pick<T, "parameters">>>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Custom query parameter type with any string prefixed with `c_` as the key and the allowed
     * types for query parameters for the value.
     */
    type CustomQueryParameters = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[];
    };
    /**
     * Custom body request type with any string prefixed with `c_` as the key and the allowed
     * types for the value.
     */
    type CustomRequestBody = {
        [key in `c_${string}`]: string | number | boolean | string[] | number[] | {
            [key: string]: unknown;
        };
    };
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>;
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    /*
    * Copyright (c) 2022, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    const isBrowser: boolean;
    const isNode: boolean;
    const globalObject: typeof globalThis;
    const hasFetchAvailable: boolean;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const fetch: FetchFunction;
    type LoginRequest = {
        client_id?: string;
        response_type?: string;
        redirect_uri: string;
        state?: string;
        scope?: string;
        usid?: string;
        channel_id: string;
        code_challenge?: string;
    } & {
        [key: string]: any;
    };
    type TrustedAgentTokenRequest = {
        agent_id?: string;
        client_id: string;
        channel_id: string;
        code_verifier: string;
        grant_type: string;
        login_id: string;
        idp_origin: string;
        usid?: string;
        dnt?: string;
        state?: string;
    } & {
        [key: string]: any;
    };
    type IntrospectResponse = {
        active: boolean;
        scope: string;
        client_id: string;
        sub: string;
        exp: number;
        username: string;
        token_type: string;
    } & {
        [key: string]: any;
    };
    type PasswordlessLoginRequest = {
        user_id: string;
        mode: string;
        locale?: string;
        usid?: string;
        channel_id: string;
        callback_uri?: string;
    } & {
        [key: string]: any;
    };
    type JwksSuccessResponse = {
        keys: Array<any>;
    } & {
        [key: string]: any;
    };
    type PasswordLessLoginTokenRequest = {
        grant_type: string;
        hint: string;
        pwdless_login_token: string;
        client_id?: string;
        code_verifier?: string;
    } & {
        [key: string]: any;
    };
    type Oauth2ErrorResponse = {
        error: string;
        error_uri?: string;
        error_description?: string;
    } & {
        [key: string]: any;
    };
    type PasswordActionVerifyRequest = {
        client_id: string;
        pwd_action_token: string;
        code_verifier: string;
        new_password?: string;
        channel_id: string;
        hint?: string;
    } & {
        [key: string]: any;
    };
    type TrustedSystemTokenRequest = {
        usid?: string;
        grant_type: string;
        hint: string;
        login_id: string;
        idp_origin: string;
        client_id: string;
        channel_id: string;
        email_id?: string;
        dnt?: string;
    } & {
        [key: string]: any;
    };
    type PasswordActionRequest = {
        user_id: string;
        mode: string;
        channel_id: string;
        locale?: string;
        client_id?: string;
        code_challenge?: string;
        callback_uri?: string;
        idp_name?: string;
        hint?: string;
    } & {
        [key: string]: any;
    };
    type TokenResponse = {
        access_token: string;
        id_token: string;
        refresh_token: string;
        expires_in: number;
        refresh_token_expires_in: any;
        token_type: string;
        usid: string;
        customer_id: string;
        enc_user_id: string;
        idp_access_token: string;
    } & {
        [key: string]: any;
    };
    type TokenRequest = {
        refresh_token?: string;
        code?: string;
        usid?: string;
        grant_type: string;
        redirect_uri?: string;
        code_verifier?: string;
        client_id?: string;
        channel_id?: string;
        dnt?: string;
    } & {
        [key: string]: any;
    };
    type TokenActionRequest = {
        token: string;
        token_type_hint?: string;
    } & {
        [key: string]: any;
    };
    type SessionBridgeTokenRequest = {
        code: string;
        client_id: string;
        channel_id: string;
        code_verifier: string;
        dwsid: string;
        grant_type: string;
        login_id: string;
        dwsgst?: string;
        dwsrst?: string;
        usid?: string;
        dnt?: string;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type ChangeControlled = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        [key: string]: any;
    };
    type ChangeControlledDataType = {
        creationDate?: any;
        modificationDate?: any;
        createdBy?: string;
        lastModifiedBy?: string;
    } & {
        [key: string]: any;
    };
    type Error = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<Filter>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: Query;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: Filter;
        query: Query;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: Query;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<Query>;
        mustNot?: Array<Query>;
        should?: Array<Query>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: Query;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: Query;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    /**
     * All path parameters that are used by at least one ShopperLogin method.
     */
    type ShopperLoginPathParameters = {
        organizationId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperLogin method.
     */
    type ShopperLoginQueryParameters = {
        client_id?: string;
        refresh_token?: string;
        channel_id?: string;
        hint?: string;
        redirect_uri?: string;
        response_type?: string;
        scope?: string;
        state?: string;
        usid?: string;
        code_challenge?: string;
        ui_locales?: string;
        login_id?: string;
        idp_origin?: string;
    };
    /**
     * All parameters that are used by ShopperLogin.
     */
    type ShopperLoginParameters = ShopperLoginPathParameters & BaseUriParameters & ShopperLoginQueryParameters;
    /**
     * [](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=:Summary)
     * ==================================
     *
     * **<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperLogin } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperLoginClient = new ShopperLogin(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: <br />
     * Last Updated: <br />
     * </span>
     *
     *
     */
    class ShopperLogin<ConfigParameters extends ShopperLoginParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/shopper/auth/{version}";
        static readonly apiPaths: {
            authenticateCustomer: string;
            authorizePasswordlessCustomer: string;
            logoutCustomer: string;
            authorizeCustomer: string;
            getAccessToken: string;
            getSessionBridgeAccessToken: string;
            getTrustedSystemAccessToken: string;
            getTrustedAgentAuthorizationToken: string;
            getTrustedAgentAccessToken: string;
            getPasswordResetToken: string;
            resetPassword: string;
            getPasswordLessAccessToken: string;
            revokeToken: string;
            introspectToken: string;
            getUserInfo: string;
            getWellknownOpenidConfiguration: string;
            getJwksUri: string;
        };
        constructor(config: ClientConfigInit<ConfigParameters>);
        static readonly paramKeys: {
            readonly authenticateCustomer: readonly [
                "organizationId"
            ];
            readonly authenticateCustomerRequired: readonly [
                "organizationId"
            ];
            readonly authorizePasswordlessCustomer: readonly [
                "organizationId"
            ];
            readonly authorizePasswordlessCustomerRequired: readonly [
                "organizationId"
            ];
            readonly logoutCustomer: readonly [
                "organizationId",
                "client_id",
                "refresh_token",
                "channel_id",
                "hint"
            ];
            readonly logoutCustomerRequired: readonly [
                "organizationId",
                "client_id",
                "refresh_token"
            ];
            readonly authorizeCustomer: readonly [
                "organizationId",
                "redirect_uri",
                "response_type",
                "client_id",
                "scope",
                "state",
                "usid",
                "hint",
                "channel_id",
                "code_challenge",
                "ui_locales"
            ];
            readonly authorizeCustomerRequired: readonly [
                "organizationId",
                "redirect_uri",
                "response_type",
                "client_id"
            ];
            readonly getAccessToken: readonly [
                "organizationId"
            ];
            readonly getAccessTokenRequired: readonly [
                "organizationId"
            ];
            readonly getSessionBridgeAccessToken: readonly [
                "organizationId"
            ];
            readonly getSessionBridgeAccessTokenRequired: readonly [
                "organizationId"
            ];
            readonly getTrustedSystemAccessToken: readonly [
                "organizationId"
            ];
            readonly getTrustedSystemAccessTokenRequired: readonly [
                "organizationId"
            ];
            readonly getTrustedAgentAuthorizationToken: readonly [
                "organizationId",
                "client_id",
                "channel_id",
                "code_challenge",
                "login_id",
                "idp_origin",
                "redirect_uri",
                "response_type"
            ];
            readonly getTrustedAgentAuthorizationTokenRequired: readonly [
                "organizationId",
                "client_id",
                "channel_id",
                "code_challenge",
                "login_id",
                "idp_origin",
                "redirect_uri",
                "response_type"
            ];
            readonly getTrustedAgentAccessToken: readonly [
                "organizationId"
            ];
            readonly getTrustedAgentAccessTokenRequired: readonly [
                "organizationId"
            ];
            readonly getPasswordResetToken: readonly [
                "organizationId"
            ];
            readonly getPasswordResetTokenRequired: readonly [
                "organizationId"
            ];
            readonly resetPassword: readonly [
                "organizationId"
            ];
            readonly resetPasswordRequired: readonly [
                "organizationId"
            ];
            readonly getPasswordLessAccessToken: readonly [
                "organizationId"
            ];
            readonly getPasswordLessAccessTokenRequired: readonly [
                "organizationId"
            ];
            readonly revokeToken: readonly [
                "organizationId"
            ];
            readonly revokeTokenRequired: readonly [
                "organizationId"
            ];
            readonly introspectToken: readonly [
                "organizationId"
            ];
            readonly introspectTokenRequired: readonly [
                "organizationId"
            ];
            readonly getUserInfo: readonly [
                "organizationId",
                "channel_id"
            ];
            readonly getUserInfoRequired: readonly [
                "organizationId"
            ];
            readonly getWellknownOpenidConfiguration: readonly [
                "organizationId"
            ];
            readonly getWellknownOpenidConfigurationRequired: readonly [
                "organizationId"
            ];
            readonly getJwksUri: readonly [
                "organizationId"
            ];
            readonly getJwksUriRequired: readonly [
                "organizationId"
            ];
        };
        /**
         * Logs in a shopper with credentials that are managed by a B2C Commerce instance (B2C Commerce). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
         
         For PKCE values:
         - The `code_verifier` string is a random string used for the `/token` endpoint request.
         - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
         
         The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
         
         Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
         
         Optional parameters: `usid`.
         
         The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
         
         Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
         
         *
         * If you would like to get a raw Response object use the other authenticateCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        authenticateCustomer(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: LoginRequest;
        }>): Promise<void>;
        /**
         * Logs in a shopper with credentials that are managed by a B2C Commerce instance (B2C Commerce). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
         
         For PKCE values:
         - The `code_verifier` string is a random string used for the `/token` endpoint request.
         - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
         
         The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
         
         Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
         
         Optional parameters: `usid`.
         
         The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
         
         Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
         
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        authenticateCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: LoginRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Allows the customer to authenticate when their identity provider is down.
         *
         * If you would like to get a raw Response object use the other authorizePasswordlessCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Object.
         *
         */
        authorizePasswordlessCustomer(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordlessLoginRequest;
        }>): Promise<Object>;
        /**
         * Allows the customer to authenticate when their identity provider is down.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        authorizePasswordlessCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordlessLoginRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (B2C Commerce) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
         
         Required header: Authorization header bearer token of the Shopper access token to logout.
         
         Required parameters: `refresh token`, `channel_id`, and `client`.
         *
         * If you would like to get a raw Response object use the other logoutCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS client ID.
         * @param refresh_token - Refresh token that was given during the access token request.
         * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with B2C Commerce.
         * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        logoutCustomer(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                client_id: string;
                refresh_token: string;
                channel_id?: string;
                hint?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<TokenResponse>;
        /**
         * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (B2C Commerce) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
         
         Required header: Authorization header bearer token of the Shopper access token to logout.
         
         Required parameters: `refresh token`, `channel_id`, and `client`.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS client ID.
         * @param refresh_token - Refresh token that was given during the access token request.
         * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with B2C Commerce.
         * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        logoutCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                client_id: string;
                refresh_token: string;
                channel_id?: string;
                hint?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
         
         This endpoint can be called from the front channel (the browser).
         *
         * If you would like to get a raw Response object use the other authorizeCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
         * @param client_id - The client ID obtained during application registration.
         * @param scope -
         * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
         * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
         * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
         
         To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
         
         For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest. For session bridge authorization the SLAS Client `sfcc.session_bridge` scope.
         * @param channel_id - The channel that this request is for. For a B2C Commerce request, this is angalous to the site ID.
         * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         * @param ui_locales - End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For example, the value `fr-CA fr en` represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation).
         
         In most cases the IDP supports one language tag and has a default language set on the server. SLAS will support the space-separated list and pass them to the IDP.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        authorizeCustomer(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                redirect_uri: string;
                response_type: string;
                client_id: string;
                scope?: string;
                state?: string;
                usid?: string;
                hint?: string;
                channel_id?: string;
                code_challenge?: string;
                ui_locales?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<void>;
        /**
         * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
         
         This endpoint can be called from the front channel (the browser).
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
         * @param client_id - The client ID obtained during application registration.
         * @param scope -
         * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
         * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
         * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
         
         To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
         
         For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest. For session bridge authorization the SLAS Client `sfcc.session_bridge` scope.
         * @param channel_id - The channel that this request is for. For a B2C Commerce request, this is angalous to the site ID.
         * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         * @param ui_locales - End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For example, the value `fr-CA fr en` represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation).
         
         In most cases the IDP supports one language tag and has a default language set on the server. SLAS will support the space-separated list and pass them to the IDP.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        authorizeCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                redirect_uri: string;
                response_type: string;
                client_id: string;
                scope?: string;
                state?: string;
                usid?: string;
                hint?: string;
                channel_id?: string;
                code_challenge?: string;
                ui_locales?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
         
         For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
         
         For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
         
         For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
         
         When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
         
         See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
         
         **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
         
         **NOTE - As of July 31, 2024**, SLAS will be requiring the `channel_id` query parameter in token requests.
         *
         * If you would like to get a raw Response object use the other getAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
         
         For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
         
         For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
         
         For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
         
         When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
         
         See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
         
         **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
         
         **NOTE - As of July 31, 2024**, SLAS will be requiring the `channel_id` query parameter in token requests.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Get a shopper JWT access token for a registered customer using session bridge.
         
         For public client id requests the grant_type must be set to `session_bridge`.
         
         For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
         
         **DEPRECATED** - As of January 31, 2024, SLAS will no longer support the SESB `dwsid` parameter for `guest` users for `session-bridge/token` calls. It is recommended to transition over to using a SESB `dwsgst` token.
         
         The `dwsid` will still be needed for `registered` user `session-bridge/token` calls.
         
         **NOTE:** The registered customer Json Web Token (JWT) will be available in ECOM versions 25.4 and higher.
         *
         * If you would like to get a raw Response object use the other getSessionBridgeAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getSessionBridgeAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: SessionBridgeTokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Get a shopper JWT access token for a registered customer using session bridge.
         
         For public client id requests the grant_type must be set to `session_bridge`.
         
         For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
         
         **DEPRECATED** - As of January 31, 2024, SLAS will no longer support the SESB `dwsid` parameter for `guest` users for `session-bridge/token` calls. It is recommended to transition over to using a SESB `dwsgst` token.
         
         The `dwsid` will still be needed for `registered` user `session-bridge/token` calls.
         
         **NOTE:** The registered customer Json Web Token (JWT) will be available in ECOM versions 25.4 and higher.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getSessionBridgeAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: SessionBridgeTokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party. The SLAS client must have the `sfcc.ts_ext_on_behalf_of` scope to access this endpoint.
         
         
         For trusted-system requests, a basic authorization header that includes a SLAS private client ID and SLAS private client secret can be used in place of the bearer token.
         
         
         For trusted-system requests SLAS public client_ids can not be used.
         *
         * If you would like to get a raw Response object use the other getTrustedSystemAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getTrustedSystemAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TrustedSystemTokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party. The SLAS client must have the `sfcc.ts_ext_on_behalf_of` scope to access this endpoint.
         
         
         For trusted-system requests, a basic authorization header that includes a SLAS private client ID and SLAS private client secret can be used in place of the bearer token.
         
         
         For trusted-system requests SLAS public client_ids can not be used.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getTrustedSystemAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TrustedSystemTokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Obtains a new agent on behalf authorization token for a registered customer.
         *
         * If you would like to get a raw Response object use the other getTrustedAgentAuthorizationToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS public client ID or SLAS private client ID for use with trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
         * @param channel_id - The channel (B2C Commerce site) that the user is associated with.
         * @param code_challenge - PKCE code challenge. Created by the caller.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         
         The `code_challenge` is not needed if a using SLAS private `client_id`.
         * @param login_id - The ID of the shopper for trusted agent access.
         
         For TAOB Guest the `login_id` must be set to `Guest`.
         * @param idp_origin - The IDP that the shopper is associated with.
         
         For TAOB Guest the `idp_origin` must be set to `slas`. This is standard for SLAS Guest requests. If any other `idp_origin` value is used, SLAS returns a bad request.
         * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        getTrustedAgentAuthorizationToken(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                client_id: string;
                channel_id: string;
                code_challenge: string;
                login_id: string;
                idp_origin: string;
                redirect_uri: string;
                response_type: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<void>;
        /**
         * Obtains a new agent on behalf authorization token for a registered customer.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS public client ID or SLAS private client ID for use with trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
         * @param channel_id - The channel (B2C Commerce site) that the user is associated with.
         * @param code_challenge - PKCE code challenge. Created by the caller.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         
         The `code_challenge` is not needed if a using SLAS private `client_id`.
         * @param login_id - The ID of the shopper for trusted agent access.
         
         For TAOB Guest the `login_id` must be set to `Guest`.
         * @param idp_origin - The IDP that the shopper is associated with.
         
         For TAOB Guest the `idp_origin` must be set to `slas`. This is standard for SLAS Guest requests. If any other `idp_origin` value is used, SLAS returns a bad request.
         * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        getTrustedAgentAuthorizationToken<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                client_id: string;
                channel_id: string;
                code_challenge: string;
                login_id: string;
                idp_origin: string;
                redirect_uri: string;
                response_type: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
         
         If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
         
         The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
         *
         * If you would like to get a raw Response object use the other getTrustedAgentAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getTrustedAgentAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TrustedAgentTokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
         
         If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
         
         The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getTrustedAgentAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TrustedAgentTokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Request a reset password token
         *
         * If you would like to get a raw Response object use the other getPasswordResetToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        getPasswordResetToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordActionRequest;
        }>): Promise<void>;
        /**
         * Request a reset password token
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        getPasswordResetToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordActionRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Creates a new password
         *
         * If you would like to get a raw Response object use the other resetPassword function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        resetPassword(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordActionVerifyRequest;
        }>): Promise<void>;
        /**
         * Creates a new password
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        resetPassword<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordActionVerifyRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Issue a shopper token (JWT).
         *
         * If you would like to get a raw Response object use the other getPasswordLessAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getPasswordLessAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordLessLoginTokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Issue a shopper token (JWT).
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getPasswordLessAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordLessLoginTokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
         *
         * If you would like to get a raw Response object use the other revokeToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        revokeToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>): Promise<TokenResponse>;
        /**
         * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        revokeToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
         *
         * If you would like to get a raw Response object use the other introspectToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Object.
         *
         */
        introspectToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>): Promise<Object>;
        /**
         * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        introspectToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * Returns a JSON listing of claims about the currently authenticated user.
         *
         * If you would like to get a raw Response object use the other getUserInfo function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param channel_id - Used when getting user information for a SFCC login. For an B2C Commerce customer, this is angalous to the site ID. Required when getting user information for an B2C Commerce customer.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
        getUserInfo(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                channel_id?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Object>;
        /**
         * Returns a JSON listing of claims about the currently authenticated user.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param channel_id - Used when getting user information for a SFCC login. For an B2C Commerce customer, this is angalous to the site ID. Required when getting user information for an B2C Commerce customer.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        getUserInfo<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                channel_id?: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
         
         For performance purposes, the `/.well-known/openid-configuration` endpoint is rate limited to 25 call per minute.
         
         *
         * If you would like to get a raw Response object use the other getWellknownOpenidConfiguration function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
        getWellknownOpenidConfiguration(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Object>;
        /**
         * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
         
         For performance purposes, the `/.well-known/openid-configuration` endpoint is rate limited to 25 call per minute.
         
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        getWellknownOpenidConfiguration<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * The `/jwks` endpoint provides a JSON Web Key Set (JWKS) that includes current, past, and future public keys. These keys allow clients to validate the Shopper JSON Web Token (JWT) issued by SLAS, ensuring that no tampering has occurred with the token. Every SLAS JWT that is passed into SLAS, SCAPI, or OCAPI is always validated and is rejected if the signature validation does not match.
         
         To optimize performance, the `/jwks` endpoint is limited to 25 calls per minute, so it is recommended to cache the JWKS keys and refresh them only when necessary, instead of making frequent requests. Typically, the JWKs endpoint can be used once per DAY.
         
         For additional information on using JWKS, see https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-validate-jwt-with-jwks.html
         
         *
         * If you would like to get a raw Response object use the other getJwksUri function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
        getJwksUri(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Object>;
        /**
         * The `/jwks` endpoint provides a JSON Web Key Set (JWKS) that includes current, past, and future public keys. These keys allow clients to validate the Shopper JSON Web Token (JWT) issued by SLAS, ensuring that no tampering has occurred with the token. Every SLAS JWT that is passed into SLAS, SCAPI, or OCAPI is always validated and is rejected if the signature validation does not match.
         
         To optimize performance, the `/jwks` endpoint is limited to 25 calls per minute, so it is recommended to cache the JWKS keys and refresh them only when necessary, instead of making frequent requests. Typically, the JWKs endpoint can be used once per DAY.
         
         For additional information on using JWKS, see https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-validate-jwt-with-jwks.html
         
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        getJwksUri<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            } & {
                [key in `c_${string}`]: any;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
    }
    const stringToBase64: typeof btoa;
    /**
     * Parse out the code and usid from a redirect url
     * @param urlString A url that contains `code` and `usid` query parameters, typically returned when calling a Shopper Login endpoint
     * @returns An object containing the code and usid.
     */
    const getCodeAndUsidFromUrl: (urlString: string) => {
        code: string;
        usid: string;
    };
    /**
     * Creates a random string to use as a code verifier. This code is created by the client and sent with both the authorization request (as a code challenge) and the token request.
     * @returns code verifier
     */
    const createCodeVerifier: () => string;
    /**
     * Encodes a code verifier to a code challenge to send to the authorization endpoint
     * @param codeVerifier random string to use as a code verifier
     * @returns code challenge
     */
    const generateCodeChallenge: (codeVerifier: string) => Promise<string>;
    /**
     * Wrapper for the authorization endpoint. For federated login (3rd party IDP non-guest), the caller should redirect the user to the url in the url field of the returned object. The url will be the login page for the 3rd party IDP and the user will be sent to the redirectURI on success. Guest sessions return the code and usid directly with no need to redirect.
     * @param slasClient a configured instance of the ShopperLogin SDK client
     * @param codeVerifier - random string created by client app to use as a secret in the request
     * @param parameters - Request parameters used by the `authorizeCustomer` endpoint. Custom parameters can be passed on by adding a property on the `parameters` object starting with `c_`
     * @param parameters.redirectURI - the location the client will be returned to after successful login with 3rd party IDP. Must be registered in SLAS.
     * @param parameters.hint? - optional string to hint at a particular IDP. Guest sessions are created by setting this to 'guest'
     * @param parameters.usid? - optional saved SLAS user id to link the new session to a previous session
     * @param privateClient? - flag to indicate if the client is private or not. Defaults to false.
     * @returns login url, user id and authorization code if available
     */
    function authorize(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
    }>, codeVerifier: string, parameters: {
        redirectURI: string;
        hint?: string;
        usid?: string;
    } & CustomQueryParameters, privateClient?: boolean): Promise<{
        code: string;
        url: string;
        usid: string;
    }>;
    /**
     * Function to return the URL of the authorization endpoint. The url will redirect to the login page for the 3rd party IDP and the user will be sent to the redirectURI on success. Guest sessions return the code and usid directly with no need to redirect.
     * @param slasClient a configured instance of the ShopperLogin SDK client
     * @param parameters - Request parameters used by the `authorizeCustomer` endpoint. Custom parameters can be passed on by adding a property on the `parameters` object starting with `c_`
     * @param parameters.redirectURI - the location the client will be returned to after successful login with 3rd party IDP. Must be registered in SLAS.
     * @param parameters.hint - string to hint at a particular IDP. Required for 3rd party IDP login.
     * @param parameters.usid? - optional saved SLAS user id to link the new session to a previous session
     * @param privateClient - boolean indicating whether the client is private or not. Defaults to false.
     * @returns authorization url and code verifier
     */
    function authorizeIDP(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
        version?: string;
    }>, parameters: {
        redirectURI: string;
        hint: string;
        usid?: string;
    } & CustomQueryParameters, privateClient?: boolean): Promise<{
        url: string;
        codeVerifier: string;
    }>;
    /**
     * Function to execute the ShopperLogin External IDP Login with proof key for code exchange flow as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary).
     * **Note**: this func can run on client side. Only use private slas when the slas client secret is secured.
     * @param slasClient a configured instance of the ShopperLogin SDK client.
     * @param credentials - the id and password and clientSecret (if applicable) to login with.
     * @param credentials.clientSecret? - secret associated with client ID
     * @param credentials.codeVerifier? - random string created by client app to use as a secret in the request
     * @param parameters - parameters to pass in the API calls.
     * @param parameters.redirectURI - Per OAuth standard, a valid app route. Must be listed in your SLAS configuration. On server, this will not be actually called. On browser, this will be called, but ignored.
     * @param parameters.usid? - Unique Shopper Identifier to enable personalization.
     * @param parameters.dnt? - Optional parameter to enable Do Not Track (DNT) for the user.
     * @returns TokenResponse
     */
    function loginIDPUser(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
    }>, credentials: {
        clientSecret?: string;
        codeVerifier?: string;
    }, parameters: {
        redirectURI: string;
        code: string;
        usid?: string;
        dnt?: boolean;
    }): Promise<TokenResponse>;
    /**
     * A single function to execute the ShopperLogin Private Client Guest Login as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-private-client.html).
     * **Note**: this func can run on client side. Only use this one when the slas client secret is secured.
     * @param slasClient - a configured instance of the ShopperLogin SDK client
     * @param credentials - client secret used for authentication
     * @param credentials.clientSecret - secret associated with client ID
     * @param parameters - parameters to pass in the API calls.
     * @param parameters.usid? - Unique Shopper Identifier to enable personalization.
     * @param parameters.dnt? - Optional parameter to enable Do Not Track (DNT) for the user.
     * @returns TokenResponse
     */
    function loginGuestUserPrivate(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
    }>, parameters: {
        usid?: string;
        dnt?: boolean;
    }, credentials: {
        clientSecret: string;
    }): Promise<TokenResponse>;
    /**
     * A single function to execute the ShopperLogin Public Client Guest Login with proof key for code exchange flow as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary).
     * @param slasClient a configured instance of the ShopperLogin SDK client.
     * @param parameters - parameters to pass in the API calls. Custom parameters can be passed on by adding a property on the `parameters` object starting with `c_`, and they will be passed on the `authorizeCustomer` call.
     * @param parameters.redirectURI - Per OAuth standard, a valid app route. Must be listed in your SLAS configuration. On server, this will not be actually called. On browser, this will be called, but ignored.
     * @param parameters.usid? - Unique Shopper Identifier to enable personalization.
     * @param parameters.dnt? - Optional parameter to enable Do Not Track (DNT) for the user.
     * @returns TokenResponse
     */
    function loginGuestUser(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
    }>, parameters: {
        redirectURI: string;
        usid?: string;
        dnt?: boolean;
    } & CustomQueryParameters): Promise<TokenResponse>;
    /**
     * A single function to execute the ShopperLogin Public Client Registered User B2C Login with proof key for code exchange flow as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary).
     * **Note**: this func can run on client side. Only use private slas when the slas client secret is secured.
     * @param slasClient a configured instance of the ShopperLogin SDK client.
     * @param credentials - the id and password and clientSecret (if applicable) to login with.
     * @param credentials.username - the id of the user to login with.
     * @param credentials.password - the password of the user to login with.
     * @param credentials.clientSecret? - secret associated with client ID
     * @param parameters - parameters to pass in the API calls.
     * @param parameters.redirectURI - Per OAuth standard, a valid app route. Must be listed in your SLAS configuration. On server, this will not be actually called. On browser, this will be called, but ignored.
     * @param parameters.usid? - Unique Shopper Identifier to enable personalization.
     * @param parameters.dnt? - Optional parameter to enable Do Not Track (DNT) for the user.
     * @para options? - options to pass in the ShopperLogin 'authenticateCustomer' method
     * @param options.body - optional body parameters to pass in the ShopperLogin 'authenticateCustomer' method.
     * @returns TokenResponse
     */
    function loginRegisteredUserB2C(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
    }>, credentials: {
        username: string;
        password: string;
        clientSecret?: string;
    }, parameters: {
        redirectURI: string;
        usid?: string;
        dnt?: boolean;
    }, options?: {
        body?: CustomRequestBody;
    }): Promise<TokenResponse>;
    /* Function to send passwordless login token
    * **Note** At the moment, passwordless is only supported on private client
    * @param slasClient a configured instance of the ShopperLogin SDK client.
    * @param credentials - the id and password and clientSecret (if applicable) to login with.
    * @param credentials.clientSecret? - secret associated with client ID
    * @param parameters - parameters to pass in the API calls.
    * @param parameters.callbackURI? - URI to send the passwordless login token to. Must be listed in your SLAS configuration. Required when mode is callback
    * @param parameters.usid? - Unique Shopper Identifier to enable personalization.
    * @param parameters.userid - User Id for login
    * @param parameters.locale - The locale of the template. Not needed for the callback mode
    * @param parameters.mode - Medium of sending login token
    * @returns Promise of Response
    */
    function authorizePasswordless(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
    }>, credentials: {
        clientSecret: string;
    }, parameters: {
        callbackURI?: string;
        usid?: string;
        userid: string;
        locale?: string;
        mode: string;
    }): Promise<Response>;
    /**
     * Function to login user with passwordless login token
     * **Note** At the moment, passwordless is only supported on private client
     * @param slasClient a configured instance of the ShopperLogin SDK client.
     * @param credentials - the id and password and clientSecret (if applicable) to login with.
     * @param credentials.clientSecret? - secret associated with client ID
     * @param parameters - parameters to pass in the API calls.
     * @param parameters.callbackURI? - URI to send the passwordless login token to. Must be listed in your SLAS configuration. Required when mode is callback
     * @param parameters.pwdlessLoginToken - Passwordless login token
     * @param parameters.dnt? - Optional parameter to enable Do Not Track (DNT) for the user.
     * @returns Promise of Response or Object
     */
    function getPasswordLessAccessToken(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
    }>, credentials: {
        clientSecret: string;
    }, parameters: {
        pwdlessLoginToken: string;
        dnt?: string;
    }): Promise<TokenResponse>;
    /**
     * Exchange a refresh token for a new access token.
     * **Note**: this func can run on client side. Only use private slas when the slas client secret is secured.
     * @param slasClient a configured instance of the ShopperLogin SDK client.
     * @param parameters - parameters to pass in the API calls.
     * @param parameters.refreshToken - a valid refresh token to exchange for a new access token (and refresh token).
     * @param credentials - the clientSecret (if applicable) to login with.
     * @param credentials.clientSecret - secret associated with client ID
     * @returns TokenResponse
     */
    function refreshAccessToken(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
    }>, parameters: {
        refreshToken: string;
        dnt?: boolean;
    }, credentials?: {
        clientSecret?: string;
    }): Promise<TokenResponse>;
    /**
     * Logout a shopper. The shoppers access token and refresh token will be revoked and if the shopper authenticated with ECOM the OCAPI JWT will also be revoked.
     * @param slasClient a configured instance of the ShopperLogin SDK client.
     * @param parameters - parameters to pass in the API calls.
     * @param parameters.accessToken - a valid access token to exchange for a new access token (and refresh token).
     * @param parameters.refreshToken - a valid refresh token to exchange for a new access token (and refresh token).
     * @returns TokenResponse
     */
    function logout(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
    }>, parameters: {
        accessToken: string;
        refreshToken: string;
    }): Promise<TokenResponse>;
    interface CustomParams {
        apiName?: string;
        apiVersion?: string;
        endpointPath?: string;
        organizationId?: string;
        shortCode: string;
        [key: string]: unknown;
    }
    /**
     * A helper function designed to make calls to a custom API endpoint
     * For more information about custom APIs, please refer to the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/guide/custom-apis.html)
     * @param args - Argument object containing data used for custom API request
     * @param args.options - An object containing any custom settings you want to apply to the request
     * @param args.options.method? - The request HTTP operation. 'GET' is the default if no method is provided.
     * @param args.options.parameters? - Query parameters that are added to the request
     * @param args.options.customApiPathParameters? - Path parameters used for custom API. Required path parameters (apiName, endpointPath, organizationId, and shortCode) can be in this object, or args.clientConfig.parameters. apiVersion is defaulted to 'v1' if not provided.
     * @param args.options.headers? - Headers that are added to the request. Authorization header should be in this parameter or in the clientConfig.headers. If "Content-Type" is not provided in either header, it will be defaulted to "application/json".
     * @param args.options.body? - Body that is used for the request
     * @param args.clientConfig - Client Configuration object used by the SDK with properties that can affect the fetch call
     * @param args.clientConfig.parameters - Path parameters used for custom API endpoints. The required properties are: apiName, endpointPath, organizationId, and shortCode. An error will be thrown if these are not provided.
     * @param args.clientConfig.headers? - Additional headers that are added to the request. Authorization header should be in this argument or in the options?.headers. options?.headers will override any duplicate properties. If "Content-Type" is not provided in either header, it will be defaulted to "application/json".
     * @param args.clientConfig.baseUri? - baseUri used for the request, where the path parameters are wrapped in curly braces. Default value is 'https://{shortCode}.api.commercecloud.salesforce.com/custom/{apiName}/{apiVersion}'
     * @param args.clientConfig.fetchOptions? - fetchOptions that are passed onto the fetch request
     * @param args.clientConfig.throwOnBadResponse? - flag that when set true will throw a response error if the fetch request fails (returns with a status code outside the range of 200-299 or 304 redirect)
     * @param args.clientConfig.proxy? - Routes API calls through a proxy when set
     * @param args.rawResponse? - Flag to return the raw response from the fetch call. True for raw response object, false for the data from the response
     * @returns Raw response or data from response based on rawResponse argument from fetch call
     */
    const callCustomEndpoint: (args: {
        options: {
            method?: string | undefined;
            parameters?: {
                [key: string]: string | number | boolean | string[] | number[];
            } | undefined;
            customApiPathParameters?: {
                apiName?: string | undefined;
                apiVersion?: string | undefined;
                endpointPath?: string | undefined;
                organizationId?: string | undefined;
                shortCode?: string | undefined;
            } | undefined;
            headers?: ({
                authorization?: string | undefined;
            } & {
                [key: string]: string;
            }) | undefined;
            body?: BodyInit | globalThis.BodyInit | unknown;
        };
        clientConfig: ClientConfigInit<CustomParams>;
        rawResponse?: boolean | undefined;
    }) => Promise<Response | unknown>;
    /**
     * A wrapper function around fetch designed for making requests using the SDK
     * @param url - The url of the resource that you wish to fetch
     * @param options? - An object containing any custom settings you want to apply to the request
     * @param options.method? - The request HTTP operation. 'GET' is the default if no method is provided.
     * @param options.headers? - Headers that are added to the request. Authorization header should be in this argument or in the clientConfig.headers
     * @param options.body? - Body that is used for the request
     * @param clientConfig? - Client Configuration object used by the SDK with properties that can affect the fetch call
     * @param clientConfig.headers? - Additional headers that are added to the request. Authorization header should be in this argument or in the options?.headers. options?.headers will override any duplicate properties.
     * @param clientConfig.fetchOptions? - fetchOptions that are passed onto the fetch request
     * @param clientConfig.throwOnBadResponse? - flag that when set true will throw a response error if the fetch request fails
     * @param rawResponse? - Flag to return the raw response from the fetch call. True for raw response object, false for the data from the response
     * @returns Raw response or data from response based on rawResponse argument from fetch call
     */
    // eslint-disable-next-line import/prefer-default-export
    const doFetch: <Params extends BaseUriParameters>(url: string, options?: {
        method?: string | undefined;
        headers?: ({
            authorization?: string | undefined;
        } & {
            [key: string]: string;
        }) | undefined;
        body?: BodyInit | globalThis.BodyInit | unknown;
    } | undefined, clientConfig?: ClientConfigInit<Params> | undefined, rawResponse?: boolean | undefined) => Promise<Response | unknown>;
    /**
     * Single encodes SCAPI specific special characters (percentage sign `%` and comma `,`) in the given string in UTF-8
     * Does not encode any other special characters in the string
     * @param str - The string to encode
     * @returns The encoded string
     */
    const encodeSCAPISpecialCharacters: (str: string) => string;
}
export { ShopperBaskets, ShopperContexts, ShopperCustomers, ShopperDiscoverySearch, ShopperExperience, ShopperGiftCertificates, ShopperOrders, ShopperProducts, ShopperPromotions, ShopperSearch, ShopperSeo, ShopperStores, ShopperLogin, ClientConfig, TemplateURL, helpers };
export type { ShopperBasketsTypes, ShopperContextsTypes, ShopperCustomersTypes, ShopperDiscoverySearchTypes, ShopperExperienceTypes, ShopperGiftCertificatesTypes, ShopperOrdersTypes, ShopperProductsTypes, ShopperPromotionsTypes, ShopperSearchTypes, ShopperSeoTypes, ShopperStoresTypes, ShopperLoginTypes, ClientConfigInit };
