"use strict";

var _ssrConfig = require("./ssr-config.server");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
describe('Server "getConfig"', () => {
  const env = process.env;
  beforeEach(() => {
    jest.resetModules();
    process.env = _objectSpread({}, env);
  });
  afterEach(() => {
    process.env = env;
  });
  test('throws when no config files are found running remotely', () => {
    expect(_ssrConfig.getConfig).toThrow();
  });
  test('throws when no config files are found running locally', () => {
    process.env.AWS_LAMBDA_FUNCTION_NAME = '';
    expect(_ssrConfig.getConfig).toThrow();
  });
  test('config is cached', () => {
    const mockConfig = {
      test: 'test'
    };
    const mockConfigSearch = jest.fn().mockReturnValue({
      config: mockConfig
    });
    jest.doMock('cosmiconfig', () => {
      const originalModule = jest.requireActual('cosmiconfig');
      return _objectSpread(_objectSpread({}, originalModule), {}, {
        cosmiconfigSync: () => ({
          search: mockConfigSearch
        })
      });
    });
    // Call getConfig multiple times
    expect((0, _ssrConfig.getConfig)()).toBe(mockConfig);
    expect((0, _ssrConfig.getConfig)()).toBe(mockConfig);
    expect(mockConfigSearch).toHaveBeenCalledTimes(1);
  });
});