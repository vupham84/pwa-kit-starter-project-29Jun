"use strict";

var _loggerFactory = _interopRequireWildcard(require("./logger-factory"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright (c) 2024, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

describe('PWAKitLogger', () => {
  const levels = ['error', 'warn', 'info', 'debug'];
  beforeEach(() => {
    console.debug = jest.fn();
    console.log = jest.fn();
    console.info = jest.fn();
    console.warn = jest.fn();
    console.error = jest.fn();
    jest.resetModules();
  });
  afterEach(() => {
    jest.clearAllMocks();
  });
  for (const level of levels) {
    test(`should log a ${level} message`, () => {
      const logger = (0, _loggerFactory.default)({
        packageName: 'test-package'
      });
      logger[level](`This is a ${level} message`);
      expect(console[level]).toHaveBeenCalledWith(`test-package ${level.toUpperCase()} This is a ${level} message`);
    });
  }
  test('should use empty packageName if not provided', () => {
    const logger = new _loggerFactory.PWAKitLogger();
    logger.info('This is an info message with default packageName');
    expect(console.info).toHaveBeenCalledWith(' INFO This is an info message with default packageName');
  });
  test('should include additional properties in log message', () => {
    const logger = (0, _loggerFactory.default)({
      packageName: 'test-package'
    });
    logger.info('This is an info message', {
      namespace: 'testNamespace',
      additionalProperties: {
        key: 'value'
      }
    });
    expect(console.info).toHaveBeenCalledWith('test-package.testNamespace INFO This is an info message {"key":"value"}');
  });
  test('should not include additionalProperties if it is not provided', () => {
    const logger = (0, _loggerFactory.default)({
      packageName: 'test-package'
    });
    logger.info('This is an info message', {
      namespace: 'testNamespace'
    });
    expect(console.info).toHaveBeenCalledWith('test-package.testNamespace INFO This is an info message');
  });
  test('should log only namespace with an empty packageName', () => {
    const logger = new _loggerFactory.PWAKitLogger({
      packageName: ''
    });
    logger.info('This is an info message', {
      namespace: 'testNamespace'
    });
    expect(console.info).toHaveBeenCalledWith('testNamespace INFO This is an info message');
  });
  describe('logger with TEXT format', () => {});
});