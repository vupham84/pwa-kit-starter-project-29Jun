"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processLambdaResponse = void 0;
var _constants = require("../../ssr/server/constants");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) 2022, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const processLambdaResponse = (response, event) => {
  var _event$headers, _response$headers;
  if (!response) return response;

  // Retrieve the correlation ID from the event headers
  const correlationId = (_event$headers = event.headers) === null || _event$headers === void 0 ? void 0 : _event$headers['x-correlation-id'];
  const responseHeaders = _objectSpread({}, response.headers);

  // Add the correlation ID to the response headers if it exists
  if (correlationId) {
    responseHeaders['x-correlation-id'] = correlationId;
  }

  // If the response contains an X_ORIGINAL_CONTENT_TYPE header,
  // then replace the current CONTENT_TYPE header with it.
  const originalContentType = (_response$headers = response.headers) === null || _response$headers === void 0 ? void 0 : _response$headers[_constants.X_ORIGINAL_CONTENT_TYPE];
  if (originalContentType) {
    responseHeaders[_constants.CONTENT_TYPE] = originalContentType;
    delete responseHeaders[_constants.X_ORIGINAL_CONTENT_TYPE];
  }
  const result = _objectSpread(_objectSpread({}, response), {}, {
    headers: responseHeaders
  });
  return result;
};
exports.processLambdaResponse = processLambdaResponse;