"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PWAKitLogger = void 0;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/*
 * Copyright (c) 2024, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

/**
 * The PWAKitLogger provides structured logging with different log levels.
 * @private
 */
class PWAKitLogger {
  /**
   * Creates an instance of PWAKitLogger.
   * @param {Object} options - Configuration options for the logger.
   * @param {string} options.packageName - The name of the package where the logger is used.
   */
  constructor(options = {}) {
    this.packageName = options.packageName || '';
  }

  /**
   * Formats the log message.
   *
   * @param {string} message - The log message.
   * @param {Object} details - The context for the log message.
   * @param {string} details.level - The log level of the message.
   * @param {string} details.namespace - The namespace 'packageName.component.action' of the log message.
   * @param {Object} details.additionalProperties - Additional properties to include in the log message.
   * @returns {string} - The formatted log message as a string.
   */
  #formatLogMessage(message, {
    level,
    namespace,
    additionalProperties
  }) {
    let finalNamespace = this.packageName;
    if (namespace && this.packageName) {
      finalNamespace += `.${namespace}`;
    } else if (namespace) {
      finalNamespace = namespace;
    }
    return `${finalNamespace} ${level.toUpperCase()} ${message}${additionalProperties ? ` ${JSON.stringify(additionalProperties)}` : ''}`;
  }

  /**
   * Prints a log message with the namespace using the console object method set in the message log level.
   * @param {string} message - The log message.
   * @param {Object} options - Optional message details.
   * @param {string} options.level - The log level of the message.
   */
  #printLog(message, options = {}) {
    const {
      level
    } = options;
    const formattedMessage = this.#formatLogMessage(message, options);
    switch (level) {
      case 'error':
        console.error(formattedMessage);
        break;
      case 'warn':
        console.warn(formattedMessage);
        break;
      case 'info':
        console.info(formattedMessage);
        break;
      case 'debug':
        console.debug(formattedMessage);
        break;
      default:
        console.log(formattedMessage);
        break;
    }
  }

  /**
   * Logs a debug message.
   * @param {string} message - The debug message.
   * @param {Object} [details={}] - Optional message details.
   */
  debug(message, details = {}) {
    this.#printLog(message, _objectSpread({
      level: 'debug'
    }, details));
  }

  /**
   * Logs an info message.
   * @param {string} message - The info message.
   * @param {Object} [details={}] - Optional message details.
   */
  log(message, details = {}) {
    this.#printLog(message, _objectSpread({
      level: 'info'
    }, details));
  }

  /**
   * Logs an info message.
   * @param {string} message - The info message.
   * @param {Object} [details={}] - Optional message details.
   */
  info(message, details = {}) {
    this.#printLog(message, _objectSpread({
      level: 'info'
    }, details));
  }

  /**
   * Logs a warning message.
   * @param {string} message - The warning message.
   * @param {Object} [details={}] - Optional message details.
   */
  warn(message, details = {}) {
    this.#printLog(message, _objectSpread({
      level: 'warn'
    }, details));
  }

  /**
   * Logs an error message.
   * @param {string} message - The error message.
   * @param {Object} [details={}] - Optional message details.
   */
  error(message, details = {}) {
    this.#printLog(message, _objectSpread({
      level: 'error'
    }, details));
  }
}

/**
 * Create a logger instance for each package.
 *
 * @param {Object} config - Configuration object for the logger.
 * @param {string} config.packageName - The name of the package where the logger is used.
 * @returns {PWAKitLogger} - An instance of PWAKitLogger configured for the specified package.
 */
exports.PWAKitLogger = PWAKitLogger;
const createLogger = (config = {}) => {
  return new PWAKitLogger(config);
};
var _default = exports.default = createLogger;