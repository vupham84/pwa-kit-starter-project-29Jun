"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CookieStorage = void 0;
var _jsCookie = _interopRequireDefault(require("js-cookie"));
var _utils = require("../../utils");
var _base = require("./base");
var _constant = require("../../constant");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * A normalized implementation for Cookie store. It implements the BaseStorage interface
 * which allows developers to easily switch between Cookie, LocalStorage, Memory store
 * or a customized storage. This class is mainly used for commerce-sdk-react library
 * to store authentication tokens.
 */
class CookieStorage extends _base.BaseStorage {
  constructor(options) {
    // TODO: Use detectCookiesAvailable when app can better handle clients with cookies disabled
    if (typeof document === 'undefined') {
      throw new Error('CookieStorage is not available on the current environment.');
    }
    super(options);
  }
  set(key, value, options) {
    const suffixedKey = _constant.EXCLUDE_COOKIE_SUFFIX.includes(key) ? key : this.getSuffixedKey(key);
    _jsCookie.default.set(suffixedKey, value, _objectSpread(_objectSpread({}, (0, _utils.getDefaultCookieAttributes)()), options));
  }
  get(key) {
    const suffixedKey = _constant.EXCLUDE_COOKIE_SUFFIX.includes(key) ? key : this.getSuffixedKey(key);
    let value = _jsCookie.default.get(suffixedKey) || '';
    if (value) {
      // Some values, like the access token, may be split
      // across multiple keys to fit under ECOM cookie size
      // thresholds. We check for and append additional chunks here.
      let chunk = 2;
      let additionalPart = _jsCookie.default.get(`${suffixedKey}_${chunk}`);
      while (additionalPart) {
        value = value.concat(additionalPart);
        chunk++;
        additionalPart = _jsCookie.default.get(`${suffixedKey}_${chunk}`) || '';
      }
    }
    return value;
  }
  delete(key, options) {
    const suffixedKey = _constant.EXCLUDE_COOKIE_SUFFIX.includes(key) ? key : this.getSuffixedKey(key);
    _jsCookie.default.remove(suffixedKey, _objectSpread(_objectSpread({}, (0, _utils.getDefaultCookieAttributes)()), options));

    // Some values, like the access token, may be split
    // across multiple keys to fit under ECOM cookie size
    // thresholds. We check for and delete additional chunks here.
    let chunk = 2;
    let additionalPart = _jsCookie.default.get(`${suffixedKey}_${chunk}`);
    while (additionalPart) {
      _jsCookie.default.remove(`${suffixedKey}_${chunk}`, _objectSpread(_objectSpread({}, (0, _utils.getDefaultCookieAttributes)()), options));
      chunk++;
      additionalPart = _jsCookie.default.get(`${suffixedKey}_${chunk}`) || '';
    }
  }
}
exports.CookieStorage = CookieStorage;