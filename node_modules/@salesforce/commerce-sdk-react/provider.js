"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ConfigContext = exports.CommerceApiContext = exports.AuthContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _commerceSdkIsomorphic = require("commerce-sdk-isomorphic");
var _auth = _interopRequireDefault(require("./auth"));
var _constant = require("./constant");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * @internal
 */
const CommerceApiContext = exports.CommerceApiContext = /*#__PURE__*/_react.default.createContext({});

/**
 * @internal
 */
const ConfigContext = exports.ConfigContext = /*#__PURE__*/_react.default.createContext({});

/**
 * @internal
 */
const AuthContext = exports.AuthContext = /*#__PURE__*/_react.default.createContext({});

/**
 * Initialize a set of Commerce API clients and make it available to all of descendant components
 *
 * @group Components
 *
 * @example
 * ```js
    import {CommerceApiProvider} from '@salesforce/commerce-sdk-react'


    const App = ({children}) => {
        return (
                <CommerceApiProvider
                    clientId="12345678-1234-1234-1234-123412341234"
                    organizationId="f_ecom_aaaa_001"
                    proxy="localhost:3000/mobify/proxy/api"
                    redirectURI="localhost:3000/callback"
                    siteId="RefArch"
                    shortCode="12345678"
                    locale="en-US"
                    enablePWAKitPrivateClient={true}
                    currency="USD"
                    logger={logger}
                >
                    {children}
                </CommerceApiProvider>
        )
    }

    export default App
 * ```
 * Note: The provider can enable SLAS Private Client mode in 2 ways.
 * `enablePWAKitPrivateClient` sets commerce-sdk-react to work with the PWA proxy
 * `/mobify/slas/private` to set the private client secret. PWA users should use
 * this option.
 *
 * Non-PWA Kit users can enable private client mode by passing in a client secret
 * directly to the provider. However, be careful when doing this as you will have
 * to make sure the secret is not unexpectedly exposed to the client.
 *
 * @returns Provider to wrap your app with
 */
const CommerceApiProvider = props => {
  const {
    children,
    clientId,
    headers = {},
    organizationId,
    proxy,
    redirectURI,
    fetchOptions,
    siteId,
    shortCode,
    locale,
    currency,
    fetchedToken,
    enablePWAKitPrivateClient,
    clientSecret,
    silenceWarnings,
    logger,
    defaultDnt,
    passwordlessLoginCallbackURI,
    refreshTokenRegisteredCookieTTL,
    refreshTokenGuestCookieTTL
  } = props;

  // Set the logger based on provided configuration, or default to the console object if no logger is provided
  const configLogger = logger || console;
  const auth = (0, _react.useMemo)(() => {
    return new _auth.default({
      clientId,
      organizationId,
      shortCode,
      siteId,
      proxy,
      redirectURI,
      fetchOptions,
      fetchedToken,
      enablePWAKitPrivateClient,
      clientSecret,
      silenceWarnings,
      logger: configLogger,
      defaultDnt,
      passwordlessLoginCallbackURI,
      refreshTokenRegisteredCookieTTL,
      refreshTokenGuestCookieTTL
    });
  }, [clientId, organizationId, shortCode, siteId, proxy, redirectURI, fetchOptions, fetchedToken, enablePWAKitPrivateClient, clientSecret, silenceWarnings, configLogger, defaultDnt, passwordlessLoginCallbackURI, refreshTokenRegisteredCookieTTL, refreshTokenGuestCookieTTL]);
  const dwsid = auth.get(_constant.DWSID_COOKIE_NAME);
  const serverAffinityHeader = {};
  if (dwsid) {
    serverAffinityHeader[_constant.SERVER_AFFINITY_HEADER_KEY] = dwsid;
  }
  const config = {
    proxy,
    headers: _objectSpread(_objectSpread({}, headers), serverAffinityHeader),
    parameters: {
      clientId,
      organizationId,
      shortCode,
      siteId,
      locale,
      currency
    },
    throwOnBadResponse: true,
    fetchOptions
  };
  const baseUrl = config.proxy.split(_constant.MOBIFY_PATH)[0];
  const privateClientEndpoint = `${baseUrl}${_constant.SLAS_PRIVATE_PROXY_PATH}`;
  const apiClients = (0, _react.useMemo)(() => {
    return {
      shopperBaskets: new _commerceSdkIsomorphic.ShopperBaskets(config),
      shopperContexts: new _commerceSdkIsomorphic.ShopperContexts(config),
      shopperCustomers: new _commerceSdkIsomorphic.ShopperCustomers(config),
      shopperExperience: new _commerceSdkIsomorphic.ShopperExperience(config),
      shopperGiftCertificates: new _commerceSdkIsomorphic.ShopperGiftCertificates(config),
      shopperLogin: new _commerceSdkIsomorphic.ShopperLogin(_objectSpread(_objectSpread({}, config), {}, {
        proxy: enablePWAKitPrivateClient ? privateClientEndpoint : config.proxy
      })),
      shopperOrders: new _commerceSdkIsomorphic.ShopperOrders(config),
      shopperProducts: new _commerceSdkIsomorphic.ShopperProducts(config),
      shopperPromotions: new _commerceSdkIsomorphic.ShopperPromotions(config),
      shopperSearch: new _commerceSdkIsomorphic.ShopperSearch(config),
      shopperSeo: new _commerceSdkIsomorphic.ShopperSeo(config),
      shopperStores: new _commerceSdkIsomorphic.ShopperStores(config)
    };
  }, [clientId, organizationId, shortCode, siteId, proxy, fetchOptions, locale, currency, headers === null || headers === void 0 ? void 0 : headers['correlation-id']]);

  // Initialize the session
  (0, _react.useEffect)(() => void auth.ready(), [auth]);
  return /*#__PURE__*/_react.default.createElement(ConfigContext.Provider, {
    value: {
      clientId,
      headers,
      organizationId,
      proxy,
      redirectURI,
      fetchOptions,
      siteId,
      shortCode,
      locale,
      currency,
      silenceWarnings,
      logger: configLogger,
      defaultDnt,
      passwordlessLoginCallbackURI,
      refreshTokenRegisteredCookieTTL,
      refreshTokenGuestCookieTTL
    }
  }, /*#__PURE__*/_react.default.createElement(CommerceApiContext.Provider, {
    value: apiClients
  }, /*#__PURE__*/_react.default.createElement(AuthContext.Provider, {
    value: auth
  }, children)));
};
var _default = exports.default = CommerceApiProvider;