/**
 * This list contains domains that can host code in iframe
 */
export declare const IFRAME_HOST_ALLOW_LIST: readonly string[];
export declare const MOBIFY_PATH = "/mobify";
export declare const PROXY_PATH: string;
export declare const LOCAL_BUNDLE_PATH: string;
export declare const SLAS_PRIVATE_PROXY_PATH: string;
export declare const SLAS_SECRET_WARNING_MSG = "You are potentially exposing SLAS secret on browser. Make sure to keep it safe and secure!";
export declare const SLAS_SECRET_PLACEHOLDER = "_PLACEHOLDER_PROXY-PWA_KIT_SLAS_CLIENT_SECRET";
export declare const SLAS_SECRET_OVERRIDE_MSG = "You have enabled PWA Kit Private Client mode which gets the SLAS secret from your environment variable. The SLAS secret you have set in the Auth provider will be ignored.";
export declare const SLAS_REFRESH_TOKEN_COOKIE_TTL_OVERRIDE_MSG = "You are attempting to use an invalid refresh token TTL value.";
export declare const DNT_COOKIE_NAME: "dw_dnt";
export declare const DWSID_COOKIE_NAME = "dwsid";
export declare const EXCLUDE_COOKIE_SUFFIX: string[];
/**
 * For Hybrid Setups only!
 * Unlike SCAPI/OCAPI, ECOM creates baskets in app-server cache initially and move the basket object
 * to the db later based on basket state. In a hybrid storefront, storefront requests might be
 * routed to different appservers, if the basket object is still in appserver cache, you will start
 * seeing inconsistencies in basket state. To avoid this, if you have a dwsid cookie, you must send
 * the value of the dwsid cookie with each SCAPI/OCAPI request in a hybrid storefront to maintain appserver affinity.
 *
 * Use the header key below to send dwsid value with SCAPI/OCAPI requests.
 */
export declare const SERVER_AFFINITY_HEADER_KEY = "sfdc_dwsid";
//# sourceMappingURL=constant.d.ts.map