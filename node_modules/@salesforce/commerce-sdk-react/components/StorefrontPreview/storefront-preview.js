"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StorefrontPreview = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactHelmet = require("react-helmet");
var _utils = require("./utils");
var _reactRouterDom = require("react-router-dom");
var _hooks = require("../../hooks");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 *
 * @param enabled - flag to turn on/off Storefront Preview feature. By default, it is set to true.
 * This flag only applies if storefront is running in a Runtime Admin iframe.
 * @param getToken - A method that returns the access token for the current user
 */
const StorefrontPreview = ({
  children,
  enabled = true,
  getToken,
  onContextChange
}) => {
  const history = (0, _reactRouterDom.useHistory)();
  const isHostTrusted = (0, _utils.detectStorefrontPreview)();
  const apiClients = (0, _hooks.useCommerceApi)();
  const {
    siteId
  } = (0, _hooks.useConfig)();
  (0, _react.useEffect)(() => {
    if (enabled && isHostTrusted) {
      window.STOREFRONT_PREVIEW = _objectSpread(_objectSpread({}, window.STOREFRONT_PREVIEW), {}, {
        getToken,
        onContextChange,
        siteId,
        experimentalUnsafeNavigate: (path, action = 'push', ...args) => {
          history[action](path, ...args);
        }
      });
    }
  }, [enabled, getToken, onContextChange, siteId]);
  (0, _react.useEffect)(() => {
    if (enabled && isHostTrusted) {
      // In Storefront Preview mode, add cache breaker for all SCAPI's requests.
      // Otherwise, it's possible to get stale responses after the Shopper Context is set.
      // (i.e. in this case, we optimize for accurate data, rather than performance/caching)
      (0, _utils.proxyRequests)(apiClients, {
        apply(target, thisArg, argumentsList) {
          var _argumentsList$;
          argumentsList[0] = _objectSpread(_objectSpread({}, argumentsList[0]), {}, {
            parameters: _objectSpread(_objectSpread({}, (_argumentsList$ = argumentsList[0]) === null || _argumentsList$ === void 0 ? void 0 : _argumentsList$.parameters), {}, {
              c_cache_breaker: Date.now()
            })
          });
          return target.call(thisArg, ...argumentsList);
        }
      });
    }
  }, [apiClients, enabled]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, enabled && isHostTrusted && /*#__PURE__*/_react.default.createElement(_reactHelmet.Helmet, null, /*#__PURE__*/_react.default.createElement("script", {
    id: "storefront_preview",
    src: (0, _utils.getClientScript)(),
    async: true,
    type: "text/javascript"
  })), children);
};
exports.StorefrontPreview = StorefrontPreview;
StorefrontPreview.propTypes = {
  children: _propTypes.default.node,
  enabled: _propTypes.default.bool,
  // A custom prop type function to only require this prop if enabled is true. Ultimately we would like
  // to get to a place where both these props are simply optional and we will provide default implementations.
  // This would make the API simpler to use.
  getToken: _utils.CustomPropTypes.requiredFunctionWhenEnabled,
  onContextChange: _propTypes.default.func
};
var _default = exports.default = StorefrontPreview;