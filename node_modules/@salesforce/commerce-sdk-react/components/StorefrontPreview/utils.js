"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.proxyRequests = exports.getClientScript = exports.detectStorefrontPreview = exports.CustomPropTypes = void 0;
var _utils = require("../../utils");
var _constant = require("../../constant");
/*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

/** Detects whether the storefront is running in an iframe as part of Storefront Preview.
 * @private
 */
const detectStorefrontPreview = () => {
  const parentOrigin = (0, _utils.getParentOrigin)();
  return (0, _utils.isOriginTrusted)(parentOrigin);
};

/**
 * Returns the URL to load the Storefront Preview client script from the parent origin.
 * The client script is served from Runtime Admin and is not a part of the PWA Retail React App bundle.
 * @private
 */
exports.detectStorefrontPreview = detectStorefrontPreview;
const getClientScript = () => {
  const parentOrigin = (0, _utils.getParentOrigin)() ?? 'https://runtime.commercecloud.com';
  return parentOrigin === _utils.DEVELOPMENT_ORIGIN ? `${parentOrigin}${_constant.LOCAL_BUNDLE_PATH}/static/storefront-preview.js` : `${parentOrigin}/cc/b2c/preview/preview.client.js`;
};

// Custom Prop Types.
exports.getClientScript = getClientScript;
const CustomPropTypes = exports.CustomPropTypes = {
  /**
   * This custom PropType ensures that the prop is only required when the known prop
   * "enabled" is set to "true".
   *
   * @param props
   * @param propName
   * @param componentName
   * @returns
   */
  requiredFunctionWhenEnabled: (props, propName, componentName) => {
    if (props['enabled'] === true && (props[propName] === undefined || typeof props[propName] !== 'function')) {
      return new Error(`${String(propName)} is a required function for ${String(componentName)} when enabled is true`);
    }
  }
};

/**
 * Via the built-in Proxy object, modify the behaviour of each request for the given SCAPI clients
 * @private
 */
const proxyRequests = (clients, handlers) => {
  Object.values(clients).forEach(client => {
    const methods = Object.getOwnPropertyNames(Object.getPrototypeOf(client));
    methods.forEach(method => {
      client[method] = new Proxy(client[method], handlers);
    });
  });
};
exports.proxyRequests = proxyRequests;