"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEVELOPMENT_ORIGIN = void 0;
exports.detectCookiesAvailable = detectCookiesAvailable;
exports.detectInIframe = void 0;
exports.detectLocalStorageAvailable = detectLocalStorageAvailable;
exports.getParentOrigin = exports.getDefaultCookieAttributes = exports.getCookieSameSiteAttribute = void 0;
exports.isAbsoluteUrl = isAbsoluteUrl;
exports.stringToBase64 = exports.onClient = exports.isOriginTrusted = void 0;
var _jsCookie = _interopRequireDefault(require("js-cookie"));
var _constant = require("./constant");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/** Utility to determine if you are on the browser (client) or not. */
const onClient = () => typeof window !== 'undefined';

/** Detects whether the storefront is running in an iframe. */
exports.onClient = onClient;
const detectInIframe = () => typeof window !== 'undefined' && window.top !== window.self;

/**
 * Origin used for local Runtime Admin.
 * @private
 */
exports.detectInIframe = detectInIframe;
const DEVELOPMENT_ORIGIN = exports.DEVELOPMENT_ORIGIN = 'http://localhost:4000';

/**
 * Gets the parent origin when running in an iframe.
 * @private
 */
const getParentOrigin = () => {
  if (detectInIframe()) {
    // location.ancestorOrigins[0] will provide the parent host url, but it only works for Chrome and Safari.
    // Firefox does not have this field. document.referrer is common use for parent url, but it could be less reliable.
    // It is best to use it a fallback option for Firefox
    if (window.location.ancestorOrigins) return window.location.ancestorOrigins[0];
    if (document.referrer) return new URL(document.referrer).origin;
  }
};

/**
 * Determines whether the given origin is trusted to host the storefront in an iframe.
 * @private
 */
exports.getParentOrigin = getParentOrigin;
const isOriginTrusted = origin => {
  return Boolean(origin && (window.location.hostname === 'localhost' ? origin === DEVELOPMENT_ORIGIN // Development
  : _constant.IFRAME_HOST_ALLOW_LIST.includes(origin)) // Production
  );
};

/**
 * Gets the value to use for the `sameSite` cookie attribute.
 * @returns `undefined` if running on the server, `"none"` if running as an iframe on a trusted site
 * (i.e. Storefront Preview), otherwise `"Lax"`
 */
exports.isOriginTrusted = isOriginTrusted;
const getCookieSameSiteAttribute = () => {
  if (!onClient()) return;
  const isLocalHost = window.location.hostname === 'localhost';
  const parentOrigin = getParentOrigin();
  return !isLocalHost && isOriginTrusted(parentOrigin) ? 'none' : 'Lax';
};

/**
 * Gets the default cookie attributes. Sets the secure flag unless running on localhost in Safari.
 * Sets the sameSite attribute to `"none"` when running in a trusted iframe.
 */
exports.getCookieSameSiteAttribute = getCookieSameSiteAttribute;
const getDefaultCookieAttributes = () => {
  return {
    // Deployed sites will always be HTTPS, but the local dev server is served over HTTP.
    // Ideally, this would be `secure: true`, because Chrome and Firefox both treat
    // localhost as a Secure context. But Safari doesn't, so here we are.
    secure: !onClient() || window.location.protocol === 'https:',
    // By default, Chrome does not allow cookies to be sent/read when the code is loaded in
    // an iframe (e.g storefront preview). Setting sameSite to "none" loosens that
    // restriction, but we only want to do so when when the iframe parent is in our allow
    // list. Outside of iframe, we want to keep most browser default value (Chrome or Firefox uses Lax)
    // https://web.dev/samesite-cookie-recipes/
    sameSite: getCookieSameSiteAttribute()
  };
};

/** Determines whether local storage is available. */
exports.getDefaultCookieAttributes = getDefaultCookieAttributes;
function detectLocalStorageAvailable() {
  if (typeof window === 'undefined') return false;
  try {
    // If access to `localStorage` is forbidden, accessing the property will throw an error
    return Boolean(window.localStorage);
  } catch {
    return false;
  }
}

/** Determines whether cookies are available by trying to set a test value. */
function detectCookiesAvailable(options) {
  if (typeof document === 'undefined') return false;
  if (!navigator.cookieEnabled) return false;
  // Even if `cookieEnabled` is true, cookies may not work. A site may allow first-party, but not
  // third-party, a browser extension may block cookies, etc. The most reliable way to detect if
  // cookies are available is to try to set one
  const testKey = 'commerce-sdk-react-temp';
  const testValue = '1';
  const netOptions = _objectSpread(_objectSpread({}, getDefaultCookieAttributes()), options);
  try {
    _jsCookie.default.set(testKey, testValue, netOptions);
    const success = _jsCookie.default.get(testKey) === testValue;
    _jsCookie.default.remove(testKey, netOptions);
    return success;
  } catch {
    return false;
  }
}

/**
 * Determines whether the given URL string is a valid absolute URL.
 *
 * Valid absolute URLs:
 * - https://example.com
 * - http://example.com
 *
 * Invalid or relative URLs:
 * - http://example
 * - example.com
 * - /relative/path
 *
 * @param {string} url - The URL string to be checked.
 * @returns {boolean} - Returns true if the given string is a valid absolute URL, false otherwise.
 */
function isAbsoluteUrl(url) {
  return /^(https?:\/\/)/i.test(url);
}

/**
 * Provides a platform-specific method for Base64 encoding.
 *
 * - In a browser environment (where `window` and `document` are defined),
 *   the native `btoa` function is used.
 * - In a non-browser environment (like Node.js), a fallback is provided
 *   that uses `Buffer` to perform the Base64 encoding.
 */
const stringToBase64 = exports.stringToBase64 = typeof window === 'object' && typeof window.document === 'object' ? btoa : unencoded => Buffer.from(unencoded).toString('base64');