import { UseQueryResult } from '@tanstack/react-query';
import { ApiClients, ApiQueryOptions, Argument, DataType, NullableParameters } from '../types';
type Client = ApiClients['shopperOrders'];
/**
 * Gets information for an order.
 * @group ShopperOrders
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Orders `getOrder` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-orders?meta=getOrder| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shopperorders.shopperorders-1.html#getorder | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
export declare const useOrder: (apiOptions: NullableParameters<Argument<Client['getOrder']>>, queryOptions?: ApiQueryOptions<Client['getOrder']>) => UseQueryResult<DataType<Client['getOrder']>>;
/**
 * Gets the applicable payment methods for an existing order considering the open payment amount only.
 * @group ShopperOrders
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Orders `getPaymentMethodsForOrder` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-orders?meta=getPaymentMethodsForOrder| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shopperorders.shopperorders-1.html#getpaymentmethodsfororder | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
export declare const usePaymentMethodsForOrder: (apiOptions: NullableParameters<Argument<Client['getPaymentMethodsForOrder']>>, queryOptions?: ApiQueryOptions<Client['getPaymentMethodsForOrder']>) => UseQueryResult<DataType<Client['getPaymentMethodsForOrder']>>;
/**
 * This method gives you the external taxation data of the order transferred from the basket during
order creation. This endpoint can be called only if external taxation was used. See POST /baskets
for more information.
 * @group ShopperOrders
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Orders `getTaxesFromOrder` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-orders?meta=getTaxesFromOrder| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shopperorders.shopperorders-1.html#gettaxesfromorder | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
export declare const useTaxesFromOrder: (apiOptions: NullableParameters<Argument<Client['getTaxesFromOrder']>>, queryOptions?: ApiQueryOptions<Client['getTaxesFromOrder']>) => UseQueryResult<DataType<Client['getTaxesFromOrder']>>;
export {};
//# sourceMappingURL=query.d.ts.map