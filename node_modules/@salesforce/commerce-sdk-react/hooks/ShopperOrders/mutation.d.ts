import { ApiClients, Argument, DataType } from '../types';
import { UseMutationResult } from '@tanstack/react-query';
type Client = ApiClients['shopperOrders'];
/**
 * Mutations available for Shopper Orders
 * @group ShopperOrders
 * @category Mutation
 * @enum
 */
export declare const ShopperOrdersMutations: {
    /**
     * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Orders `createOrder` endpoint.
     */
    readonly CreateOrder: "createOrder";
    /**
   * Adds a payment instrument to an order.

Details:

The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
/baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
   * @returns A TanStack Query mutation hook for interacting with the Shopper Orders `createPaymentInstrumentForOrder` endpoint.
   */
    readonly CreatePaymentInstrumentForOrder: "createPaymentInstrumentForOrder";
    /**
     * Removes a payment instrument of an order.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Orders `removePaymentInstrumentFromOrder` endpoint.
     */
    readonly RemovePaymentInstrumentFromOrder: "removePaymentInstrumentFromOrder";
    /**
     * Updates a payment instrument of an order.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Orders `updatePaymentInstrumentForOrder` endpoint.
     */
    readonly UpdatePaymentInstrumentForOrder: "updatePaymentInstrumentForOrder";
};
/**
 * Mutation for Shopper Orders.
 * @group ShopperOrders
 * @category Mutation
 */
export type ShopperOrdersMutation = (typeof ShopperOrdersMutations)[keyof typeof ShopperOrdersMutations];
/**
 * Mutation hook for Shopper Orders.
 * @group ShopperOrders
 * @category Mutation
 */
export declare function useShopperOrdersMutation<Mutation extends ShopperOrdersMutation>(mutation: Mutation): UseMutationResult<DataType<Client[Mutation]>, unknown, Argument<Client[Mutation]>>;
export {};
//# sourceMappingURL=mutation.d.ts.map