import Auth from '../auth';
import { CommerceApiProviderProps } from '../provider';
import { Logger } from '../types';
import { OptionalCustomEndpointClientConfig, TMutationVariables } from './types';
/**
 * A helper function for handling bad responses from SCAPI when an invalid access token is used.
 *
 * Re-throws the error if it is not caused by an invalid access token
 * @param error - the error
 * @returns a new guest access token
 */
export declare const handleInvalidToken: (error: any, auth: Auth, logger: Logger) => Promise<import("commerce-sdk-isomorphic").ShopperLoginTypes.TokenResponse>;
/**
 * A helper function for preparing a call to the SCAPI custom API endpoint
 */
export declare const generateCustomEndpointOptions: (options: OptionalCustomEndpointClientConfig, config: Omit<CommerceApiProviderProps, 'children'>, access_token: string, args?: TMutationVariables | undefined) => {
    options: {
        method: string;
        parameters?: {
            [key: string]: string | number | boolean | string[] | number[];
        } | undefined;
        customApiPathParameters?: {
            apiName?: string | undefined;
            apiVersion?: string | undefined;
            endpointPath?: string | undefined;
            organizationId?: string | undefined;
            shortCode?: string | undefined;
        } | undefined;
        headers: {
            authorization?: string | undefined;
        } & {
            [key: string]: string;
        };
        body?: any;
    };
    clientConfig: {
        baseUri?: string | undefined;
        proxy: string;
        headers?: {
            [key: string]: string;
        } | undefined;
        parameters: import("commerce-sdk-isomorphic").helpers.CustomParams | {
            clientId: string;
            siteId: string;
            organizationId: string;
            shortCode: string;
        };
        fetchOptions?: any;
        transformRequest?: ((data: unknown, headers: {
            [key: string]: string;
        }) => any) | undefined;
        throwOnBadResponse: boolean;
    };
    rawResponse?: boolean | undefined;
};
//# sourceMappingURL=helpers.d.ts.map