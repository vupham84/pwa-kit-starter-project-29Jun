"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useQuery = exports.useCustomQuery = void 0;
var _reactQuery = require("@tanstack/react-query");
var _commerceSdkIsomorphic = require("commerce-sdk-isomorphic");
var _useAuthorizationHeader = require("./useAuthorizationHeader");
var _useAuthContext = _interopRequireDefault(require("./useAuthContext"));
var _useConfig = _interopRequireDefault(require("./useConfig"));
var _utils = require("./utils");
var _utils2 = require("../utils");
var _helpers = require("./helpers");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * Helper for query hooks, contains most of the logic in order to keep individual hooks small.
 * @param apiOptions - Options passed through to commerce-sdk-isomorphic
 * @param queryOptions - Options passed through to @tanstack/react-query
 * @param hookConfig - Config values that vary per API endpoint
 * @internal
 */
const useQuery = (apiOptions, queryOptions, hookConfig) => {
  const authenticatedMethod = (0, _useAuthorizationHeader.useAuthorizationHeader)(hookConfig.method);
  // This type assertion is NOT safe in all cases. However, we know that `requiredParameters` is
  // the list of parameters required by `Options`, and we know that in the default case (when
  // `queryOptions.enabled` is not set), we only execute the hook when `apiOptions` has all
  // required parameters. Therefore, we know that `apiOptions` satisfies `Options` in the default
  // case, so the type assertion is safe in the default case. We explicitly do NOT guarantee type
  // safety when `queryOptions.enabled` is set; when it is `true`, the callback may be called with
  // missing parameters. This will result in a runtime error. I think that this is an acceptable
  // trade-off, as the behavior is opt-in by the end user, and it feels like adding type safety
  // for this case would add significantly more complexity.
  const wrappedMethod = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* () {
      return yield authenticatedMethod(apiOptions);
    });
    return function wrappedMethod() {
      return _ref.apply(this, arguments);
    };
  }();
  return (0, _reactQuery.useQuery)(hookConfig.queryKey, wrappedMethod, _objectSpread(_objectSpread(_objectSpread({
    enabled:
    // Individual hooks can provide `enabled` checks that are done in ADDITION to
    // the required parameter check
    hookConfig.enabled !== false &&
    // The default `enabled` is "has all required parameters"
    (0, _utils.hasAllKeys)(apiOptions.parameters, hookConfig.requiredParameters)
  }, queryOptions), queryOptions !== null && queryOptions !== void 0 && queryOptions.retry ? {
    retry: (0, _utils2.onClient)() ? queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.retry : false
  } : {}), queryOptions !== null && queryOptions !== void 0 && queryOptions.retryOnMount ? {
    retryOnMount: (0, _utils2.onClient)() ? queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.retryOnMount : false
  } : {}));
};

/**
 * A hook for SCAPI custom endpoint queries.
 *
 * Besides calling custom endpoint, this hook does a few things for better DX.
 * 1. inject access token
 * 2. merge SCAPI client configurations from the CommerceApiProvider
 * @param apiOptions - Options passed through to commerce-sdk-isomorphic
 * @param queryOptions - Options passed through to @tanstack/react-query
 * @returns A TanStack Query query hook with data from the custom API endpoint.
 */
exports.useQuery = useQuery;
const useCustomQuery = (apiOptions, queryOptions) => {
  const config = (0, _useConfig.default)();
  const logger = config.logger || console;
  const auth = (0, _useAuthContext.default)();
  const callCustomEndpointWithAuth = options => {
    return /*#__PURE__*/_asyncToGenerator(function* () {
      const {
        access_token
      } = yield auth.ready();
      const customEndpointOptions = (0, _helpers.generateCustomEndpointOptions)(options, config, access_token);
      return yield _commerceSdkIsomorphic.helpers.callCustomEndpoint(customEndpointOptions).catch( /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator(function* (error) {
          const {
            access_token
          } = yield (0, _helpers.handleInvalidToken)(error, auth, logger);

          // Retry again after resetting auth state
          const customEndpointOptions = (0, _helpers.generateCustomEndpointOptions)(options, config, access_token);
          return yield _commerceSdkIsomorphic.helpers.callCustomEndpoint(customEndpointOptions);
        });
        return function (_x) {
          return _ref3.apply(this, arguments);
        };
      }());
    });
  };
  if (!apiOptions.options.customApiPathParameters || !apiOptions.options.customApiPathParameters.apiName || !apiOptions.options.customApiPathParameters.apiVersion || !apiOptions.options.customApiPathParameters.endpointPath) {
    throw new Error('options.customApiPathParameters are required for useCustomQuery');
  }

  // Following the query key convention in this repo, the first element of the query key is a static prefix
  // the following elements are the path components of the endpoint
  const queryKey = ['/commerce-sdk-react', '/custom', `/${apiOptions.options.customApiPathParameters.apiName}`, `/${apiOptions.options.customApiPathParameters.apiVersion}`, `/organizations`, `/${apiOptions.options.customApiPathParameters.organizationId || config.organizationId}`, `/${apiOptions.options.customApiPathParameters.endpointPath}`, _objectSpread({}, apiOptions.options.parameters)];
  return (0, _reactQuery.useQuery)(queryKey, callCustomEndpointWithAuth(apiOptions), queryOptions);
};
exports.useCustomQuery = useCustomQuery;