"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateCache = exports.pickValidParams = exports.pick = exports.pathStartsWith = exports.omitNullableParameters = exports.omitNullable = exports.mergeOptions = exports.isObject = exports.hasAllKeys = exports.getCustomKeys = exports.clone = exports.and = exports.NotImplementedError = void 0;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

/** Applies the set of cache updates to the query client. */
const updateCache = (queryClient, cacheUpdates, data) => {
  var _cacheUpdates$invalid, _cacheUpdates$remove, _cacheUpdates$update;
  (_cacheUpdates$invalid = cacheUpdates.invalidate) === null || _cacheUpdates$invalid === void 0 ? void 0 : _cacheUpdates$invalid.forEach(invalidate => {
    // TODO: Fix floating promises (convert updateCache to async)
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    queryClient.invalidateQueries(invalidate);
  });
  (_cacheUpdates$remove = cacheUpdates.remove) === null || _cacheUpdates$remove === void 0 ? void 0 : _cacheUpdates$remove.forEach(remove => {
    queryClient.removeQueries(remove);
  });
  (_cacheUpdates$update = cacheUpdates.update) === null || _cacheUpdates$update === void 0 ? void 0 : _cacheUpdates$update.forEach(({
    queryKey,
    updater
  }) =>
  // If an updater isn't given, fall back to just setting the data
  queryClient.setQueryData(queryKey, updater ?? data));
};

/** Error thrown when a method is not implemented. */
exports.updateCache = updateCache;
class NotImplementedError extends Error {
  constructor(method = 'This method') {
    super(`${method} is not implemented.`);
  }
}

/** Determines whether a value is an object. */
exports.NotImplementedError = NotImplementedError;
const isObject = obj => typeof obj === 'object' && obj !== null;

/** Determines whether a value has all of the given keys. */
exports.isObject = isObject;
const hasAllKeys = (object, keys) => keys.every(key => object[key] !== undefined && object[key] !== null);

/** Creates a query predicate that determines whether a query key starts with the given path segments. */
exports.hasAllKeys = hasAllKeys;
const pathStartsWith = search => ({
  queryKey
}) => queryKey.length >= search.length && search.every((lookup, idx) => queryKey[idx] === lookup);

/** Creates a query predicate that returns true if all of the given predicates return true. */
exports.pathStartsWith = pathStartsWith;
const and = (...funcs) => (...args) => funcs.every(fn => fn(...args));

/**
 * Merges headers and parameters from client config into the options, mimicking the behavior
 * of commerce-sdk-isomorphic.
 */
exports.and = and;
const mergeOptions = (client, options) => {
  const merged = _objectSpread(_objectSpread({}, 'body' in options ?
  // I'm not entirely sure why these type assertions are necessary. It seems likely that
  // the type definitions are more complex than they need to be.
  {
    body: options.body
  } : {}), {}, {
    parameters: _objectSpread(_objectSpread({}, client.clientConfig.parameters), options.parameters ? omitNullable(options.parameters) : {}),
    headers: _objectSpread(_objectSpread({}, client.clientConfig.headers), options.headers)
  });
  return merged;
};

/** Constructs a subset of the given object containing only the given keys. */
exports.mergeOptions = mergeOptions;
const pick = (obj, keys) => {
  // Assertion is not true, yet, but we make it so!
  const picked = {};
  keys.forEach(key => {
    if (key in obj) {
      // Skip assigning optional/missing parameters
      picked[key] = obj[key];
    }
  });
  return picked;
};

/** Get a subset of the given parameters that has the given keys and may contain a custom parameter. */
exports.pick = pick;
const pickValidParams = (parameters, endpointParamKeys) => {
  const customKeys = getCustomKeys(parameters);
  const keys = [...endpointParamKeys, ...customKeys];
  return pick(parameters, keys);
};

/** Removes keys with `null` or `undefined` values from the given object. */
exports.pickValidParams = pickValidParams;
const omitNullable = obj => {
  // Assertion is not true, yet, but we make it so!
  const stripped = {};
  // Assertion because `Object.entries` is limited :\
  const entries = Object.entries(obj);
  for (const [key, value] of entries) {
    if (value !== null && value !== undefined) stripped[key] = value;
  }
  return stripped;
};

/** Removes keys with `null` or `undefined` values from the `parameters` of the given object. */
exports.omitNullable = omitNullable;
const omitNullableParameters = obj => _objectSpread(_objectSpread({}, obj), {}, {
  // Without the explicit generic parameter, the generic is inferred as `object`,
  // the connection to `T` is lost, and TypeScript complains.
  parameters: omitNullable(obj.parameters)
});

/** Simple deep clone utility */
exports.omitNullableParameters = omitNullableParameters;
const clone = val => {
  if (typeof val !== 'object' || val === null) return val;
  if (Array.isArray(val)) return val.map(clone);
  const entries = Object.entries(val).map(([k, v]) => [k, clone(v)]);
  return Object.fromEntries(entries);
};

/** get a list of custom key starting with c_**/
exports.clone = clone;
const getCustomKeys = obj => {
  if (typeof obj !== 'object' || obj === null) {
    throw new Error('Invalid input. Expecting an object as an input.');
  }
  return Object.keys(obj).filter(key => key.startsWith('c_'));
};
exports.getCustomKeys = getCustomKeys;