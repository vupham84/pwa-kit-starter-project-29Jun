import { UseQueryOptions } from '@tanstack/react-query';
import { ApiClient, ApiMethod, ApiOptions, ApiQueryKey, ApiQueryOptions, MergedOptions, NullableParameters, OmitNullableParameters, OptionalCustomEndpointClientConfig } from './types';
/**
 * Helper for query hooks, contains most of the logic in order to keep individual hooks small.
 * @param apiOptions - Options passed through to commerce-sdk-isomorphic
 * @param queryOptions - Options passed through to @tanstack/react-query
 * @param hookConfig - Config values that vary per API endpoint
 * @internal
 */
export declare const useQuery: <Client extends ApiClient, Options extends ApiOptions<Record<string, unknown>, unknown[] | Record<string, unknown> | undefined, Record<string, string>>, Data>(apiOptions: OmitNullableParameters<NullableParameters<Required<ApiOptions<NonNullable<Client["clientConfig"]["parameters"] & Options["parameters"]>, unknown extends Options["body"] ? never : Options["body"], NonNullable<Client["clientConfig"]["headers"] & Options["headers"]>>>>>, queryOptions: ApiQueryOptions<ApiMethod<Options, Data>>, hookConfig: {
    method: ApiMethod<Options, Data>;
    queryKey: ApiQueryKey<Partial<Options["parameters"]>>;
    requiredParameters: readonly (keyof NonNullable<Options["parameters"]>)[];
    enabled?: boolean | undefined;
}) => import("@tanstack/react-query").UseQueryResult<Data, unknown>;
/**
 * A hook for SCAPI custom endpoint queries.
 *
 * Besides calling custom endpoint, this hook does a few things for better DX.
 * 1. inject access token
 * 2. merge SCAPI client configurations from the CommerceApiProvider
 * @param apiOptions - Options passed through to commerce-sdk-isomorphic
 * @param queryOptions - Options passed through to @tanstack/react-query
 * @returns A TanStack Query query hook with data from the custom API endpoint.
 */
export declare const useCustomQuery: (apiOptions: OptionalCustomEndpointClientConfig, queryOptions?: UseQueryOptions<unknown, unknown, unknown, any>) => import("@tanstack/react-query").UseQueryResult<unknown, unknown>;
//# sourceMappingURL=useQuery.d.ts.map