"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleInvalidToken = exports.generateCustomEndpointOptions = void 0;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/*
 * Copyright (c) 2024, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

/**
 * A helper function for handling bad responses from SCAPI when an invalid access token is used.
 *
 * Re-throws the error if it is not caused by an invalid access token
 * @param error - the error
 * @returns a new guest access token
 */
const handleInvalidToken = exports.handleInvalidToken = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (error, auth, logger) {
    var _error$response, _error$response2;
    if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) !== 401) {
      throw error;
    }
    const response = yield error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.json();
    if ((response === null || response === void 0 ? void 0 : response.detail) !== 'Customer credentials changed after token was issued.') {
      throw error;
    }
    logger.info('Login was invalidated. Clearing login state.');
    return yield auth.logout();
  });
  return function handleInvalidToken(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * A helper function for preparing a call to the SCAPI custom API endpoint
 */
const generateCustomEndpointOptions = (options, config, access_token, args) => {
  var _options$options, _options$options2;
  const globalHeaders = config.headers || {};
  const globalClientConfig = {
    parameters: {
      clientId: config.clientId,
      siteId: config.siteId,
      organizationId: config.organizationId,
      shortCode: config.shortCode
    },
    proxy: config.proxy,
    throwOnBadResponse: true
  };
  return _objectSpread(_objectSpread({}, options), {}, {
    options: _objectSpread({
      method: ((_options$options = options.options) === null || _options$options === void 0 ? void 0 : _options$options.method) || 'GET',
      headers: _objectSpread(_objectSpread(_objectSpread({
        Authorization: `Bearer ${access_token}`
      }, globalHeaders), (_options$options2 = options.options) === null || _options$options2 === void 0 ? void 0 : _options$options2.headers), args !== null && args !== void 0 && args.headers ? args.headers : {})
    }, options.options),
    clientConfig: _objectSpread(_objectSpread({}, globalClientConfig), options.clientConfig || {})
  });
};
exports.generateCustomEndpointOptions = generateCustomEndpointOptions;