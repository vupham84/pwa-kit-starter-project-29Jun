import { ShopperProducts } from 'commerce-sdk-isomorphic';
import { Argument, ExcludeTail } from '../types';
type Client = ShopperProducts<{
    shortCode: string;
}>;
type Params<T extends keyof QueryKeys> = Partial<Argument<Client[T]>['parameters']>;
export type QueryKeys = {
    getProducts: [
        '/commerce-sdk-react',
        '/organizations/',
        string | undefined,
        '/products',
        Params<'getProducts'>
    ];
    getProduct: [
        '/commerce-sdk-react',
        '/organizations/',
        string | undefined,
        '/products/',
        string | undefined,
        Params<'getProduct'>
    ];
    getCategories: [
        '/commerce-sdk-react',
        '/organizations/',
        string | undefined,
        '/categories',
        Params<'getCategories'>
    ];
    getCategory: [
        '/commerce-sdk-react',
        '/organizations/',
        string | undefined,
        '/categories/',
        string | undefined,
        Params<'getCategory'>
    ];
};
type QueryKeyHelper<T extends keyof QueryKeys> = {
    /** Generates the path component of the query key for an endpoint. */
    path: (params: Params<T>) => ExcludeTail<QueryKeys[T]>;
    /** Generates the full query key for an endpoint. */
    queryKey: (params: Params<T>) => QueryKeys[T];
};
export declare const getProducts: QueryKeyHelper<'getProducts'>;
export declare const getProduct: QueryKeyHelper<'getProduct'>;
export declare const getCategories: QueryKeyHelper<'getCategories'>;
export declare const getCategory: QueryKeyHelper<'getCategory'>;
export {};
//# sourceMappingURL=queryKeyHelpers.d.ts.map