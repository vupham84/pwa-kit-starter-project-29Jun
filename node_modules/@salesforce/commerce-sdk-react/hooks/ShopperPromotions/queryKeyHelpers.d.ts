import { ShopperPromotions } from 'commerce-sdk-isomorphic';
import { Argument, ExcludeTail } from '../types';
type Client = ShopperPromotions<{
    shortCode: string;
}>;
type Params<T extends keyof QueryKeys> = Partial<Argument<Client[T]>['parameters']>;
export type QueryKeys = {
    getPromotions: [
        '/commerce-sdk-react',
        '/organizations/',
        string | undefined,
        '/promotions',
        Params<'getPromotions'>
    ];
    getPromotionsForCampaign: [
        '/commerce-sdk-react',
        '/organizations/',
        string | undefined,
        '/promotions/campaigns/',
        string | undefined,
        Params<'getPromotionsForCampaign'>
    ];
};
type QueryKeyHelper<T extends keyof QueryKeys> = {
    /** Generates the path component of the query key for an endpoint. */
    path: (params: Params<T>) => ExcludeTail<QueryKeys[T]>;
    /** Generates the full query key for an endpoint. */
    queryKey: (params: Params<T>) => QueryKeys[T];
};
export declare const getPromotions: QueryKeyHelper<'getPromotions'>;
export declare const getPromotionsForCampaign: QueryKeyHelper<'getPromotionsForCampaign'>;
export {};
//# sourceMappingURL=queryKeyHelpers.d.ts.map