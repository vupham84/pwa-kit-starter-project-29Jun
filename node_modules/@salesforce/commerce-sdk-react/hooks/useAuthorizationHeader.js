"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAuthorizationHeader = void 0;
var _useAuthContext = _interopRequireDefault(require("./useAuthContext"));
var _useConfig = _interopRequireDefault(require("./useConfig"));
var _helpers = require("./helpers");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * Creates a method that waits for authentication to complete and automatically includes an
 * Authorization header when making requests.
 *
 * Also inserts a retry if the authentication token was invalidated
 *
 * @param method Bound API method
 * @internal
 */
const useAuthorizationHeader = method => {
  const auth = (0, _useAuthContext.default)();
  const config = (0, _useConfig.default)();
  const logger = config.logger || console;
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (options) {
      const {
        access_token
      } = yield auth.ready();
      return yield method(_objectSpread(_objectSpread({}, options), {}, {
        headers: _objectSpread({
          Authorization: `Bearer ${access_token}`
        }, options.headers)
      })).catch( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator(function* (error) {
          const {
            access_token
          } = yield (0, _helpers.handleInvalidToken)(error, auth, logger);

          // Retry again after resetting auth state
          return yield method(_objectSpread(_objectSpread({}, options), {}, {
            headers: _objectSpread({
              Authorization: `Bearer ${access_token}`
            }, options.headers)
          }));
        });
        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }());
    });
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};
exports.useAuthorizationHeader = useAuthorizationHeader;