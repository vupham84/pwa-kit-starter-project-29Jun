import { ApiClients, Argument, DataType } from '../types';
import { UseMutationResult } from '@tanstack/react-query';
type Client = ApiClients['shopperCustomers'];
/**
 * Mutations available for Shopper Customers.
 * @group ShopperCustomers
 * @category Mutation
 * @enum
 */
export declare const ShopperCustomersMutations: {
    /**
     * Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\".
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `registerCustomer` endpoint.
     */
    readonly RegisterCustomer: "registerCustomer";
    /**
     * Reset customer password, after obtaining a reset token. This is the second step in the reset customer password flow, where a customer password is reset by providing the new credentials along with a reset token. This call should be preceded by a call to the /create-reset-token endpoint.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `resetPassword` endpoint.
     */
    readonly ResetPassword: "resetPassword";
    /**
     * Get reset password token. This is the first step in the reset customer password flow, where a password reset token is requested for future use to reset a customer password. This call should be followed by a call to the /reset endpoint.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `getResetPasswordToken` endpoint.
     */
    readonly GetResetPasswordToken: "getResetPasswordToken";
    /**
     * Updates a customer.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `updateCustomer` endpoint.
     */
    readonly UpdateCustomer: "updateCustomer";
    /**
     * Creates a new address with the given name for the given customer.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `createCustomerAddress` endpoint.
     */
    readonly CreateCustomerAddress: "createCustomerAddress";
    /**
     * Deletes a customer's address by address name.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `removeCustomerAddress` endpoint.
     */
    readonly RemoveCustomerAddress: "removeCustomerAddress";
    /**
     * Updates a customer's address by address name.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `updateCustomerAddress` endpoint.
     */
    readonly UpdateCustomerAddress: "updateCustomerAddress";
    /**
     * Updates the customer's password.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `updateCustomerPassword` endpoint.
     */
    readonly UpdateCustomerPassword: "updateCustomerPassword";
    /**
     * Adds a payment instrument to the customer information.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `createCustomerPaymentInstrument` endpoint.
     */
    readonly CreateCustomerPaymentInstrument: "createCustomerPaymentInstrument";
    /**
     * Deletes a customer's payment instrument.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `deleteCustomerPaymentInstrument` endpoint.
     */
    readonly DeleteCustomerPaymentInstrument: "deleteCustomerPaymentInstrument";
    /**
     * Creates a customer product list.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `createCustomerProductList` endpoint.
     */
    readonly CreateCustomerProductList: "createCustomerProductList";
    /**
     * Deletes a customer product list.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `deleteCustomerProductList` endpoint.
     */
    readonly DeleteCustomerProductList: "deleteCustomerProductList";
    /**
     * Changes a product list. Changeable properties are the name, description, and if the list is public.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `updateCustomerProductList` endpoint.
     */
    readonly UpdateCustomerProductList: "updateCustomerProductList";
    /**
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `createCustomerProductListItem` endpoint.
     */
    readonly CreateCustomerProductListItem: "createCustomerProductListItem";
    /**
     * Removes an item from a customer product list.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Customers `deleteCustomerProductListItem` endpoint.
     */
    readonly DeleteCustomerProductListItem: "deleteCustomerProductListItem";
    /**
     * Updates an item of a customer's product list.
     */
    readonly UpdateCustomerProductListItem: "updateCustomerProductListItem";
};
/**
 * Mutation for Shopper Customers.
 * @group ShopperCustomers
 * @category Mutation
 */
export type ShopperCustomersMutation = (typeof ShopperCustomersMutations)[keyof typeof ShopperCustomersMutations];
/**
 * Mutation hook for Shopper Customers.
 * @group ShopperCustomers
 * @category Mutation
 */
export declare function useShopperCustomersMutation<Mutation extends ShopperCustomersMutation>(mutation: Mutation): UseMutationResult<DataType<Client[Mutation]>, unknown, Argument<Client[Mutation]>>;
export {};
//# sourceMappingURL=mutation.d.ts.map