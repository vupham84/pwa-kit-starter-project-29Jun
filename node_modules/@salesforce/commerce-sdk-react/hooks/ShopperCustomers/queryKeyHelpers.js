"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPublicProductListsBySearchTerm = exports.getPublicProductList = exports.getProductListItem = exports.getCustomerProductLists = exports.getCustomerProductListItem = exports.getCustomerProductList = exports.getCustomerPaymentInstrument = exports.getCustomerOrders = exports.getCustomerBaskets = exports.getCustomerAddress = exports.getCustomer = void 0;
var _commerceSdkIsomorphic = require("commerce-sdk-isomorphic");
var _utils = require("../utils");
/*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

// We must use a client with no parameters in order to have required/optional match the API spec

// This is defined here, rather than `types.ts`, because it relies on `Client` and `QueryKeys`,
// and making those generic would add too much complexity.

// TODO: Re-implement (and update description from RAML spec) when the endpoint exits closed beta.
// export const getExternalProfile: QueryKeyHelper<'getExternalProfile'> = {
//     queryKey: (params: Params<'getExternalProfile'>) => {
//         return [...getExternalProfile.path(params), pickValidParams(params, ShopperCustomers.paramKeys.getExternalProfile)]
//     }
// }

const getCustomer = exports.getCustomer = {
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId],
  queryKey: params => {
    return [...getCustomer.path(params), (0, _utils.pickValidParams)(params, _commerceSdkIsomorphic.ShopperCustomers.paramKeys.getCustomer)];
  }
};
const getCustomerAddress = exports.getCustomerAddress = {
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/addresses/', params.addressName],
  queryKey: params => {
    return [...getCustomerAddress.path(params), (0, _utils.pickValidParams)(params, _commerceSdkIsomorphic.ShopperCustomers.paramKeys.getCustomerAddress)];
  }
};
const getCustomerBaskets = exports.getCustomerBaskets = {
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/baskets'],
  queryKey: params => {
    return [...getCustomerBaskets.path(params), (0, _utils.pickValidParams)(params, _commerceSdkIsomorphic.ShopperCustomers.paramKeys.getCustomerBaskets)];
  }
};
const getCustomerOrders = exports.getCustomerOrders = {
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/orders'],
  queryKey: params => {
    return [...getCustomerOrders.path(params), (0, _utils.pickValidParams)(params, _commerceSdkIsomorphic.ShopperCustomers.paramKeys.getCustomerOrders)];
  }
};
const getCustomerPaymentInstrument = exports.getCustomerPaymentInstrument = {
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/payment-instruments/', params.paymentInstrumentId],
  queryKey: params => {
    return [...getCustomerPaymentInstrument.path(params), (0, _utils.pickValidParams)(params, _commerceSdkIsomorphic.ShopperCustomers.paramKeys.getCustomerPaymentInstrument)];
  }
};
const getCustomerProductLists = exports.getCustomerProductLists = {
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/product-lists'],
  queryKey: params => {
    return [...getCustomerProductLists.path(params), (0, _utils.pickValidParams)(params, _commerceSdkIsomorphic.ShopperCustomers.paramKeys.getCustomerProductLists)];
  }
};
const getCustomerProductList = exports.getCustomerProductList = {
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/product-lists/', params.listId],
  queryKey: params => {
    return [...getCustomerProductList.path(params), (0, _utils.pickValidParams)(params, _commerceSdkIsomorphic.ShopperCustomers.paramKeys.getCustomerProductList)];
  }
};
const getCustomerProductListItem = exports.getCustomerProductListItem = {
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/product-lists/', params.listId, '/items/', params.itemId],
  queryKey: params => {
    return [...getCustomerProductListItem.path(params), (0, _utils.pickValidParams)(params, _commerceSdkIsomorphic.ShopperCustomers.paramKeys.getCustomerProductListItem)];
  }
};
const getPublicProductListsBySearchTerm = exports.getPublicProductListsBySearchTerm = {
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/product-lists'],
  queryKey: params => {
    return [...getPublicProductListsBySearchTerm.path(params), (0, _utils.pickValidParams)(params, _commerceSdkIsomorphic.ShopperCustomers.paramKeys.getPublicProductListsBySearchTerm)];
  }
};
const getPublicProductList = exports.getPublicProductList = {
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/product-lists/', params.listId],
  queryKey: params => {
    return [...getPublicProductList.path(params), (0, _utils.pickValidParams)(params, _commerceSdkIsomorphic.ShopperCustomers.paramKeys.getPublicProductList)];
  }
};
const getProductListItem = exports.getProductListItem = {
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/product-lists/', params.listId, '/items/', params.itemId],
  queryKey: params => {
    return [...getProductListItem.path(params), (0, _utils.pickValidParams)(params, _commerceSdkIsomorphic.ShopperCustomers.paramKeys.getProductListItem)];
  }
};