"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePublicProductListsBySearchTerm = exports.usePublicProductList = exports.useProductListItem = exports.useCustomerProductLists = exports.useCustomerProductListItem = exports.useCustomerProductList = exports.useCustomerPaymentInstrument = exports.useCustomerOrders = exports.useCustomerBaskets = exports.useCustomerAddress = exports.useCustomer = void 0;
var _commerceSdkIsomorphic = require("commerce-sdk-isomorphic");
var _useCommerceApi = _interopRequireDefault(require("../useCommerceApi"));
var _useQuery = require("../useQuery");
var _utils = require("../utils");
var queryKeyHelpers = _interopRequireWildcard(require("./queryKeyHelpers"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
// TODO: Re-implement (and update description from RAML spec) when the endpoint exits closed beta.
// /**
//  * Gets the new external profile for a customer.This endpoint is in closed beta, available to select few customers. Please get in touch with your Account Team if you'd like to participate in the beta program
//  * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
//  * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
//  * @returns A TanStack Query query hook with data from the Shopper Customers `getExternalProfile` endpoint.
//  * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getExternalProfile| Salesforce Developer Center} for more information about the API endpoint.
//  * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getexternalprofile | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
//  * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
//  */
// export const useExternalProfile = (
//     apiOptions: NullableParameters<Argument<Client['getExternalProfile']>>,
//     queryOptions: ApiQueryOptions<Client['getExternalProfile']> = {}
// ): UseQueryResult<DataType<Client['getExternalProfile']>> => {
//     type Options = Argument<Client['getExternalProfile']>
//     type Data = DataType<Client['getExternalProfile']>
//     const {shopperCustomers: client} = useCommerceApi()
//     const methodName = 'getExternalProfile'
//     const requiredParameters = ShopperCustomers.paramKeys[`${methodName}Required`]

//     // Parameters can be set in `apiOptions` or `client.clientConfig`;
//     // we must merge them in order to generate the correct query key.
//     const netOptions = omitNullableParameters(mergeOptions(client, apiOptions))
//     const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters)
//     // We don't use `netOptions` here because we manipulate the options in `useQuery`.
//     const method = async (options: Options) => await client[methodName](options)

//     // For some reason, if we don't explicitly set these generic parameters, the inferred type for
//     // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
//     return useQuery<Client, Options, Data>(netOptions, queryOptions, {
//         method,
//         queryKey,
//         requiredParameters
//     })
// }

/**
 * Gets a customer's information.
 *
 * @group ShopperCustomers
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Customers `getCustomer` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getCustomer| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getcustomer | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
const useCustomer = (apiOptions, queryOptions = {}) => {
  const {
    shopperCustomers: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getCustomer';
  const requiredParameters = _commerceSdkIsomorphic.ShopperCustomers.paramKeys[`${methodName}Required`];
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const parameters = (0, _utils.pickValidParams)(netOptions.parameters, _commerceSdkIsomorphic.ShopperCustomers.paramKeys[methodName]);
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  queryOptions.meta = _objectSpread({
    displayName: 'useCustomer'
  }, queryOptions.meta);

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(_objectSpread(_objectSpread({}, netOptions), {}, {
    parameters
  }), queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
/**
 * Retrieves a customer's address by address name.
 * @group ShopperCustomers
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Customers `getCustomerAddress` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getCustomerAddress| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getcustomeraddress | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
exports.useCustomer = useCustomer;
const useCustomerAddress = (apiOptions, queryOptions = {}) => {
  const {
    shopperCustomers: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getCustomerAddress';
  const requiredParameters = _commerceSdkIsomorphic.ShopperCustomers.paramKeys[`${methodName}Required`];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const parameters = (0, _utils.pickValidParams)(netOptions.parameters, _commerceSdkIsomorphic.ShopperCustomers.paramKeys[methodName]);
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  queryOptions.meta = _objectSpread({
    displayName: 'useCustomerAddress'
  }, queryOptions.meta);

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(_objectSpread(_objectSpread({}, netOptions), {}, {
    parameters
  }), queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
/**
 * Gets the baskets of a customer.
 * @group ShopperCustomers
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Customers `getCustomerBaskets` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getCustomerBaskets| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getcustomerbaskets | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
exports.useCustomerAddress = useCustomerAddress;
const useCustomerBaskets = (apiOptions, queryOptions = {}) => {
  const {
    shopperCustomers: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getCustomerBaskets';
  const requiredParameters = _commerceSdkIsomorphic.ShopperCustomers.paramKeys[`${methodName}Required`];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const parameters = (0, _utils.pickValidParams)(netOptions.parameters, _commerceSdkIsomorphic.ShopperCustomers.paramKeys[methodName]);
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  queryOptions.meta = _objectSpread({
    displayName: 'useCustomerBaskets'
  }, queryOptions.meta);

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(_objectSpread(_objectSpread({}, netOptions), {}, {
    parameters
  }), queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
/**
 * Returns a pageable list of all customer's orders.
 *
 * The default page size is 10.
 * @group ShopperCustomers
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Customers `getCustomerOrders` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getCustomerOrders| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getcustomerorders | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
exports.useCustomerBaskets = useCustomerBaskets;
const useCustomerOrders = (apiOptions, queryOptions = {}) => {
  const {
    shopperCustomers: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getCustomerOrders';
  const requiredParameters = _commerceSdkIsomorphic.ShopperCustomers.paramKeys[`${methodName}Required`];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const parameters = (0, _utils.pickValidParams)(netOptions.parameters, _commerceSdkIsomorphic.ShopperCustomers.paramKeys[methodName]);
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the option in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x4) {
      return _ref4.apply(this, arguments);
    };
  }();
  queryOptions.meta = _objectSpread({
    displayName: 'useCustomerOrders'
  }, queryOptions.meta);

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(_objectSpread(_objectSpread({}, netOptions), {}, {
    parameters
  }), queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
/**
 * Retrieves a customer's payment instrument by its ID.
 * @group ShopperCustomers
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Customers `getCustomerPaymentInstrument` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getCustomerPaymentInstrument| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getcustomerpaymentinstrument | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
exports.useCustomerOrders = useCustomerOrders;
const useCustomerPaymentInstrument = (apiOptions, queryOptions = {}) => {
  const {
    shopperCustomers: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getCustomerPaymentInstrument';
  const requiredParameters = _commerceSdkIsomorphic.ShopperCustomers.paramKeys[`${methodName}Required`];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const parameters = (0, _utils.pickValidParams)(netOptions.parameters, _commerceSdkIsomorphic.ShopperCustomers.paramKeys[methodName]);
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x5) {
      return _ref5.apply(this, arguments);
    };
  }();
  queryOptions.meta = _objectSpread({
    displayName: 'useCustomerPaymentInstrument'
  }, queryOptions.meta);

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(_objectSpread(_objectSpread({}, netOptions), {}, {
    parameters
  }), queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
/**
 * Returns all customer product lists.
 * @group ShopperCustomers
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Customers `getCustomerProductLists` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getCustomerProductLists| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getcustomerproductlists | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
exports.useCustomerPaymentInstrument = useCustomerPaymentInstrument;
const useCustomerProductLists = (apiOptions, queryOptions = {}) => {
  const {
    shopperCustomers: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getCustomerProductLists';
  const requiredParameters = _commerceSdkIsomorphic.ShopperCustomers.paramKeys[`${methodName}Required`];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const parameters = (0, _utils.pickValidParams)(netOptions.parameters, _commerceSdkIsomorphic.ShopperCustomers.paramKeys[methodName]);
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x6) {
      return _ref6.apply(this, arguments);
    };
  }();
  queryOptions.meta = _objectSpread({
    displayName: 'useCustomerProductLists'
  }, queryOptions.meta);

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(_objectSpread(_objectSpread({}, netOptions), {}, {
    parameters
  }), queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
/**
 * Returns a customer product list of the given customer and the items in the list.
 * @group ShopperCustomers
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Customers `getCustomerProductList` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getCustomerProductList| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getcustomerproductlist | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
exports.useCustomerProductLists = useCustomerProductLists;
const useCustomerProductList = (apiOptions, queryOptions = {}) => {
  const {
    shopperCustomers: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getCustomerProductList';
  const requiredParameters = _commerceSdkIsomorphic.ShopperCustomers.paramKeys[`${methodName}Required`];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const parameters = (0, _utils.pickValidParams)(netOptions.parameters, _commerceSdkIsomorphic.ShopperCustomers.paramKeys[methodName]);
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x7) {
      return _ref7.apply(this, arguments);
    };
  }();
  queryOptions.meta = _objectSpread({
    displayName: 'useCustomerProductList'
  }, queryOptions.meta);

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(_objectSpread(_objectSpread({}, netOptions), {}, {
    parameters
  }), queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
/**
 * Returns an item of a customer product list and the actual product details like image, availability and price.
 * @group ShopperCustomers
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Customers `getCustomerProductListItem` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getCustomerProductListItem| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getcustomerproductlistitem | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
exports.useCustomerProductList = useCustomerProductList;
const useCustomerProductListItem = (apiOptions, queryOptions = {}) => {
  const {
    shopperCustomers: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getCustomerProductListItem';
  const requiredParameters = _commerceSdkIsomorphic.ShopperCustomers.paramKeys[`${methodName}Required`];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const parameters = (0, _utils.pickValidParams)(netOptions.parameters, _commerceSdkIsomorphic.ShopperCustomers.paramKeys[methodName]);
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x8) {
      return _ref8.apply(this, arguments);
    };
  }();
  queryOptions.meta = _objectSpread({
    displayName: 'useCustomerProductListItem'
  }, queryOptions.meta);

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(_objectSpread(_objectSpread({}, netOptions), {}, {
    parameters
  }), queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
/**
 * Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name).
 * @group ShopperCustomers
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Customers `getPublicProductListsBySearchTerm` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getPublicProductListsBySearchTerm| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getpublicproductlistsbysearchterm | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
exports.useCustomerProductListItem = useCustomerProductListItem;
const usePublicProductListsBySearchTerm = (apiOptions, queryOptions = {}) => {
  const {
    shopperCustomers: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getPublicProductListsBySearchTerm';
  const requiredParameters = _commerceSdkIsomorphic.ShopperCustomers.paramKeys[`${methodName}Required`];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const parameters = (0, _utils.pickValidParams)(netOptions.parameters, _commerceSdkIsomorphic.ShopperCustomers.paramKeys[methodName]);
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref9 = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x9) {
      return _ref9.apply(this, arguments);
    };
  }();
  queryOptions.meta = _objectSpread({
    displayName: 'usePublicProductListsBySearchTerm'
  }, queryOptions.meta);

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(_objectSpread(_objectSpread({}, netOptions), {}, {
    parameters
  }), queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
/**
 * Retrieves a public product list by ID and the items under that product list.
 * @group ShopperCustomers
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Customers `getPublicProductList` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getPublicProductList| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getpublicproductlist | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
exports.usePublicProductListsBySearchTerm = usePublicProductListsBySearchTerm;
const usePublicProductList = (apiOptions, queryOptions = {}) => {
  const {
    shopperCustomers: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getPublicProductList';
  const requiredParameters = _commerceSdkIsomorphic.ShopperCustomers.paramKeys[`${methodName}Required`];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const parameters = (0, _utils.pickValidParams)(netOptions.parameters, _commerceSdkIsomorphic.ShopperCustomers.paramKeys[methodName]);
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref10 = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x10) {
      return _ref10.apply(this, arguments);
    };
  }();
  queryOptions.meta = _objectSpread({
    displayName: 'usePublicProductList'
  }, queryOptions.meta);

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(_objectSpread(_objectSpread({}, netOptions), {}, {
    parameters
  }), queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
/**
 * Retrieves an item from a public product list and the actual product details like product, image, availability and price.
 * @group ShopperCustomers
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Customers `getProductListItem` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=getProductListItem| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppercustomers.shoppercustomers-1.html#getproductlistitem | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
exports.usePublicProductList = usePublicProductList;
const useProductListItem = (apiOptions, queryOptions = {}) => {
  const {
    shopperCustomers: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getProductListItem';
  const requiredParameters = _commerceSdkIsomorphic.ShopperCustomers.paramKeys[`${methodName}Required`];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const parameters = (0, _utils.pickValidParams)(netOptions.parameters, _commerceSdkIsomorphic.ShopperCustomers.paramKeys[methodName]);
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref11 = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x11) {
      return _ref11.apply(this, arguments);
    };
  }();
  queryOptions.meta = _objectSpread({
    displayName: 'useProductListItem'
  }, queryOptions.meta);

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(_objectSpread(_objectSpread({}, netOptions), {}, {
    parameters
  }), queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
exports.useProductListItem = useProductListItem;