import { Query, QueryClient } from '@tanstack/react-query';
import { ApiClient, ApiOptions, CacheUpdate, MergedOptions, NullToOptional, OmitNullableParameters } from './types';
/** Applies the set of cache updates to the query client. */
export declare const updateCache: (queryClient: QueryClient, cacheUpdates: CacheUpdate, data: unknown) => void;
/** Error thrown when a method is not implemented. */
export declare class NotImplementedError extends Error {
    constructor(method?: string);
}
/** Determines whether a value is an object. */
export declare const isObject: (obj: unknown) => obj is Record<string, unknown>;
/** Determines whether a value has all of the given keys. */
export declare const hasAllKeys: <T>(object: T, keys: readonly (keyof T)[]) => boolean;
/** Creates a query predicate that determines whether a query key starts with the given path segments. */
export declare const pathStartsWith: (search: readonly (string | undefined)[]) => ({ queryKey }: Query) => boolean;
/** Creates a query predicate that returns true if all of the given predicates return true. */
export declare const and: <Args extends unknown[]>(...funcs: ((...args: Args) => boolean)[]) => (...args: Args) => boolean;
/**
 * Merges headers and parameters from client config into the options, mimicking the behavior
 * of commerce-sdk-isomorphic.
 */
export declare const mergeOptions: <Client extends ApiClient, Options extends ApiOptions<Record<string, unknown>, unknown[] | Record<string, unknown> | undefined, Record<string, string>>>(client: Client, options: Options) => Required<ApiOptions<NonNullable<Client["clientConfig"]["parameters"] & Options["parameters"]>, unknown extends Options["body"] ? never : Options["body"], NonNullable<Client["clientConfig"]["headers"] & Options["headers"]>>>;
/** Constructs a subset of the given object containing only the given keys. */
export declare const pick: <T extends object, K extends keyof T>(obj: T, keys: readonly K[]) => Pick<T, K>;
/** Get a subset of the given parameters that has the given keys and may contain a custom parameter. */
export declare const pickValidParams: <T extends object, K extends keyof T>(parameters: T, endpointParamKeys: readonly K[]) => Pick<T, K> & Record<`c_${string}`, any>;
/** Removes keys with `null` or `undefined` values from the given object. */
export declare const omitNullable: <T extends object>(obj: T) => NullToOptional<T>;
/** Removes keys with `null` or `undefined` values from the `parameters` of the given object. */
export declare const omitNullableParameters: <T extends {
    parameters: object;
}>(obj: T) => OmitNullableParameters<T>;
/** Simple deep clone utility */
export declare const clone: <T>(val: T) => T;
/** get a list of custom key starting with c_**/
export declare const getCustomKeys: <T extends object>(obj: T) => (keyof T & `c_${string}`)[];
//# sourceMappingURL=utils.d.ts.map