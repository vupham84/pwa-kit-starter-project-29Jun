"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _useAuthContext = _interopRequireDefault(require("./useAuthContext"));
var _useLocalStorage = _interopRequireDefault(require("./useLocalStorage"));
var _useConfig = _interopRequireDefault(require("./useConfig"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

const onClient = typeof window !== 'undefined';

/**
 * @group Shopper Authentication helpers
 */

/**
 * Hook that returns the access token.
 *
 * @group Helpers
 * @category Shopper Authentication
 *
 */
const useAccessToken = () => {
  const config = (0, _useConfig.default)();
  const auth = (0, _useAuthContext.default)();
  const token = onClient ?
  // This conditional is a constant value based on the environment, so the same path will
  // always be followed., and the "rule of hooks" is not violated.
  // eslint-disable-next-line react-hooks/rules-of-hooks
  (0, _useLocalStorage.default)(`access_token_${config.siteId}`) : auth.get('access_token');

  // NOTE: auth.ready() is to be called later. If you call it immediately in this hook,
  // it'll cause infinite re-renders during testing.
  const getTokenWhenReady = () => auth.ready().then(({
    access_token
  }) => access_token);
  return {
    token,
    getTokenWhenReady
  };
};
var _default = exports.default = useAccessToken;