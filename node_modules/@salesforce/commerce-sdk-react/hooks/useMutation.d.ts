import { UseMutationOptions } from '@tanstack/react-query';
import { ApiClient, ApiMethod, ApiOptions, CacheUpdateGetter, MergedOptions, OptionalCustomEndpointClientConfig, TMutationVariables } from './types';
/**
 * Helper for mutation hooks, contains most of the logic in order to keep individual hooks small.
 * @param hookConfig - Config values that vary per API endpoint
 * @internal
 */
export declare const useMutation: <Client extends ApiClient, Options extends ApiOptions<Record<string, unknown>, unknown[] | Record<string, unknown> | undefined, Record<string, string>>, Data>(hookConfig: {
    client: Client;
    method: ApiMethod<Options, Data>;
    getCacheUpdates: CacheUpdateGetter<Required<ApiOptions<NonNullable<Client["clientConfig"]["parameters"] & Options["parameters"]>, unknown extends Options["body"] ? never : Options["body"], NonNullable<Client["clientConfig"]["headers"] & Options["headers"]>>>, Data>;
}) => import("@tanstack/react-query").UseMutationResult<Data, unknown, Options, unknown>;
/**
 * A hook for SCAPI custom endpoint mutations.
 *
 * Besides calling custom endpoint, this hook does a few things for better DX.
 * 1. inject access token
 * 2. merge SCAPI client configurations from the CommerceApiProvider
 * @param apiOptions - Options passed through to commerce-sdk-isomorphic
 * @param mutationOptions - Options passed through to @tanstack/react-query
 * @returns A TanStack Query mutation hook with data from the custom API endpoint.
 */
export declare const useCustomMutation: <TData = unknown, TError = unknown>(apiOptions: OptionalCustomEndpointClientConfig, mutationOptions?: UseMutationOptions<TData, TError, TMutationVariables, unknown> | undefined) => import("@tanstack/react-query").UseMutationResult<TData, TError, TMutationVariables, unknown>;
//# sourceMappingURL=useMutation.d.ts.map