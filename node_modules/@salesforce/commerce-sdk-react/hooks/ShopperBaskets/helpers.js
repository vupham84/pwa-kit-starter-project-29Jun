"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useShopperBasketsMutationHelper = useShopperBasketsMutationHelper;
var _index = require("../index");
var _ShopperCustomers = require("../ShopperCustomers");
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * This is a helper function for Basket Mutations.
 * useShopperBasketsMutationHelper.addItemToNewOrExistingBasket: is responsible for managing the process of adding an item to a basket.
 *  - If a basket already exists, add the item to the basket immediately.
 *  - If a basket does not exist, create a new basket using the createBasket mutation
 * and then add the item to the newly created basket using the addItemToBasket mutation.
 *
 * @example
 * import useShopperBasketsMutationHelper from '@salesforce/commerce-sdk-react'
 *
 * const Page = () => {
 *      const helpers = useShopperBasketsMutationHelper()
 *
 *      const addToCart = async () => {
 *          const productItems = [{id: 123, quantity: 2}]
 *          await basketMutationHelpers.addItemToNewOrExistingBasket(productItems)
 *      }
 *
 * }
 */
function useShopperBasketsMutationHelper() {
  const customerId = (0, _index.useCustomerId)();
  const {
    data: basketsData
  } = (0, _ShopperCustomers.useCustomerBaskets)({
    parameters: {
      customerId
    }
  }, {
    enabled: !!customerId
  });
  const createBasket = (0, _index.useShopperBasketsMutation)('createBasket');
  const addItemToBasketMutation = (0, _index.useShopperBasketsMutation)('addItemToBasket');
  return {
    addItemToNewOrExistingBasket: function () {
      var _ref = _asyncToGenerator(function* (productItem) {
        if (basketsData && basketsData.total > 0) {
          // we know that if basketData.total > 0, current basket will always be available
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          const currentBasket = (basketsData === null || basketsData === void 0 ? void 0 : basketsData.baskets) && basketsData.baskets[0];
          return yield addItemToBasketMutation.mutateAsync({
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            parameters: {
              basketId: currentBasket.basketId
            },
            body: productItem
          });
        } else {
          const data = yield createBasket.mutateAsync({
            body: {}
          });
          if (!data || !data.basketId) {
            throw Error('Something is wrong. Please try again');
          } else {
            return yield addItemToBasketMutation.mutateAsync({
              parameters: {
                basketId: data.basketId
              },
              body: productItem
            });
          }
        }
      });
      return function addItemToNewOrExistingBasket(_x) {
        return _ref.apply(this, arguments);
      };
    }()
  };
}