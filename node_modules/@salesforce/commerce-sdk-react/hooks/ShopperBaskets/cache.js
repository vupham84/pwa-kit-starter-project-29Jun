"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cacheUpdateMatrix = void 0;
var _queryKeyHelpers = require("./queryKeyHelpers");
var _queryKeyHelpers2 = require("../ShopperCustomers/queryKeyHelpers");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/** Data returned by every Shopper Baskets endpoint (except `deleteBasket`) */

/** Data returned by `getCustomerBaskets` */

/** Parameters that get passed around, includes client config and possible parameters from other endpoints */

/** Parameters that we actually send to the API for `getCustomerBaskets` */

const invalidateCustomerBasketsQuery = (customerId, parameters) => {
  return {
    queryKey: _queryKeyHelpers2.getCustomerBaskets.queryKey(_objectSpread(_objectSpread({}, parameters), {}, {
      customerId
    }))
  };
};
const updateCustomerBasketsQuery = (customerId, parameters, response) => {
  return {
    queryKey: _queryKeyHelpers2.getCustomerBaskets.queryKey(_objectSpread(_objectSpread({}, parameters), {}, {
      customerId
    })),
    updater: oldData => {
      var _oldData$baskets;
      if (!(oldData !== null && oldData !== void 0 && (_oldData$baskets = oldData.baskets) !== null && _oldData$baskets !== void 0 && _oldData$baskets.length)) {
        return {
          baskets: [response],
          total: 1
        };
      }
      const updatedBaskets = oldData.baskets.map(basket => basket.basketId === parameters.basketId ? response : basket);
      return _objectSpread(_objectSpread({}, oldData), {}, {
        // Shopper Customers and Shopper Baskets have different definitions for the `Basket`
        // type. (99% similar, but that's not good enough for TypeScript.)
        // TODO: Remove this type assertion when the RAML specs match.
        baskets: updatedBaskets
      });
    }
  };
};
const cacheUpdateMatrix = exports.cacheUpdateMatrix = {
  addCouponToBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  addGiftCertificateItemToBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  addItemToBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  addPaymentInstrumentToBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  addPriceBooksToBasket(customerId, {
    parameters
  }) {
    return {
      invalidate: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, {
        queryKey: _queryKeyHelpers.getPriceBooksForBasket.queryKey(parameters)
      },
      // TODO: Convert invalidate to an update that removes the matching basket
      ...(customerId ? [invalidateCustomerBasketsQuery(customerId, parameters)] : [])]
    };
  },
  addTaxesForBasket(customerId, {
    parameters
  }) {
    return {
      invalidate: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, {
        queryKey: _queryKeyHelpers.getTaxesFromBasket.queryKey(parameters)
      },
      // TODO: Convert invalidate to an update that removes the matching basket
      ...(customerId ? [invalidateCustomerBasketsQuery(customerId, parameters)] : [])]
    };
  },
  addTaxesForBasketItem(customerId, {
    parameters
  }) {
    return {
      // TODO: Convert invalidate to an update that removes the matching basket
      invalidate: [...(customerId ? [invalidateCustomerBasketsQuery(customerId, parameters)] : [])],
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }]
    };
  },
  createBasket(customerId, {
    parameters
  }, response) {
    const {
      basketId
    } = response;
    return {
      // TODO: Convert invalidate to an update that removes the matching basket
      invalidate: [...(customerId && !basketId ? [invalidateCustomerBasketsQuery(customerId, parameters)] : [])],
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(_objectSpread(_objectSpread({}, parameters), {}, {
          basketId
        }))
      }, ...(customerId && basketId ? [updateCustomerBasketsQuery(customerId, _objectSpread(_objectSpread({}, parameters), {}, {
        basketId
      }), response)] : [])]
    };
  },
  createShipmentForBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  deleteBasket(customerId, {
    parameters
  }) {
    return {
      // TODO: Convert invalidate to an update that removes the matching basket
      invalidate: [...(customerId ? [invalidateCustomerBasketsQuery(customerId, parameters)] : [])],
      remove: [
      // We want to fuzzy match all queryKeys with `basketId` in their path
      // [`/commerce-sdk-react,/organizations/,${organization},/baskets/,${basketId}`]
      {
        queryKey: _queryKeyHelpers.getBasket.path(parameters)
      }]
    };
  },
  mergeBasket(customerId, {
    parameters
  }, response) {
    var _response$customerInf;
    const {
      basketId
    } = response;
    const registeredCustomerId = response === null || response === void 0 ? void 0 : (_response$customerInf = response.customerInfo) === null || _response$customerInf === void 0 ? void 0 : _response$customerInf.customerId;
    return {
      // TODO: Convert invalidate to an update that removes the matching basket
      invalidate: [...(customerId && !basketId ? [invalidateCustomerBasketsQuery(customerId, parameters)] : [])],
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(_objectSpread(_objectSpread({}, parameters), {}, {
          basketId
        }))
      }, ...(registeredCustomerId && basketId ? [updateCustomerBasketsQuery(registeredCustomerId, _objectSpread(_objectSpread({}, parameters), {}, {
        basketId
      }), response)] : [])]
    };
  },
  removeCouponFromBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  removeGiftCertificateItemFromBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  removeItemFromBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  removePaymentInstrumentFromBasket(customerId, {
    parameters
  }, response) {
    return {
      invalidate: [{
        queryKey: _queryKeyHelpers.getPaymentMethodsForBasket.queryKey(parameters)
      },
      // TODO: Convert invalidate to an update that removes the matching basket
      ...(customerId ? [invalidateCustomerBasketsQuery(customerId, parameters)] : [])],
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  removeShipmentFromBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  transferBasket(customerId, {
    parameters
  }, response) {
    var _response$customerInf2;
    const {
      basketId
    } = response;
    const transferedTo = response === null || response === void 0 ? void 0 : (_response$customerInf2 = response.customerInfo) === null || _response$customerInf2 === void 0 ? void 0 : _response$customerInf2.customerId;
    return {
      // TODO: Convert invalidate to an update that removes the matching basket
      invalidate: [...(customerId && !basketId ? [invalidateCustomerBasketsQuery(customerId, parameters)] : [])],
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(_objectSpread(_objectSpread({}, parameters), {}, {
          basketId
        }))
      }, ...(transferedTo && basketId ? [updateCustomerBasketsQuery(transferedTo, _objectSpread(_objectSpread({}, parameters), {}, {
        basketId
      }), response)] : [])]
    };
  },
  updateBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  updateBillingAddressForBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  updateCustomerForBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  updateGiftCertificateItemInBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  updateItemInBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  updateItemsInBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  updatePaymentInstrumentInBasket(customerId, {
    parameters
  }, response) {
    return {
      invalidate: [{
        queryKey: _queryKeyHelpers.getPaymentMethodsForBasket.queryKey(parameters)
      },
      // TODO: Convert invalidate to an update that removes the matching basket
      ...(customerId ? [invalidateCustomerBasketsQuery(customerId, parameters)] : [])],
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  updateShipmentForBasket(customerId, {
    parameters
  }, response) {
    return {
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  updateShippingAddressForShipment(customerId, {
    parameters
  }, response) {
    return {
      // TODO: Convert invalidate to an update that removes the matching basket
      invalidate: [{
        queryKey: _queryKeyHelpers.getShippingMethodsForShipment.queryKey(parameters)
      }, ...(customerId ? [invalidateCustomerBasketsQuery(customerId, parameters)] : [])],
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  },
  updateShippingMethodForShipment(customerId, {
    parameters
  }, response) {
    return {
      // TODO: Convert invalidate to an update that removes the matching basket
      invalidate: [{
        queryKey: _queryKeyHelpers.getShippingMethodsForShipment.queryKey(parameters)
      }, ...(customerId ? [invalidateCustomerBasketsQuery(customerId, parameters)] : [])],
      update: [{
        queryKey: _queryKeyHelpers.getBasket.queryKey(parameters)
      }, ...(customerId ? [updateCustomerBasketsQuery(customerId, parameters, response)] : [])]
    };
  }
};