"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMutation = exports.useCustomMutation = void 0;
var _reactQuery = require("@tanstack/react-query");
var _commerceSdkIsomorphic = require("commerce-sdk-isomorphic");
var _useAuthContext = _interopRequireDefault(require("./useAuthContext"));
var _useConfig = _interopRequireDefault(require("./useConfig"));
var _useAuthorizationHeader = require("./useAuthorizationHeader");
var _useCustomerId = _interopRequireDefault(require("./useCustomerId"));
var _utils = require("./utils");
var _helpers = require("./helpers");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * Helper for mutation hooks, contains most of the logic in order to keep individual hooks small.
 * @param hookConfig - Config values that vary per API endpoint
 * @internal
 */
const useMutation = hookConfig => {
  const queryClient = (0, _reactQuery.useQueryClient)();
  const customerId = (0, _useCustomerId.default)();
  const authenticatedMethod = (0, _useAuthorizationHeader.useAuthorizationHeader)(hookConfig.method);
  return (0, _reactQuery.useMutation)(authenticatedMethod, {
    onSuccess(data, options) {
      // commerce-sdk-isomorphic merges `clientConfig` and `options` under the hood,
      // so we also need to do that to get the "net" options that are actually sent to SCAPI.
      const netOptions = (0, _utils.mergeOptions)(hookConfig.client, options);
      const cacheUpdates = hookConfig.getCacheUpdates(customerId, netOptions, data);
      (0, _utils.updateCache)(queryClient, cacheUpdates, data);
    }
  });
};

/**
 * A hook for SCAPI custom endpoint mutations.
 *
 * Besides calling custom endpoint, this hook does a few things for better DX.
 * 1. inject access token
 * 2. merge SCAPI client configurations from the CommerceApiProvider
 * @param apiOptions - Options passed through to commerce-sdk-isomorphic
 * @param mutationOptions - Options passed through to @tanstack/react-query
 * @returns A TanStack Query mutation hook with data from the custom API endpoint.
 */
exports.useMutation = useMutation;
const useCustomMutation = (apiOptions, mutationOptions) => {
  const auth = (0, _useAuthContext.default)();
  const globalConfig = (0, _useConfig.default)();
  const logger = globalConfig.logger || console;
  const createMutationFnWithAuth = () => {
    return /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* (args) {
        const {
          access_token
        } = yield auth.ready();
        return yield _commerceSdkIsomorphic.helpers.callCustomEndpoint((0, _helpers.generateCustomEndpointOptions)(apiOptions, globalConfig, access_token, args)).catch( /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(function* (error) {
            const {
              access_token
            } = yield (0, _helpers.handleInvalidToken)(error, auth, logger);
            return yield _commerceSdkIsomorphic.helpers.callCustomEndpoint((0, _helpers.generateCustomEndpointOptions)(apiOptions, globalConfig, access_token, args));
          });
          return function (_x2) {
            return _ref2.apply(this, arguments);
          };
        }());
      });
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
  };
  return (0, _reactQuery.useMutation)(createMutationFnWithAuth(), mutationOptions);
};
exports.useCustomMutation = useCustomMutation;