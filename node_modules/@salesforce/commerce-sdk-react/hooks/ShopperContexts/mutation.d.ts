import { ApiClients, Argument, DataType } from '../types';
import { UseMutationResult } from '@tanstack/react-query';
type Client = ApiClients['shopperContexts'];
/**
 * Mutation for Shopper Contexts.
 * @group ShopperContexts
 * @category Mutation
 * @enum
 */
export declare const ShopperContextsMutations: {
    /**
     * Creates the shopper's context based on shopperJWT.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Contexts `createShopperContext` endpoint.
     */
    readonly CreateShopperContext: "createShopperContext";
    /**
     * Gets the shopper's context based on the shopperJWT.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Contexts `deleteShopperContext` endpoint.
     */
    readonly DeleteShopperContext: "deleteShopperContext";
    /**
     * Updates the shopper's context based on the Shopper JWT. If the shopper context exists, it's updated with the patch body. If a customer qualifier or an `effectiveDateTime` is already present in the existing shopper context, its value is replaced by the corresponding value from the patch body. If a customer qualifers' value is set to `null` it's deleted from existing shopper context. If `effectiveDateTime` value is set to set to an empty string (\"\"), it's deleted from existing shopper context. If `effectiveDateTime` value is set to `null` it's ignored. If an `effectiveDateTime` or customer qualifiiers' value is new, it's added to the existing Shopper context.
     * @returns A TanStack Query mutation hook for interacting with the Shopper Contexts `updateShopperContext` endpoint.
     */
    readonly UpdateShopperContext: "updateShopperContext";
};
/**
 * Mutation for Shopper Contexts.
 * @group ShopperContexts
 * @category Mutation
 */
export type ShopperContextsMutation = (typeof ShopperContextsMutations)[keyof typeof ShopperContextsMutations];
/**
 * Mutation hook for Shopper Contexts.
 * @group ShopperContexts
 * @category Mutation
 */
export declare function useShopperContextsMutation<Mutation extends ShopperContextsMutation>(mutation: Mutation): UseMutationResult<DataType<Client[Mutation]>, unknown, Argument<Client[Mutation]>>;
export {};
//# sourceMappingURL=mutation.d.ts.map