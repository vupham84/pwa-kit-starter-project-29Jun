import { ShopperContexts } from 'commerce-sdk-isomorphic';
import { Argument, ExcludeTail } from '../types';
type Client = ShopperContexts<{
    shortCode: string;
}>;
type Params<T extends keyof QueryKeys> = Partial<Argument<Client[T]>['parameters']>;
export type QueryKeys = {
    getShopperContext: [
        '/commerce-sdk-react',
        '/organizations/',
        string | undefined,
        '/shopper-context/',
        string | undefined,
        Params<'getShopperContext'>
    ];
};
type QueryKeyHelper<T extends keyof QueryKeys> = {
    /** Generates the path component of the query key for an endpoint. */
    path: (params: Params<T>) => ExcludeTail<QueryKeys[T]>;
    /** Generates the full query key for an endpoint. */
    queryKey: (params: Params<T>) => QueryKeys[T];
};
export declare const getShopperContext: QueryKeyHelper<'getShopperContext'>;
export {};
//# sourceMappingURL=queryKeyHelpers.d.ts.map