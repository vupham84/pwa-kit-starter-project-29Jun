import { CookieAttributes } from 'js-cookie';
/** Utility to determine if you are on the browser (client) or not. */
export declare const onClient: () => boolean;
/** Detects whether the storefront is running in an iframe. */
export declare const detectInIframe: () => boolean;
/**
 * Origin used for local Runtime Admin.
 * @private
 */
export declare const DEVELOPMENT_ORIGIN = "http://localhost:4000";
/**
 * Gets the parent origin when running in an iframe.
 * @private
 */
export declare const getParentOrigin: () => string | undefined;
/**
 * Determines whether the given origin is trusted to host the storefront in an iframe.
 * @private
 */
export declare const isOriginTrusted: (origin: string | undefined) => boolean;
/**
 * Gets the value to use for the `sameSite` cookie attribute.
 * @returns `undefined` if running on the server, `"none"` if running as an iframe on a trusted site
 * (i.e. Storefront Preview), otherwise `"Lax"`
 */
export declare const getCookieSameSiteAttribute: () => "Lax" | "none" | undefined;
/**
 * Gets the default cookie attributes. Sets the secure flag unless running on localhost in Safari.
 * Sets the sameSite attribute to `"none"` when running in a trusted iframe.
 */
export declare const getDefaultCookieAttributes: () => CookieAttributes;
/** Determines whether local storage is available. */
export declare function detectLocalStorageAvailable(): boolean;
/** Determines whether cookies are available by trying to set a test value. */
export declare function detectCookiesAvailable(options?: CookieAttributes): boolean;
/**
 * Determines whether the given URL string is a valid absolute URL.
 *
 * Valid absolute URLs:
 * - https://example.com
 * - http://example.com
 *
 * Invalid or relative URLs:
 * - http://example
 * - example.com
 * - /relative/path
 *
 * @param {string} url - The URL string to be checked.
 * @returns {boolean} - Returns true if the given string is a valid absolute URL, false otherwise.
 */
export declare function isAbsoluteUrl(url: string): boolean;
/**
 * Provides a platform-specific method for Base64 encoding.
 *
 * - In a browser environment (where `window` and `document` are defined),
 *   the native `btoa` function is used.
 * - In a non-browser environment (like Node.js), a fallback is provided
 *   that uses `Buffer` to perform the Base64 encoding.
 */
export declare const stringToBase64: typeof btoa;
//# sourceMappingURL=utils.d.ts.map