"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.start = exports.registerServiceWorker = exports.OuterApp = void 0;
var _react = _interopRequireWildcard(require("react"));
var _client = require("react-dom/client");
var _reactRouterDom = require("react-router-dom");
var _contexts = require("../universal/contexts");
var _app = _interopRequireDefault(require("../universal/components/_app"));
var _compatibility = require("../universal/compatibility");
var _switch = _interopRequireDefault(require("../universal/components/switch"));
var _routeComponent = require("../universal/components/route-component");
var _component = require("@loadable/component");
var _uuidv = require("../../utils/uuidv4.client");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _loggerInstance = _interopRequireDefault(require("../../utils/logger-instance"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); } /*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */ /* global __webpack_require__ */
/* istanbul ignore next */
const registerServiceWorker = url => {
  return Promise.resolve().then(() => {
    if ('serviceWorker' in navigator) {
      return Promise.resolve().then(() => new Promise(resolve => window.addEventListener('load', resolve))).then(() => navigator.serviceWorker.register(url)).then(registration => _loggerInstance.default.info(`ServiceWorker registration successful with scope: ${registration.scope}`, {
        namespace: 'registerServiceWorker'
      })).catch(err => _loggerInstance.default.error('ServiceWorker registration failed', {
        namespace: 'registerServiceWorker',
        additionalProperties: {
          error: err
        }
      }));
    }
  });
};
exports.registerServiceWorker = registerServiceWorker;
const OuterApp = ({
  routes,
  error,
  WrappedApp,
  locals,
  onHydrate
}) => {
  const AppConfig = (0, _compatibility.getAppConfig)();
  const isInitialPageRef = (0, _react.useRef)(true);
  return /*#__PURE__*/_react.default.createElement(_contexts.ServerContext.Provider, {
    value: {}
  }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, {
    ref: onHydrate
  }, /*#__PURE__*/_react.default.createElement(_contexts.CorrelationIdProvider, {
    correlationId: () => {
      // If we are hydrating an error page use the server correlation id.
      if (isInitialPageRef.current && window.__ERROR__) {
        isInitialPageRef.current = false;
        return window.__INITIAL_CORRELATION_ID__;
      }
      return (0, _uuidv.uuidv4)();
    }
  }, /*#__PURE__*/_react.default.createElement(AppConfig, {
    locals: locals
  }, /*#__PURE__*/_react.default.createElement(_switch.default, {
    error: error,
    appState: window.__PRELOADED_STATE__,
    routes: routes,
    App: WrappedApp
  })))));
};
exports.OuterApp = OuterApp;
OuterApp.propTypes = {
  routes: _propTypes.default.array.isRequired,
  error: _propTypes.default.object,
  WrappedApp: _propTypes.default.func.isRequired,
  locals: _propTypes.default.object,
  onHydrate: _propTypes.default.func
};
/* istanbul ignore next */
const start = () => {
  const AppConfig = (0, _compatibility.getAppConfig)();
  const rootEl = document.getElementsByClassName('react-target')[0];
  const data = JSON.parse(document.getElementById('mobify-data').innerHTML);

  // Set all globals sent from the server on the window object.
  Object.entries(data).forEach(([key, value]) => {
    window[key] = value;
  });

  // Tell webpack how to find javascript files
  Object.defineProperty(__webpack_require__, 'p', {
    get: () => window.Progressive.buildOrigin
  });

  // On the browser we don't have request.locals, so we just provide an empty
  // object that exists for the lifetime of the app. AppConfig components can use
  // this to set up, eg. Redux stores.
  const locals = {};

  // AppConfig.restore *must* come before getRoutes()
  AppConfig.restore(locals, window.__PRELOADED_STATE__.__STATE_MANAGEMENT_LIBRARY);

  // We need to tell the routeComponent HOC when the app is hydrating in order to
  // prevent pages from re-fetching data on the first client-side render. The
  // reason we do this is that we expect a render to have taken place
  // on the server already. That server-side render already called getProps()
  // and froze the application state as a JSON blob on the page.
  //
  // This is VERY fiddly â€“ don't go crazy with window.__HYDRATING__. You have
  // been warned.
  window.__HYDRATING__ = true;
  const props = {
    error: window.__ERROR__,
    locals: locals,
    routes: (0, _routeComponent.getRoutes)(locals),
    WrappedApp: (0, _routeComponent.routeComponent)(_app.default, false, locals)
  };
  return Promise.resolve().then(() => new Promise(resolve => (0, _component.loadableReady)(resolve))).then(() => {
    (0, _client.hydrateRoot)(rootEl, /*#__PURE__*/_react.default.createElement(OuterApp, _extends({}, props, {
      onHydrate: () => {
        window.__HYDRATING__ = false;
      }
    })));
  });
};
exports.start = start;