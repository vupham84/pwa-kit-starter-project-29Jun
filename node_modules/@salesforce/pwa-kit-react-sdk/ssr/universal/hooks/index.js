"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useServerContext = exports.useOrigin = exports.useCorrelationId = void 0;
var _react = _interopRequireWildcard(require("react"));
var _contexts = require("../contexts");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright (c) 2024, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/* istanbul ignore file */

/**
 * Use this hook to get the correlation id value of the closest CorrelationIdProvider component.
 *
 * @returns {object} The correlation id
 */
const useCorrelationId = () => {
  const context = _react.default.useContext(_contexts.CorrelationIdContext);
  if (context === undefined) {
    throw new Error('useCorrelationId needs to be used within CorrelationIdProvider');
  }
  return context;
};

/**
 * Server context
 * @typedef {Object} ServerContext
 * @property {Object} req - Request object
 * @property {Object} res - Response object
 */

/**
 * Get the server context
 * @returns {ServerContext} ServerContext object
 *
 * @example
 * const {res} = useServerContext()
 * if (res && query.error) { res.status(404) }
 */
exports.useCorrelationId = useCorrelationId;
const useServerContext = () => {
  const serverContext = (0, _react.useContext)(_contexts.ServerContext);
  return serverContext;
};

/**
 * Returns the application's origin.
 *
 * By default, it will return the ORIGIN under which we are serving the page.
 *
 * If `fromXForwardedHeader` is true, it will use the value of `x-forwarded-proto` and `x-forwarded-host` headers in req
 * to build origin. (it is false by default)
 *
 * NOTE: this is a React hook, so it has to be used in a React rendering pipeline.
 * @returns {string} origin string
 *
 */
exports.useServerContext = useServerContext;
const useOrigin = ({
  fromXForwardedHeader = false
}) => {
  const {
    res
  } = useServerContext();
  if (typeof window !== 'undefined') {
    return window.location.origin;
  }
  const {
    APP_ORIGIN
  } = process.env;
  const xForwardedOrigin = res.locals.xForwardedOrigin;
  if (fromXForwardedHeader && xForwardedOrigin) {
    return xForwardedOrigin;
  }
  return APP_ORIGIN;
};
exports.useOrigin = useOrigin;