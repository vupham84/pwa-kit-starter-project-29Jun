"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withLegacyGetProps = void 0;
var _react = _interopRequireDefault(require("react"));
var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));
var _fetchStrategy = require("../fetch-strategy");
var _performance = require("../../../../utils/performance");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /*
 * Copyright (c) 2022, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const withLegacyGetProps = Wrapped => {
  /* istanbul ignore next */
  const wrappedComponentName = Wrapped.displayName || Wrapped.name;

  /**
   * @private
   */
  class WithLegacyGetProps extends _fetchStrategy.FetchStrategy {
    render() {
      return /*#__PURE__*/_react.default.createElement(Wrapped, this.props);
    }

    /**
     * @private
     */
    static doInitAppState({
      App,
      match,
      route,
      req,
      res,
      location
    }) {
      return _asyncToGenerator(function* () {
        const {
          params
        } = match;
        const components = [App, route.component];
        const promises = components.map((c, i) => {
          // getTemplateName is a promise and it's intentially not awaited here
          // to avoid blocking the execution of the getProps function to maximize performance
          // getTemplateName should be very fast, under 0.2ms
          c.getTemplateName().then(templateName => {
            res.__performanceTimer.mark(`${_performance.PERFORMANCE_MARKS.getProps}::${templateName}`, 'start');
          });
          return c.getProps ? c.getProps({
            req,
            res,
            params,
            location
          }).then(result => {
            c.getTemplateName().then(templateName => {
              res.__performanceTimer.mark(`${_performance.PERFORMANCE_MARKS.getProps}::${templateName}`, 'end');
            });
            return result;
          }) : Promise.resolve({});
        });
        const [appProps, pageProps] = yield Promise.all(promises);
        return {
          appProps,
          pageProps
        };
      })();
    }

    /**
     * @private
     */
    static getInitializers() {
      var _Wrapped$getInitializ;
      return [WithLegacyGetProps.doInitAppState, ...(((_Wrapped$getInitializ = Wrapped.getInitializers) === null || _Wrapped$getInitializ === void 0 ? void 0 : _Wrapped$getInitializ.call(Wrapped)) ?? [])];
    }

    /**
     * @private
     */
    static getHOCsInUse() {
      var _Wrapped$getHOCsInUse;
      return [withLegacyGetProps, ...(((_Wrapped$getHOCsInUse = Wrapped.getHOCsInUse) === null || _Wrapped$getHOCsInUse === void 0 ? void 0 : _Wrapped$getHOCsInUse.call(Wrapped)) ?? [])];
    }
  }
  WithLegacyGetProps.displayName = `withLegacyGetProps(${wrappedComponentName})`;
  const exclude = {
    doInitAppState: true,
    getInitializers: true,
    initAppState: true,
    getHOCsInUse: true
  };
  (0, _hoistNonReactStatics.default)(WithLegacyGetProps, Wrapped, exclude);
  return WithLegacyGetProps;
};
exports.withLegacyGetProps = withLegacyGetProps;