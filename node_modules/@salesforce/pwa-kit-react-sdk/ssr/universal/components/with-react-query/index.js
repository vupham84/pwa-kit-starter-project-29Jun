"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withReactQuery = void 0;
var _react = _interopRequireDefault(require("react"));
var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));
var _reactSsrPrepass = _interopRequireDefault(require("react-ssr-prepass"));
var _reactQuery = require("@tanstack/react-query");
var _fetchStrategy = require("../fetch-strategy");
var _performance = require("../../../../utils/performance");
var _loggerInstance = _interopRequireDefault(require("../../../../utils/logger-instance"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /*
 * Copyright (c) 2022, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const STATE_KEY = '__reactQuery';
const passthrough = input => input;

/**
 * A HoC for adding React Query support to your application.
 *
 * @param {React.ReactElement} Wrapped The component to be wrapped
 * @param {Object} options
 * @param {Object} options.queryClientConfig The react query client configuration object to be used.
 *
 * @returns {React.ReactElement}
 */
const withReactQuery = (Wrapped, options = {}) => {
  const isServerSide = typeof window === 'undefined';
  /* istanbul ignore next */
  const wrappedComponentName = Wrapped.displayName || Wrapped.name;
  const queryClientConfig = options.queryClientConfig;
  const beforeHydrate = options.beforeHydrate || passthrough;

  /**
   * @private
   */
  class WithReactQuery extends _fetchStrategy.FetchStrategy {
    render() {
      let preloadedState = {};
      this.props.locals.__queryClient = this.props.locals.__queryClient || new _reactQuery.QueryClient(queryClientConfig);
      if (!isServerSide) {
        try {
          var _window$__PRELOADED_S;
          preloadedState = beforeHydrate(((_window$__PRELOADED_S = window.__PRELOADED_STATE__) === null || _window$__PRELOADED_S === void 0 ? void 0 : _window$__PRELOADED_S[STATE_KEY]) || {});
        } catch (e) {
          _loggerInstance.default.error('Client `beforeHydrate` failed', {
            namespace: 'with-react-query.render',
            additionalProperties: {
              error: e
            }
          });
        }
      }
      return /*#__PURE__*/_react.default.createElement(_reactQuery.QueryClientProvider, {
        client: this.props.locals.__queryClient
      }, /*#__PURE__*/_react.default.createElement(_reactQuery.Hydrate, {
        state: preloadedState
      }, /*#__PURE__*/_react.default.createElement(Wrapped, this.props)));
    }

    /**
     * @private
     */
    static doInitAppState({
      res,
      appJSX
    }) {
      return _asyncToGenerator(function* () {
        const queryClient = res.locals.__queryClient = res.locals.__queryClient || new _reactQuery.QueryClient(queryClientConfig);
        res.__performanceTimer.mark(_performance.PERFORMANCE_MARKS.reactQueryPrerender, 'start');
        // Use `ssrPrepass` to collect all uses of `useQuery`.
        yield (0, _reactSsrPrepass.default)(appJSX);
        res.__performanceTimer.mark(_performance.PERFORMANCE_MARKS.reactQueryPrerender, 'end');
        const queryCache = queryClient.getQueryCache();
        const queries = queryCache.getAll().filter(q => q.options.enabled !== false);
        yield Promise.all(queries.map((q, i) => {
          var _q$meta, _q$meta2;
          // always include the index to avoid duplicate entries
          const displayName = (_q$meta = q.meta) !== null && _q$meta !== void 0 && _q$meta.displayName ? `${(_q$meta2 = q.meta) === null || _q$meta2 === void 0 ? void 0 : _q$meta2.displayName}:${i}` : `${i}`;
          res.__performanceTimer.mark(`${_performance.PERFORMANCE_MARKS.reactQueryUseQuery}::${displayName}`, 'start');
          return q.fetch().then(result => {
            res.__performanceTimer.mark(`${_performance.PERFORMANCE_MARKS.reactQueryUseQuery}::${displayName}`, 'end', {
              detail: q.queryHash
            });
            return result;
          }).catch(() => {
            // If there's an error in this fetch, react-query will log the error
            // On our end, simply catch any error and move on to the next query
          });
        }));
        return {
          [STATE_KEY]: (0, _reactQuery.dehydrate)(queryClient)
        };
      })();
    }

    /**
     * @private
     */
    static getInitializers() {
      var _Wrapped$getInitializ;
      return [WithReactQuery.doInitAppState, ...(((_Wrapped$getInitializ = Wrapped.getInitializers) === null || _Wrapped$getInitializ === void 0 ? void 0 : _Wrapped$getInitializ.call(Wrapped)) ?? [])];
    }

    /**
     * @private
     */
    static getHOCsInUse() {
      var _Wrapped$getHOCsInUse;
      return [withReactQuery, ...(((_Wrapped$getHOCsInUse = Wrapped.getHOCsInUse) === null || _Wrapped$getHOCsInUse === void 0 ? void 0 : _Wrapped$getHOCsInUse.call(Wrapped)) ?? [])];
    }
  }
  WithReactQuery.displayName = `withReactQuery(${wrappedComponentName})`;
  const exclude = {
    doInitAppState: true,
    getInitializers: true,
    initAppState: true,
    getHOCsInUse: true
  };
  (0, _hoistNonReactStatics.default)(WithReactQuery, Wrapped, exclude);
  return WithReactQuery;
};
exports.withReactQuery = withReactQuery;