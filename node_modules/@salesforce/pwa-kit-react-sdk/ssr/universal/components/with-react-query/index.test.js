"use strict";

var _index = require("./index");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
var _loggerInstance = _interopRequireDefault(require("../../../../utils/logger-instance"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/*
 * Copyright (c) 2022, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

jest.mock('../../../../utils/logger-instance', () => {
  return {
    error: jest.fn()
  };
});
describe('withReactQuery', function () {
  let windowSpy;
  let oldPreloadedState = window.__PRELOADED_STATE__;
  beforeEach(() => {
    windowSpy = jest.spyOn(window, 'window', 'get');
    jest.spyOn(console, 'warn').mockImplementation(jest.fn());
  });
  afterEach(() => {
    console.warn.mockRestore();
    windowSpy.mockRestore();
    window.__PRELOADED_STATE__ = oldPreloadedState;
  });
  test('Renders correctly', () => {
    const Wrapped = () => /*#__PURE__*/_react2.default.createElement("p", null, "Hello world");
    const Component = (0, _index.withReactQuery)(Wrapped);
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(Component, {
      locals: {}
    }));
    expect(_react.screen.getByText(/Hello world/i)).toBeInTheDocument();
  });
  test('`beforeHydrate` called on mount', () => {
    const mockPreloadedState = {
      payload: {}
    };
    const mockBeforeHydrate = jest.fn();
    const Wrapped = () => /*#__PURE__*/_react2.default.createElement("p", null, "Hello world");
    const Component = (0, _index.withReactQuery)(Wrapped, {
      beforeHydrate: mockBeforeHydrate
    });
    window.__PRELOADED_STATE__ = {
      __reactQuery: mockPreloadedState
    };
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(Component, {
      locals: {}
    }));
    expect(_react.screen.getByText(/Hello world/i)).toBeInTheDocument();
    expect(mockBeforeHydrate).toHaveBeenCalledTimes(1);
    expect(mockBeforeHydrate).toHaveBeenCalledWith(mockPreloadedState);
  });
  test('Renders correctly when `beforeHydrate` throws', () => {
    const mockPreloadedState = {
      payload: {}
    };
    const mockError = new Error('Test Error');
    const mockBeforeHydrate = jest.fn().mockImplementation(() => {
      throw mockError;
    });
    const Wrapped = () => /*#__PURE__*/_react2.default.createElement("p", null, "Hello world");
    const Component = (0, _index.withReactQuery)(Wrapped, {
      beforeHydrate: mockBeforeHydrate
    });
    window.__PRELOADED_STATE__ = {
      __reactQuery: mockPreloadedState
    };
    _loggerInstance.default.error = jest.fn();
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(Component, {
      locals: {}
    }));
    expect(_react.screen.getByText(/Hello world/i)).toBeInTheDocument();
    expect(mockBeforeHydrate).toHaveBeenCalledTimes(1);
    expect(mockBeforeHydrate).toHaveBeenCalledWith(mockPreloadedState);
    expect(_loggerInstance.default.error).toHaveBeenCalledTimes(1);
    expect(_loggerInstance.default.error).toHaveBeenCalledWith('Client `beforeHydrate` failed', {
      additionalProperties: {
        error: mockError
      },
      namespace: 'with-react-query.render'
    });
  });
  test(`Has working getInitializers method`, () => {
    expect((0, _index.withReactQuery)({}).getInitializers()).toHaveLength(1);
    expect((0, _index.withReactQuery)({
      getInitializers: () => ['xyz']
    }).getInitializers()).toHaveLength(2);
  });
  test(`Has working getHOCsInUse method`, () => {
    expect((0, _index.withReactQuery)({}).getHOCsInUse()).toHaveLength(1);
    expect((0, _index.withReactQuery)({
      getHOCsInUse: () => ['xyz']
    }).getHOCsInUse()).toHaveLength(2);
  });
});