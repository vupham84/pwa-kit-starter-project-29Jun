"use strict";

var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _index = require("./index");
var errors = _interopRequireWildcard(require("../../errors"));
var _sinon = _interopRequireDefault(require("sinon"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
describe('AppErrorBoundary', () => {
  const cases = [{
    content: 'test 1',
    errorFactory: () => new errors.HTTPNotFound('Not found'),
    afterErrorAssertions: () => {
      expect(_react2.screen.getByText('Error Status: 404')).toBeInTheDocument();
      expect(_react2.screen.getByText('Not found')).toBeInTheDocument();
    },
    variation: 'SDK HTTP Errors'
  }, {
    content: 'test 2',
    errorFactory: () => new Error('Some other error'),
    afterErrorAssertions: function () {
      var _ref = _asyncToGenerator(function* () {
        expect(_react2.screen.getByText('Error Status: 500')).toBeInTheDocument();
        expect(_react2.screen.getByText('Error: Some other error')).toBeInTheDocument();
      });
      return function afterErrorAssertions() {
        return _ref.apply(this, arguments);
      };
    }(),
    variation: 'Generic Javascript Errors'
  }, {
    content: 'test 3',
    errorFactory: () => 'Some string error',
    afterErrorAssertions: () => {
      expect(_react2.screen.getByText('Error Status: 500')).toBeInTheDocument();
      expect(_react2.screen.getByText('Some string error')).toBeInTheDocument();
    },
    variation: 'Error Strings'
  }, {
    content: 'test 4',
    errorFactory: () => undefined,
    afterErrorAssertions: () => {
      expect(_react2.screen.getByText('Error Status: 500')).toBeInTheDocument();
      expect(document.querySelector('pre').innerHTML).toBe('');
    },
    variation: 'Check for message value to be empty if undefined'
  }];
  cases.forEach(({
    content,
    errorFactory,
    afterErrorAssertions,
    variation
  }) => {
    test(`Displays errors correctly (variation: ${variation})`, () => {
      const ref = /*#__PURE__*/_react.default.createRef();
      (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_index.AppErrorBoundaryWithoutRouter, {
        ref: ref
      }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, content)));
      expect(_react2.screen.getByText(content)).toBeInTheDocument();
      (0, _react2.act)(() => {
        ref.current.onGetPropsError(errorFactory());
      });
      expect(_react2.screen.queryByText(content)).toBeNull();
      afterErrorAssertions();
    });
    test(`Watches history, when provided (variation: ${variation})`, () => {
      const history = {
        listen: _sinon.default.stub().returns(_sinon.default.stub())
      };
      const ref = /*#__PURE__*/_react.default.createRef();
      (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_index.AppErrorBoundaryWithoutRouter, {
        ref: ref,
        history: history
      }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, content)));
      expect(_react2.screen.getByText(content)).toBeInTheDocument();
      (0, _react2.act)(() => {
        ref.current.onGetPropsError(errorFactory());
      });
      expect(_react2.screen.queryByText(content)).toBeNull();
      afterErrorAssertions();
      expect(history.listen.called).toBe(true);
    });
  });
  test(`Display Error message from getDerivedStateFromError`, () => {
    const error = new Error('test');
    const result = _index.AppErrorBoundaryWithoutRouter.getDerivedStateFromError(error);
    expect(result.error.message).toEqual(error.toString());
  });
  test(`componentWillUnmount unlistens to history`, () => {
    const unlisten = jest.fn();
    const history = {
      listen: jest.fn().mockReturnValue(unlisten)
    };
    const wrapper = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_index.AppErrorBoundaryWithoutRouter, {
      history: history
    }, "test"));
    wrapper.unmount();
    expect(unlisten).toHaveBeenCalled();
  });
});