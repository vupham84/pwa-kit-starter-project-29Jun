"use strict";

var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _history = require("history");
var _index = _interopRequireDefault(require("./index"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /*
 * Copyright (c) 2024, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
describe('RedirectWithStatus', () => {
  test('Redirects if no status or context is provided', () => {
    const targetUrl = '/target';
    const history = (0, _history.createMemoryHistory)();
    history.push('/redirect');
    (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.Router, {
      history: history
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/redirect"
    }, /*#__PURE__*/_react.default.createElement(_index.default, {
      to: targetUrl
    }))));
    expect(history.location.pathname).toBe(targetUrl);
  });
  test('Redirect renders with correct status', /*#__PURE__*/_asyncToGenerator(function* () {
    const context = {};
    const status = 303;
    const targetUrl = '/target';
    (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.StaticRouter, {
      location: "/redirect",
      context: context
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/redirect"
    }, /*#__PURE__*/_react.default.createElement(_index.default, {
      status: status,
      to: targetUrl
    }))));
    expect(context.status).toBe(status);
    expect(context.url).toBe(targetUrl);
  }));
});