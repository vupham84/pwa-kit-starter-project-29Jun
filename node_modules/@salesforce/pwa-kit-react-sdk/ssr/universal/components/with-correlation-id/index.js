"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withCorrelationId = void 0;
var _react = _interopRequireDefault(require("react"));
var _hooks = require("../../hooks");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _objectDestructuringEmpty(t) { if (null == t) throw new TypeError("Cannot destructure " + t); }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); } /*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * An HOC that injects the correlation id to a component
 * @param Component
 *
 */
const withCorrelationId = Component => {
  const wrappedComponentName = Component.displayName || Component.name;
  const WrappedComponent = _ref => {
    let passThroughProps = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
    const {
      correlationId
    } = (0, _hooks.useCorrelationId)();
    return /*#__PURE__*/_react.default.createElement(Component, _extends({}, passThroughProps, {
      correlationId: correlationId
    }));
  };
  WrappedComponent.displayName = `withCorrelationId(${wrappedComponentName})`;
  return WrappedComponent;
};
exports.withCorrelationId = withCorrelationId;