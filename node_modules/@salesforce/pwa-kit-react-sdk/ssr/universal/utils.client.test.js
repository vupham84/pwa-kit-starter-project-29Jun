"use strict";

var utils = _interopRequireWildcard(require("./utils"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

describe('getProxyConfigs (client-side)', () => {
  const configs = [{
    foo: 'bar'
  }];
  beforeEach(() => {
    global.Progressive = {
      ssrOptions: {
        proxyConfigs: configs
      }
    };
  });
  afterEach(() => {
    delete global.Progressive;
  });
  test('should return proxy configs set on window.Progressive', () => {
    expect(utils.getProxyConfigs()).toEqual(configs);
  });
});
describe('getAssetUrl (client-side)', () => {
  beforeEach(() => {
    global.Progressive = {
      buildOrigin: 'test.com'
    };
  });
  afterEach(() => {
    delete global.Progressive;
  });
  test('should return build origin when path is undefined', () => {
    expect(utils.getAssetUrl()).toBe('test.com');
  });
  test('should return origin + path', () => {
    expect(utils.getAssetUrl('/path')).toBe('test.com/path');
  });
});