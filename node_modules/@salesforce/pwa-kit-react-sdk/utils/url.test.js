"use strict";

var _url = require("./url");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
describe('getAppOrigin', () => {
  const OLD_ENV = process.env;
  const OLD_WINDOW = global.window;
  const TEST_ORIGIN = 'https://www.example.com';
  beforeEach(() => {
    jest.resetModules();
    process.env = _objectSpread({}, OLD_ENV);
  });
  afterEach(() => {
    process.env = OLD_ENV;
    global.window = OLD_WINDOW;
  });
  test('returns `process.env.APP_ORIGIN` when on server', () => {
    // Simulate being on the server by deleting the window.
    delete global.window;

    // Simulate starting the app server by simply setting the `APP_ORIGIN`
    process.env.APP_ORIGIN = TEST_ORIGIN;
    expect((0, _url.getAppOrigin)()).toBe(TEST_ORIGIN);
  });
  test('returns `window.location.origin` when on client', () => {
    expect((0, _url.getAppOrigin)()).toBe('http://localhost');
  });
  test('throws error when APP_ORIGIN is not defined on server.', () => {
    // Simulate being on the server by deleting the window.
    delete global.window;

    // Simulate app server not being initialized.
    process.env.APP_ORIGIN = undefined;
    expect(() => {
      (0, _url.getAppOrigin)();
    }).toThrow();
  });
});