"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sdkReplacementPlugin = void 0;
var _webpack = _interopRequireDefault(require("webpack"));
var _path = _interopRequireWildcard(require("path"));
var _glob = _interopRequireDefault(require("glob"));
var _config = require("./config");
var _utils = require("./utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

const projectDir = process.cwd();
// eslint-disable-next-line @typescript-eslint/no-var-requires
const pkg = require((0, _path.resolve)(projectDir, 'package.json'));
const OVERRIDES_EXTENSIONS = '.+(js|jsx|ts|tsx)';
const getOverridePath = relativePath => {
  var _pkg$ccExtensibility;
  const extendPath = pkg !== null && pkg !== void 0 && (_pkg$ccExtensibility = pkg.ccExtensibility) !== null && _pkg$ccExtensibility !== void 0 && _pkg$ccExtensibility.extends ? `node_modules/${_config.EXT_EXTENDS}` : '';
  const overridePath = _config.EXT_OVERRIDES_DIR === null || _config.EXT_OVERRIDES_DIR === void 0 ? void 0 : _config.EXT_OVERRIDES_DIR.replace(/^\//, '');

  // order matters here, we perform look ups starting in the following order:
  // pkg.ccExtensibility.overridesDir => pkg.ccExtensibility.extends => current projectDir
  if (_config.EXT_EXTENDS && _config.EXT_OVERRIDES_DIR) {
    const filePath = `${(0, _path.resolve)(projectDir, overridePath, ...relativePath)}${OVERRIDES_EXTENSIONS}`;
    const overrideFile = _glob.default.sync(filePath);
    if (overrideFile !== null && overrideFile !== void 0 && overrideFile.length) {
      return overrideFile === null || overrideFile === void 0 ? void 0 : overrideFile[0];
    }
    const extendFile = _glob.default.sync(`${(0, _path.resolve)(projectDir, extendPath, ...relativePath)}${OVERRIDES_EXTENSIONS}`);
    if (extendFile !== null && extendFile !== void 0 && extendFile.length) {
      return extendFile === null || extendFile === void 0 ? void 0 : extendFile[0];
    }
  }
  const generatedProjectOverride = _glob.default.sync(`${(0, _path.resolve)(projectDir, ...relativePath)}${OVERRIDES_EXTENSIONS}`);
  return generatedProjectOverride !== null && generatedProjectOverride !== void 0 && generatedProjectOverride.length ? generatedProjectOverride === null || generatedProjectOverride === void 0 ? void 0 : generatedProjectOverride[0] : (0, _path.resolve)('node_modules', '@salesforce', 'pwa-kit-react-sdk', 'ssr', 'universal', ...relativePath.filter(item => item !== 'app'));
};

/**
 * Allows users to override special SDK components by placing override
 * files in certain magic locations in a project.
 *
 * @returns {webpack.NormalModuleReplacementPlugin}
 */

const sdkReplacementPlugin = () => {
  var _overridables$filter;
  const overridables = [{
    path: (0, _utils.makeRegExp)('pwa-kit-react-sdk(/dist)?/ssr/universal/components/_app-config$'),
    newPath: getOverridePath(['app', 'components', '_app-config', 'index'])
  }, {
    path: (0, _utils.makeRegExp)('pwa-kit-react-sdk(/dist)?/ssr/universal/components/_document$'),
    newPath: getOverridePath(['app', 'components', '_document', 'index'])
  }, {
    path: (0, _utils.makeRegExp)('pwa-kit-react-sdk(/dist)?/ssr/universal/components/_app$'),
    newPath: getOverridePath(['app', 'components', '_app', 'index'])
  }, {
    path: (0, _utils.makeRegExp)('pwa-kit-react-sdk(/dist)?/ssr/universal/components/_error$'),
    newPath: getOverridePath(['app', 'components', '_error', 'index'])
  }, {
    path: (0, _utils.makeRegExp)('pwa-kit-react-sdk(/dist)?/ssr/universal/routes$'),
    newPath: getOverridePath(['app', 'routes'])
  }];
  const replacements = overridables === null || overridables === void 0 ? void 0 : (_overridables$filter = overridables.filter) === null || _overridables$filter === void 0 ? void 0 : _overridables$filter.call(overridables, item => item === null || item === void 0 ? void 0 : item.newPath);
  return new _webpack.default.NormalModuleReplacementPlugin(/.*/, resource => {
    const resolved = _path.default.resolve(resource.context, resource.request);
    const replacement = replacements.find(({
      path
    }) => resolved.match(path));
    const sdkPaths = [_path.default.join('packages', 'pwa-kit-react-sdk'), _path.default.join('node_modules', '@salesforce', 'pwa-kit-react-sdk')];
    const requestedFromSDK = sdkPaths.some(p => resource.context.includes(p));
    if (requestedFromSDK && replacement) {
      resource.request = replacement.newPath;
    }
  });
};
exports.sdkReplacementPlugin = sdkReplacementPlugin;